/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={948:(e,t,n)=>{var s=n(140),r=n(980),a=n(730),i=n(405),o=n(26),l=n(865),u=n(721);u.alea=s,u.xor128=r,u.xorwow=a,u.xorshift7=i,u.xor4096=o,u.tychei=l,e.exports=u},140:function(e,t,n){var s;!function(e,r,a){function i(e){var t,n=this,s=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function l(e,t){var n=new i(e),s=t&&t.state,r=n.next;return r.int32=function(){return 4294967296*n.next()|0},r.double=function(){return r()+11102230246251565e-32*(2097152*r()|0)},r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.alea=l}(0,e=n.nmd(e),n.amdD)},865:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function l(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.tychei=l}(0,e=n.nmd(e),n.amdD)},980:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function l(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xor128=l}(0,e=n.nmd(e),n.amdD)},26:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this;t.next=function(){var e,n,s=t.w,r=t.X,a=t.i;return t.w=s=s+1640531527|0,n=r[a+34&127],e=r[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[a]=n^e,t.i=a,n+(s^s>>>16)|0},function(e,t){var n,s,r,a,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),r=0,a=-32;a<l;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(i=i+1640531527|0,r=0==(n=o[127&a]^=s+i)?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,a=512;a>0;--a)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[r]=s^n;e.w=i,e.X=o,e.i=r}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&(s.X&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xor4096=l}(0,e=n.nmd(e),n.amdD)},405:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this;t.next=function(){var e,n,s=t.x,r=t.i;return e=s[r],n=(e^=e>>>7)^e<<24,n^=(e=s[r+1&7])^e>>>10,n^=(e=s[r+3&7])^e>>>3,n^=(e=s[r+4&7])^e<<7,e=s[r+7&7],n^=(e^=e<<13)^e<<9,s[r]=n,t.i=r+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&(s.x&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xorshift7=l}(0,e=n.nmd(e),n.amdD)},730:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function l(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xorwow=l}(0,e=n.nmd(e),n.amdD)},721:(e,t,n)=>{var s;!function(r,a){var i,o=this,l=256,u="random",c=a.pow(l,6),h=a.pow(2,52),p=2*h,d=l-1;function f(e,t,n){var s=[],d=b(y((t=1==t?{entropy:!0}:t||{}).entropy?[e,x(r)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(l):(e=new Uint8Array(l),(o.crypto||o.msCrypto).getRandomValues(e)),x(e)}catch(e){var t=o.navigator,n=t&&t.plugins;return[+new Date,o,n,o.screen,x(r)]}}():e,3),s),f=new m(s),w=function(){for(var e=f.g(6),t=c,n=0;e<h;)e=(e+n)*l,t*=l,n=f.g(1);for(;e>=p;)e/=2,t/=2,n>>>=1;return(e+n)/t};return w.int32=function(){return 0|f.g(4)},w.quick=function(){return f.g(4)/4294967296},w.double=w,b(x(f.S),r),(t.pass||n||function(e,t,n,s){return s&&(s.S&&g(s,f),e.state=function(){return g(f,{})}),n?(a[u]=e,t):e})(w,d,"global"in t?t.global:this==a,t.state)}function m(e){var t,n=e.length,s=this,r=0,a=s.i=s.j=0,i=s.S=[];for(n||(e=[n++]);r<l;)i[r]=r++;for(r=0;r<l;r++)i[r]=i[a=d&a+e[r%n]+(t=i[r])],i[a]=t;(s.g=function(e){for(var t,n=0,r=s.i,a=s.j,i=s.S;e--;)t=i[r=d&r+1],n=n*l+i[d&(i[r]=i[a=d&a+t])+(i[a]=t)];return s.i=r,s.j=a,n})(l)}function g(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function y(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(y(e[n],t-1))}catch(e){}return s.length?s:"string"==r?e:e+"\0"}function b(e,t){for(var n,s=e+"",r=0;r<s.length;)t[d&r]=d&(n^=19*t[d&r])+s.charCodeAt(r++);return x(t)}function x(e){return String.fromCharCode.apply(0,e)}if(a["seed"+u]=f,b(a.random(),r),e.exports){e.exports=f;try{i=n(914)}catch(e){}}else void 0===(s=function(){return f}.call(t,n,t,e))||(e.exports=s)}([],Math)},129:(e,t,n)=>{var s=n(626),r=n(477),a=n(868),i=n(197),o=n(954),l=n(408),u=n(662);u.alea=s,u.xor128=r,u.xorwow=a,u.xorshift7=i,u.xor4096=o,u.tychei=l,e.exports=u},626:function(e,t,n){var s;!function(e,r,a){function i(e){var t,n=this,s=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function l(e,t){var n=new i(e),s=t&&t.state,r=n.next;return r.int32=function(){return 4294967296*n.next()|0},r.double=function(){return r()+11102230246251565e-32*(2097152*r()|0)},r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.alea=l}(0,e=n.nmd(e),n.amdD)},408:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function l(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.tychei=l}(0,e=n.nmd(e),n.amdD)},477:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function l(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xor128=l}(0,e=n.nmd(e),n.amdD)},954:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this;t.next=function(){var e,n,s=t.w,r=t.X,a=t.i;return t.w=s=s+1640531527|0,n=r[a+34&127],e=r[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[a]=n^e,t.i=a,n+(s^s>>>16)|0},function(e,t){var n,s,r,a,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),r=0,a=-32;a<l;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(i=i+1640531527|0,r=0==(n=o[127&a]^=s+i)?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,a=512;a>0;--a)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[r]=s^n;e.w=i,e.X=o,e.i=r}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&(s.X&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xor4096=l}(0,e=n.nmd(e),n.amdD)},197:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this;t.next=function(){var e,n,s=t.x,r=t.i;return e=s[r],n=(e^=e>>>7)^e<<24,n^=(e=s[r+1&7])^e>>>10,n^=(e=s[r+3&7])^e>>>3,n^=(e=s[r+4&7])^e<<7,e=s[r+7&7],n^=(e^=e<<13)^e<<9,s[r]=n,t.i=r+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&(s.x&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xorshift7=l}(0,e=n.nmd(e),n.amdD)},868:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function l(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xorwow=l}(0,e=n.nmd(e),n.amdD)},662:(e,t,n)=>{var s;!function(r,a){var i,o=this,l=256,u="random",c=a.pow(l,6),h=a.pow(2,52),p=2*h,d=l-1;function f(e,t,n){var s=[],d=b(y((t=1==t?{entropy:!0}:t||{}).entropy?[e,x(r)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(l):(e=new Uint8Array(l),(o.crypto||o.msCrypto).getRandomValues(e)),x(e)}catch(e){var t=o.navigator,n=t&&t.plugins;return[+new Date,o,n,o.screen,x(r)]}}():e,3),s),f=new m(s),w=function(){for(var e=f.g(6),t=c,n=0;e<h;)e=(e+n)*l,t*=l,n=f.g(1);for(;e>=p;)e/=2,t/=2,n>>>=1;return(e+n)/t};return w.int32=function(){return 0|f.g(4)},w.quick=function(){return f.g(4)/4294967296},w.double=w,b(x(f.S),r),(t.pass||n||function(e,t,n,s){return s&&(s.S&&g(s,f),e.state=function(){return g(f,{})}),n?(a[u]=e,t):e})(w,d,"global"in t?t.global:this==a,t.state)}function m(e){var t,n=e.length,s=this,r=0,a=s.i=s.j=0,i=s.S=[];for(n||(e=[n++]);r<l;)i[r]=r++;for(r=0;r<l;r++)i[r]=i[a=d&a+e[r%n]+(t=i[r])],i[a]=t;(s.g=function(e){for(var t,n=0,r=s.i,a=s.j,i=s.S;e--;)t=i[r=d&r+1],n=n*l+i[d&(i[r]=i[a=d&a+t])+(i[a]=t)];return s.i=r,s.j=a,n})(l)}function g(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function y(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(y(e[n],t-1))}catch(e){}return s.length?s:"string"==r?e:e+"\0"}function b(e,t){for(var n,s=e+"",r=0;r<s.length;)t[d&r]=d&(n^=19*t[d&r])+s.charCodeAt(r++);return x(t)}function x(e){return String.fromCharCode.apply(0,e)}if(a["seed"+u]=f,b(a.random(),r),e.exports){e.exports=f;try{i=n(778)}catch(e){}}else void 0===(s=function(){return f}.call(t,n,t,e))||(e.exports=s)}([],Math)},377:(e,t,n)=>{var s=n(832),r=n(652),a=n(801),i=n(30),o=n(618),l=n(49),u=n(971);u.alea=s,u.xor128=r,u.xorwow=a,u.xorshift7=i,u.xor4096=o,u.tychei=l,e.exports=u},832:function(e,t,n){var s;!function(e,r,a){function i(e){var t,n=this,s=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function l(e,t){var n=new i(e),s=t&&t.state,r=n.next;return r.int32=function(){return 4294967296*n.next()|0},r.double=function(){return r()+11102230246251565e-32*(2097152*r()|0)},r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.alea=l}(0,e=n.nmd(e),n.amdD)},49:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function l(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.tychei=l}(0,e=n.nmd(e),n.amdD)},652:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function l(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xor128=l}(0,e=n.nmd(e),n.amdD)},618:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this;t.next=function(){var e,n,s=t.w,r=t.X,a=t.i;return t.w=s=s+1640531527|0,n=r[a+34&127],e=r[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[a]=n^e,t.i=a,n+(s^s>>>16)|0},function(e,t){var n,s,r,a,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),r=0,a=-32;a<l;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(i=i+1640531527|0,r=0==(n=o[127&a]^=s+i)?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,a=512;a>0;--a)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[r]=s^n;e.w=i,e.X=o,e.i=r}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&(s.X&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xor4096=l}(0,e=n.nmd(e),n.amdD)},30:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this;t.next=function(){var e,n,s=t.x,r=t.i;return e=s[r],n=(e^=e>>>7)^e<<24,n^=(e=s[r+1&7])^e>>>10,n^=(e=s[r+3&7])^e>>>3,n^=(e=s[r+4&7])^e<<7,e=s[r+7&7],n^=(e^=e<<13)^e<<9,s[r]=n,t.i=r+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&(s.x&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xorshift7=l}(0,e=n.nmd(e),n.amdD)},801:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function l(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xorwow=l}(0,e=n.nmd(e),n.amdD)},971:(e,t,n)=>{var s;!function(r,a){var i,o=(0,eval)("this"),l=256,u="random",c=a.pow(l,6),h=a.pow(2,52),p=2*h,d=l-1;function f(e,t,n){var s=[],d=b(y((t=1==t?{entropy:!0}:t||{}).entropy?[e,x(r)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(l):(e=new Uint8Array(l),(o.crypto||o.msCrypto).getRandomValues(e)),x(e)}catch(e){var t=o.navigator,n=t&&t.plugins;return[+new Date,o,n,o.screen,x(r)]}}():e,3),s),f=new m(s),w=function(){for(var e=f.g(6),t=c,n=0;e<h;)e=(e+n)*l,t*=l,n=f.g(1);for(;e>=p;)e/=2,t/=2,n>>>=1;return(e+n)/t};return w.int32=function(){return 0|f.g(4)},w.quick=function(){return f.g(4)/4294967296},w.double=w,b(x(f.S),r),(t.pass||n||function(e,t,n,s){return s&&(s.S&&g(s,f),e.state=function(){return g(f,{})}),n?(a[u]=e,t):e})(w,d,"global"in t?t.global:this==a,t.state)}function m(e){var t,n=e.length,s=this,r=0,a=s.i=s.j=0,i=s.S=[];for(n||(e=[n++]);r<l;)i[r]=r++;for(r=0;r<l;r++)i[r]=i[a=d&a+e[r%n]+(t=i[r])],i[a]=t;(s.g=function(e){for(var t,n=0,r=s.i,a=s.j,i=s.S;e--;)t=i[r=d&r+1],n=n*l+i[d&(i[r]=i[a=d&a+t])+(i[a]=t)];return s.i=r,s.j=a,n})(l)}function g(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function y(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(y(e[n],t-1))}catch(e){}return s.length?s:"string"==r?e:e+"\0"}function b(e,t){for(var n,s=e+"",r=0;r<s.length;)t[d&r]=d&(n^=19*t[d&r])+s.charCodeAt(r++);return x(t)}function x(e){return String.fromCharCode.apply(0,e)}if(a["seed"+u]=f,b(a.random(),r),e.exports){e.exports=f;try{i=n(42)}catch(e){}}else void 0===(s=function(){return f}.call(t,n,t,e))||(e.exports=s)}([],Math)},914:()=>{},410:()=>{},628:()=>{},778:()=>{},601:()=>{},792:()=>{},42:()=>{}},t={};function n(s){var r=t[s];if(void 0!==r)return r.exports;var a=t[s]={id:s,loaded:!1,exports:{}};return e[s].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var e={};n.r(e),n.d(e,{assertParamsValid:()=>la,computeFlatOffset:()=>ka,computeOutShape:()=>ca,getNormalizedAxes:()=>fa,isSliceContinous:()=>wa,maskToAxes:()=>ua,parseSliceParams:()=>va,sliceInfo:()=>Ia,startForAxis:()=>ba,startIndicesWithElidedDims:()=>ma,stopForAxis:()=>xa,stopIndicesWithElidedDims:()=>ga,stridesForAxis:()=>ya,stridesWithElidedDims:()=>ha});var t={};n.r(t),n.d(t,{collectGatherOpShapeInfo:()=>Wu,computeOutShape:()=>Bu,segOpComputeOptimalWindowSize:()=>Pu});var s={};n.r(s),n.d(s,{ERF_A1:()=>Iu,ERF_A2:()=>Nu,ERF_A3:()=>$u,ERF_A4:()=>Cu,ERF_A5:()=>Su,ERF_P:()=>vu,PARALLELIZE_THRESHOLD:()=>lu,SELU_SCALE:()=>ku,SELU_SCALEALPHA:()=>wu,applyActivation:()=>sl,assertAndGetBroadcastShape:()=>$i,assertAxesAreInnerMostDims:()=>eo,assertParamsConsistent:()=>iu,assignToTypedArray:()=>Ou,axesAreInnerMostDims:()=>Yi,calculateShapes:()=>xu,combineLocations:()=>Ji,complexWithEvenIndex:()=>Fu,complexWithOddIndex:()=>Du,computeConv2DInfo:()=>Ha,computeConv3DInfo:()=>ja,computeDefaultPad:()=>Ka,computeDilation2DInfo:()=>Va,computeOptimalWindowSize:()=>uu,computeOutAndReduceShapes:()=>Zi,computeOutShape:()=>ou,computePool2DInfo:()=>Ua,computePool3DInfo:()=>Ga,convertConv2DDataFormat:()=>ei,eitherStridesOrDilationsAreOne:()=>Qa,expandShapeToKeepDim:()=>Qi,exponent:()=>Lu,exponents:()=>Mu,fromStringArrayToUint8:()=>Uu,fromUint8ToStringArray:()=>Vu,getAxesPermutation:()=>to,getBroadcastDims:()=>Ii,getComplexWithIndex:()=>_u,getFusedBiasGradient:()=>nl,getFusedDyActivation:()=>tl,getImageCenter:()=>cu,getInnerMostAxes:()=>so,getPermuted:()=>pu,getReductionAxes:()=>Ni,getReshaped:()=>hu,getReshapedPermuted:()=>du,getSliceBeginCoords:()=>fu,getSliceSize:()=>mu,getUndoAxesPermutation:()=>no,log:()=>Eu,mergeRealAndImagArrays:()=>Au,prepareAndValidate:()=>gu,prepareSplitSize:()=>zu,segment_util:()=>t,shouldFuse:()=>rl,slice_util:()=>e,splitRealAndImagArrays:()=>Ru,tupleValuesAreOne:()=>Za,upcastType:()=>Hs,validateInput:()=>bu,validateUpdateShape:()=>yu,warn:()=>Tu});var r={};n.r(r),n.d(r,{json:()=>nb});var a={};n.r(a),n.d(a,{json:()=>sb});var i={};n.r(i),n.d(i,{json:()=>rb});var o={};n.r(o),n.d(o,{json:()=>ab});var l={};n.r(l),n.d(l,{json:()=>ib});var u={};n.r(u),n.d(u,{json:()=>ob});var c={};n.r(c),n.d(c,{json:()=>lb});var h={};n.r(h),n.d(h,{json:()=>ub});var p={};n.r(p),n.d(p,{json:()=>cb});var d={};n.r(d),n.d(d,{json:()=>hb});var f={};n.r(f),n.d(f,{json:()=>pb});var m={};n.r(m),n.d(m,{json:()=>db});var g={};n.r(g),n.d(g,{json:()=>fb});var y={};n.r(y),n.d(y,{json:()=>mb});var b={};n.r(b),n.d(b,{json:()=>gb});var x={};n.r(x),n.d(x,{json:()=>yb});var w={};n.r(w),n.d(w,{json:()=>bb});var k={};n.r(k),n.d(k,{addImpl:()=>bw,bincountImpl:()=>ck,bincountReduceImpl:()=>hk,ceilImpl:()=>fk,concatImpl:()=>wk,expImpl:()=>iv,expm1Impl:()=>hv,floorImpl:()=>Fv,gatherV2Impl:()=>Wv,greaterImpl:()=>Uv,lessImpl:()=>nI,linSpaceImpl:()=>lI,logImpl:()=>cI,maxImpl:()=>$I,maximumImpl:()=>TI,minimumImpl:()=>BI,multiplyImpl:()=>fv,negImpl:()=>JI,prodImpl:()=>bN,rangeImpl:()=>wN,rsqrtImpl:()=>FN,simpleAbsImpl:()=>Sw,sliceImpl:()=>ik,stridedSliceImpl:()=>c$,subImpl:()=>kv,tileImpl:()=>m$,topKImpl:()=>g$,transposeImpl:()=>_w,uniqueImpl:()=>v$});class v{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class I{refCount(e){return N("refCount")}incRef(e){return N("incRef")}timerAvailable(){return!0}time(e){return N("time")}read(e){return N("read")}readSync(e){return N("readSync")}numDataIds(){return N("numDataIds")}disposeData(e,t){return N("disposeData")}write(e,t,n){return N("write")}move(e,t,n,s,r){return N("move")}memory(){return N("memory")}floatPrecision(){return N("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return N("dispose")}}function N(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function $(e){let t=e.length,n=0,s=0;for(;t>0;)s=Math.random()*t|0,t--,n=e[t],e[t]=e[s],e[s]=n}function C(e,t,n){return Math.max(e,Math.min(t,n))}function S(e){return e%2==0?e:e+1}function T(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function E(e,t,n=""){T(D(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function A(e){T(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function R(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||G(e)&&!n)for(let s=0;s<e.length;++s)R(e[s],t,n);else t.push(e);return t}function F(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function D(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function _(e){return e%1==0}function O(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function M(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function L(e,t=(e=>0),n){return new Promise(((s,r)=>{let a=0;const i=()=>{if(e())return void s();a++;const o=t(a);null!=n&&a>=n?r():setTimeout(i,o)};i()}))}function z(e,t){let n=1,s=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${t}`);s=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const r=e.slice();return r[s]=t/n,r}function P(e,t){const n=t.length;return T((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),T(e.every((e=>_(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function B(e,t){const n=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||r?null:P(t,e).sort();let i=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[i]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[i]||a[i]>t)&&1===e[t]&&(n.push(e[t]),s.push(t)),a[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),s.push(t))}return{newShape:n,keptDims:s}}function W(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function V(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function U(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function G(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function H(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function j(e){return"string"==typeof e||e instanceof String}function K(e){return"number"==typeof e}function q(e){return Array.isArray(e)?q(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":K(e)?"float32":j(e)?"string":"boolean"==typeof e?"bool":"float32"}function X(e){return!!(e&&e.constructor&&e.call&&e.apply)}function Y(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function J(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function Z(e,t,n){const s=new Array;if(1===t.length){const r=t[0];for(let t=0;t<r;t++)s[t]=n[e+t]}else{const r=t[0],a=t.slice(1),i=a.reduce(((e,t)=>e*t));for(let t=0;t<r;t++)s[t]=Z(e+t*i,a,n)}return s}function Q(e,t){if(0===e.length)return t[0];const n=e.reduce(((e,t)=>e*t));if(0===n)return[];if(n!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}.`);return Z(0,e,t)}function ee(e,t){const n=te(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function te(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function ne(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return Q(e,new Float32Array(n));if("int32"===t)return Q(e,new Int32Array(n));if("bool"===t)return Q(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function se(e){e.forEach((t=>{T(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function re(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let t=0;t<e.length-1;++t)s+=n[t]*e[t];return s}function ae(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let t=0;t<s.length-1;++t)s[t]=Math.floor(e/n[t]),e-=s[t]*n[t];return s[s.length-1]=e,s}function ie(e){return e&&e.then&&"function"==typeof e.then}const oe="tfjsflags";class le{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(ie(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=function(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}(this.global.location.search);oe in e&&e[oe].split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}function ue(){return he}let ce,he=null;function pe(){if(null==ce){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}ce=e}return ce}function de(e,t){const n=function(){const e=pe();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}const fe="Abs",me="Acos",ge="Acosh",ye="Add",be="AddN",xe="All",we="Any",ke="ArgMax",ve="ArgMin",Ie="Asin",Ne="Asinh",$e="Atan",Ce="Atanh",Se="Atan2",Te="AvgPool",Ee="AvgPoolGrad",Ae="AvgPool3D",Re="AvgPool3DGrad",Fe="BatchMatMul",De="BatchToSpaceND",_e="Bincount",Oe="Cast",Me="Ceil",Le="ClipByValue",ze="Complex",Pe="ComplexAbs",Be="Concat",We="Conv2D",Ve="Conv2DBackpropFilter",Ue="Conv2DBackpropInput",Ge="Conv3D",He="Conv3DBackpropFilterV2",je="Conv3DBackpropInputV2",Ke="Cos",qe="Cosh",Xe="Cumsum",Ye="CropAndResize",Je="DenseBincount",Ze="DepthToSpace",Qe="DepthwiseConv2dNative",et="DepthwiseConv2dNativeBackpropFilter",tt="DepthwiseConv2dNativeBackpropInput",nt="Diag",st="Dilation2D",rt="Dilation2DBackpropInput",at="Dilation2DBackpropFilter",it="RealDiv",ot="Elu",lt="EluGrad",ut="Erf",ct="Equal",ht="Exp",pt="ExpandDims",dt="Expm1",ft="FFT",mt="Fill",gt="FlipLeftRight",yt="Floor",bt="FloorDiv",xt="FusedBatchNorm",wt="GatherV2",kt="GatherNd",vt="Greater",It="GreaterEqual",Nt="Identity",$t="IFFT",Ct="Imag",St="IsFinite",Tt="IsInf",Et="IsNan",At="LeakyRelu",Rt="Less",Ft="LessEqual",Dt="LinSpace",_t="Log",Ot="Log1p",Mt="LogicalAnd",Lt="LogicalNot",zt="LogicalOr",Pt="LRN",Bt="LRNGrad",Wt="Max",Vt="Maximum",Ut="MaxPool",Gt="MaxPoolGrad",Ht="MaxPool3D",jt="MaxPool3DGrad",Kt="MaxPoolWithArgmax",qt="Mean",Xt="Min",Yt="Minimum",Jt="MirrorPad",Zt="Mod",Qt="Multinomial",en="Multiply",tn="Neg",nn="NotEqual",sn="NonMaxSuppressionV3",rn="NonMaxSuppressionV4",an="NonMaxSuppressionV5",on="OnesLike",ln="OneHot",un="Pack",cn="PadV2",hn="Pow",pn="Prelu",dn="Prod",fn="Range",mn="Real",gn="Reciprocal",yn="Relu",bn="Reshape",xn="ResizeNearestNeighbor",wn="ResizeNearestNeighborGrad",kn="ResizeBilinear",vn="ResizeBilinearGrad",In="Relu6",Nn="Reverse",$n="Round",Cn="Rsqrt",Sn="ScatterNd",Tn="Select",En="Selu",An="Slice",Rn="Sin",Fn="Sinh",Dn="Sign",_n="Sigmoid",On="Softplus",Mn="Sqrt",Ln="Sum",zn="SpaceToBatchND",Pn="SplitV",Bn="Softmax",Wn="SquaredDifference",Vn="Square",Un="Sub",Gn="SparseToDense",Hn="StridedSlice",jn="Tan",Kn="Tanh",qn="Tile",Xn="TopK",Yn="Transform",Jn="Transpose",Zn="Unique",Qn="Unpack",es="UnsortedSegmentSum",ts="ZerosLike",ns="Step",ss="FromPixels",rs="RotateWithOffset",as="_FusedMatMul",is="FusedConv2D",os="FusedDepthwiseConv2D",ls=de("kernelRegistry",(()=>new Map)),us=de("gradRegistry",(()=>new Map));function cs(e,t){const n=ms(e,t);return ls.get(n)}function hs(e){return us.get(e)}function ps(e){const t=ls.entries(),n=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[a,i]=r,[o]=a.split("_");o===e&&n.push(i)}return n}function ds(e){const{kernelName:t,backendName:n}=e,s=ms(t,n);ls.has(s)&&console.warn(`The kernel '${t}' for backend '${n}' is already registered`),ls.set(s,e)}function fs(e){const{kernelName:t}=e;us.has(t)&&ue().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),us.set(t,e)}function ms(e,t){return`${t}_${e}`}function gs(e,t){return"string"===t?xs(e):ys([e],t)}function ys(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=R(e)),ue().getBool("DEBUG")&&function(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function bs(){return ue().platform.now()}function xs(e,t="utf-8"){return t=t||"utf-8",ue().platform.encode(e,t)}function ws(e,t="utf-8"){return t=t||"utf-8",ue().platform.decode(e,t)}class ks{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Is)}profileKernel(e,t,n){let s;const r=()=>{s=n()};let a;const i=bs();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(r);else{r();for(const e of s)e.dataSync();a=Promise.resolve({kernelMs:bs()-i})}if(ue().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<s.length;t++){const n=s[t];n.data().then((t=>{vs(t,n.dtype,e)}))}return{kernelName:e,outputs:s,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:r,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),s,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],r,n[2])}))}))}}function vs(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const s=e[t];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class Is{logKernelProfile(e,t,n,s,r,a){const i="number"==typeof s?M(`${s}ms`,9):s.error,o=M(e,25),l=t.rank,u=t.size,c=M(t.shape.toString(),14);let h="";for(const e in r){const n=r[e];if(null!=n){const s=n.shape||t.shape,r=s.length;h+=`${e}: ${r}D ${r>0?s:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}const Ns=20,$s=3,Cs=7;function Ss(e,t,n,s){const r=J(t),a=function(e,t,n,s){const r=F(t),a=s[s.length-1],i=new Array(a).fill(0),o=t.length,l="complex64"===n?Rs(e):e;if(o>1)for(let e=0;e<r/a;e++){const t=e*a;for(let e=0;e<a;e++)i[e]=Math.max(i[e],Ts(l[t+e],0,n).length)}return i}(e,t,n,r),i=t.length,o=As(e,t,n,r,a),l=["Tensor"];return s&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map((e=>"    "+e)).join("\n")),l.join("\n")}function Ts(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(Cs))} + ${parseFloat(e[1].toFixed(Cs))}j`:j(e)?`'${e}'`:"bool"===n?Es(e):parseFloat(e.toFixed(Cs)).toString(),M(s,t)}function Es(e){return 0===e?"false":"true"}function As(e,t,n,s,r,a=!0){const i="complex64"===n?2:1,o=t[0],l=t.length;if(0===l)return"complex64"===n?[Ts(Rs(e)[0],0,n)]:"bool"===n?[Es(e[0])]:[e[0].toString()];if(1===l){if(o>Ns){const t=$s*i;let s=Array.from(e.slice(0,t)),a=Array.from(e.slice((o-$s)*i,o*i));return"complex64"===n&&(s=Rs(s),a=Rs(a)),["["+s.map(((e,t)=>Ts(e,r[t],n))).join(", ")+", ..., "+a.map(((e,t)=>Ts(e,r[o-$s+t],n))).join(", ")+"]"]}return["["+("complex64"===n?Rs(e):Array.from(e)).map(((e,t)=>Ts(e,r[t],n))).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*i,p=[];if(o>Ns){for(let t=0;t<$s;t++){const s=t*h,a=s+h;p.push(...As(e.slice(s,a),u,n,c,r,!1))}p.push("...");for(let t=o-$s;t<o;t++){const s=t*h,a=s+h;p.push(...As(e.slice(s,a),u,n,c,r,t===o-1))}}else for(let t=0;t<o;t++){const s=t*h,a=s+h;p.push(...As(e.slice(s,a),u,n,c,r,t===o-1))}const d=2===l?",":"";p[0]="["+p[0]+d;for(let e=1;e<p.length-1;e++)p[e]=" "+p[e]+d;let f=",\n";for(let e=2;e<l;e++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(a?"":f),p}function Rs(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class Fs{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=F(e),null!=n){const e=n.length;T(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||V(t,this.size),this.strides=J(e)}set(e,...t){0===t.length&&(t=[0]),T(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Ds().makeTensor(this.values,this.shape,this.dtype)}}let Ds=null,_s=null,Os=null;class Ms{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=F(e),this.strides=J(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return _s.buffer(this.shape,this.dtype,e)}bufferSync(){return _s.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Q(this.shape,e)}arraySync(){return Q(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const e=Ds().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>ws(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=Ds().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>ws(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Ds().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Ds().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return _s.print(this,e)}clone(){return this.throwIfDisposed(),_s.clone(this)}toString(e=!1){return Ss(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),_s.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),Ds().makeVariable(this,e,t,n)}}function Ls(){return de("Tensor",(()=>Ms))}Object.defineProperty(Ms,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),Ls();class zs extends Ms{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!D(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Ds().disposeTensor(this),this.dataId=e.dataId,Ds().incRef(this,null)}dispose(){Ds().disposeVariable(this),this.isDisposedInternal=!0}}var Ps,Bs,Ws,Vs,Us;Object.defineProperty(zs,Symbol.hasInstance,{value:e=>e instanceof Ms&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(Ps||(Ps={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(Bs||(Bs={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(Ws||(Ws={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(Vs||(Vs={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(Us||(Us={}));const Gs={float32:Vs,int32:Bs,bool:Ws,complex64:Us};function Hs(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return Gs[e][t]}function js(e){return Hs(e,"int32")}function Ks(e,t){if(e.dtype===t.dtype)return[e,t];const n=Hs(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function qs(e,t){return t.some((t=>t.id===e.id))}function Xs(e){const t=[];return Ys(e,t,new Set),t}function Ys(e,t,n){if(null==e)return;if(e instanceof Ms)return void t.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const r=e;for(const e in r){const s=r[e];n.has(s)||(n.add(s),Ys(s,t,n))}}function Js(e){return null!=e.kernelName}class Zs{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Qs{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Zs}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new ks(this.backendInstance),!0}setupRegisteredKernels(){ps(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){ps(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof I||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,s=n.then((n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0)))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message)),!1)));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(t){return console.warn(`Initialization of backend ${e} failed`),console.warn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:r}=this.initializeBackend(n);if(r||s)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,r=this.readSync(t),a=s.refCount(t);s.disposeData(t,!0),n.backend=e,e.move(t,r,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun((()=>this.startScope(s)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return Qs.nextTensorId++}nextVariableId(){return Qs.nextVariableId++}clone(e){const t=tr.runKernel(Nt,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e};return tr.runKernel(Oe,t,{dtype:"float32"})}})),[],{}),t}runKernel(e,t,n){if(null==cs(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let r=0;n.forEach((e=>{r+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=s-t-r-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const s=this.isTapeOn(),r=this.state.numBytes,a=this.state.numTensors;let i,o;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=Js(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Js(e)){const{kernelName:t,inputs:r,attrs:a}=e;null==this.backendName&&this.backend;const l=cs(t,this.backendName);T(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),i=()=>{const e=this.backend.numDataIds();o=l.kernelFunc({inputs:r,attrs:a,backend:this.backend});const i=Array.isArray(o)?o:[o];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const u=i.map((e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:s}=e;return this.makeTensorFromDataId(t,n,s)}));if(s){const e=this.getTensorsForGradient(t,r,u);n=this.saveTensorsForBackwardMode(e)}return u}}else{const{forwardFunc:t}=e,r=e=>{s&&(n=e.map((e=>this.keep(this.clone(e)))))};i=()=>{const e=this.backend.numDataIds();o=this.tidy((()=>t(this.backend,r)));const n=Array.isArray(o)?o:[o];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:u,attrs:c}=e,h=Js(e)?null:e.backwardsFunc;let p;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(p=this.profiler.profileKernel(l,u,(()=>i())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(p),t=p.outputs):t=i()})),s&&this.addTapeNode(l,u,t,h,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-r,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(u).map((e=>null!=u[e]?u[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:p.timeMs,extraInfo:p.extraInfo}),Array.isArray(o)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const s=hs(e);if(null!=s){const e=s.inputsToSave||[],r=s.outputsToSave||[];let a;s.saveAllInputs?(T(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const i=n.filter(((e,t)=>r[t]));return a.concat(i)}return[]}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let r=e;"string"===n&&j(e[0])&&(r=e.map((e=>xs(e))));const a=s.write(r,t,n),i=new Ms(t,n,a,this.nextTensorId());if(this.trackTensor(i,s),"string"===n){const e=this.state.tensorInfo.get(a),t=function(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,s){const r=new Ms(t,n=n||"float32",e,this.nextTensorId());return this.trackTensor(r,s),r}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const r=new zs(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*H(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof zs||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*H(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,r,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:r},o=hs(e);null!=o&&(s=o.gradFunc),null!=s&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],s=te(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e})),s(e.length>1?e:e[0],r,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Xs(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==s.id||this.track(e)}))}gradients(e,t,n,s=!1){if(T(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));T(r instanceof Ms,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const s={},r={};for(let e=0;e<t.length;e++)s[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],i=a.inputs;for(const e in i){const n=i[e];let o=!1;for(let e=0;e<t.length;e++)if(s[n.id]){a.outputs.forEach((e=>s[e.id]=!0)),o=!0,r[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let t=e.length-1;t>=0;t--){const n=e[t],s=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in s)a[s[e].id]=!0,i[n.id]=!0;break}}const o=[];for(let t=0;t<e.length;t++){const n=e[t];if(r[n.id]&&i[n.id]){const e={};for(const t in n.inputs){const r=n.inputs[t];s[r.id]&&(e[t]=r)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,r);if(!s&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[r.id]=null==n?function(e){const t=ee(F(e),"float32");return tr.makeTensor(t,e,"float32")}(r.shape):n,function(e,t,n,s){for(let r=t.length-1;r>=0;r--){const a=t[r],i=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const r=n((()=>o[t]()));if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const i=a.inputs[t];if(!D(r.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=r;else{const t=e[i.id];e[i.id]=s(t,r),t.dispose()}}}}(e,a,(e=>this.tidy(e)),nr);const s=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:r,grads:s}}))}customGrad(e){return T(X(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;T(t.every((e=>e instanceof Ms)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const s={};return t.forEach(((e,t)=>{s[t]=e})),this.runKernelFunc({forwardFunc:(s,r)=>(n=e(...t,r),T(n.value instanceof Ms,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),T(X(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,s)=>{const r=n.gradFunc(e,s),a=Array.isArray(r)?r:[r];T(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),T(a.every((e=>e instanceof Ms)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return a.forEach(((e,t)=>{i[t]=()=>e})),i},inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=bs(),n=await this.backend.time(e);return n.wallMs=bs()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Zs;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function er(){const e=pe();if(null==e._tfengine){const t=new le(e);e._tfengine=new Qs(t)}var t;return t=e._tfengine.ENV,he=t,Ds=()=>e._tfengine,e._tfengine}Qs.nextTensorId=0,Qs.nextVariableId=0;const tr=er();function nr(e,t){const n={a:e,b:t};return tr.runKernel(ye,n)}function sr(){if("undefined"!=typeof navigator&&null!=navigator){const e=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function rr(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const ar=ue();function ir(e,t){let n=e;if(G(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||G(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&ue().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&or(e,s,[]),s}function or(e,t,n){if(n=n||[],!Array.isArray(e)&&!G(e))return void T(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));T(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),T(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const s=t.slice(1);for(let t=0;t<e.length;++t)or(e[t],s,n.concat(t))}function lr(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function ur(e,t,n,s="numeric"){if(e instanceof Ms)return lr(s,e.dtype,t,n),e;let r=q(e);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),lr(s,r,t,n),null==e||!G(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const a=ir(e,r);G(e)||Array.isArray(e)||(e=[e]);const i="string"!==r?ys(e,r):R(e,[],!0);return tr.makeTensor(i,a,r)}function cr(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,r)=>ur(e,`${t}[${r}]`,n,s)))}function hr(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const s=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const r=(...e)=>{tr.startScope(n);try{const t=s(...e);return ie(t)&&console.error("Cannot return a Promise inside of tidy."),tr.endScope(t),t}catch(e){throw tr.endScope(null),e}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}ar.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),ar.registerFlag("IS_BROWSER",(()=>rr())),ar.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),ar.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),ar.registerFlag("PROD",(()=>!1)),ar.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>ar.getBool("DEBUG"))),ar.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),ar.registerFlag("IS_TEST",(()=>!1)),ar.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),ar.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1));const pr=hr({complex_:function(e,t){const n=ur(e,"real","complex"),s=ur(t,"imag","complex");E(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);const r={real:n,imag:s};return tr.runKernel(ze,r)}});function dr(e,t,n,s){if(null==s&&(s=q(e)),"complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!G(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){se(t);const e=F(t),s=F(n);T(e===s,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`));for(let e=0;e<n.length;++e){const s=n[e],r=e!==n.length-1||s!==F(t.slice(e));T(n[e]===t[e]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return G(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==s?ys(e,s):R(e,[],!0),tr.makeTensor(e,t,s)}function fr(e,t,n){return dr(e,t,ir(e,n),n)}const mr={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function gr(e,t){const n=[],s=[],r=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<r.length;++a){const i=r[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise((async e=>{const t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,s=new Uint8Array(n);let r=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(a,r),r+=4,s.set(n,r),r+=n.length}e(s)}));s.push(e)}else s.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:yr(await Promise.all(s)),specs:n}}function yr(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const s=new Uint8Array(t);let r=0;return n.forEach((e=>{s.set(new Uint8Array(e.buffer),r),r+=e.byteLength})),s.buffer}const br="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function xr(e){return br?Buffer.byteLength(e):new Blob([e]).size}function wr(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let s=0;return e.forEach((e=>{n.set(new Uint8Array(e),s),s+=e.byteLength})),n.buffer}function kr(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:xr(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:xr(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function vr(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{const r=new ArrayBuffer(4*s.length),a=new Uint32Array(r);for(let r=0;r<s.length;r++){const i=s[r],o=e[n[i>>10]+(1023&i)]+t[i>>10];a[r]=o}return new Float32Array(r)}}class Ir{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Ir.instance&&(Ir.instance=new Ir),Ir.instance}static registerSaveRouter(e){Ir.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Ir.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Ir.getHandlers(e,"save")}static getLoadHandlers(e,t){return Ir.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?Ir.getInstance().loadRouters:Ir.getInstance().saveRouters).forEach((t=>{const r=t(e,n);null!==r&&s.push(r)})),s}}const Nr=e=>Ir.getSaveHandlers(e),$r="tensorflowjs",Cr="models_store",Sr="model_info_store";function Tr(){if(!ue().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Er(e){const t=e.result;t.createObjectStore(Cr,{keyPath:"modelPath"}),t.createObjectStore(Sr,{keyPath:"modelPath"})}class Ar{constructor(e){if(this.indexedDB=Tr(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const s=this.indexedDB.open($r,1);s.onupgradeneeded=()=>Er(s),s.onsuccess=()=>{const r=s.result;if(null==t){const t=r.transaction(Cr,"readonly"),s=t.objectStore(Cr).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(r.close(),n(s.error)),t.oncomplete=()=>r.close()}else{const s=kr(t),a=r.transaction(Sr,"readwrite");let i=a.objectStore(Sr);const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:s});let l;o.onsuccess=()=>{l=r.transaction(Cr,"readwrite");const o=l.objectStore(Cr).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s});o.onsuccess=()=>e({modelArtifactsInfo:s}),o.onerror=e=>{i=a.objectStore(Sr);const t=i.delete(this.modelPath);t.onsuccess=()=>(r.close(),n(o.error)),t.onerror=e=>(r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}}},s.onerror=e=>n(s.error)}))}}Ar.URL_SCHEME="indexeddb://";const Rr=e=>{return ue().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ar.URL_SCHEME)?(t=e.slice(Ar.URL_SCHEME.length),new Ar(t)):null;var t};Ir.registerSaveRouter(Rr),Ir.registerLoadRouter(Rr);class Fr{constructor(){this.indexedDB=Tr()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open($r,1);n.onupgradeneeded=()=>Er(n),n.onsuccess=()=>{const s=n.result,r=s.transaction(Sr,"readonly"),a=r.objectStore(Sr).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(s.close(),t(a.error)),r.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(Ar.URL_SCHEME)?t.slice(Ar.URL_SCHEME.length):t,new Promise(((t,n)=>{const s=this.indexedDB.open($r,1);s.onupgradeneeded=()=>Er(s),s.onsuccess=()=>{const r=s.result,a=r.transaction(Sr,"readwrite"),i=a.objectStore(Sr),o=i.get(e);let l;o.onsuccess=()=>{if(null==o.result)return r.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=i.delete(e),a=()=>{l=r.transaction(Cr,"readwrite");const s=l.objectStore(Cr).delete(e);s.onsuccess=()=>t(o.result.modelArtifactsInfo),s.onerror=e=>n(o.error)};s.onsuccess=a,s.onerror=e=>(a(),r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},s.onerror=e=>n(s.error)}))}}const Dr="/",_r="tensorflowjs_models",Or="info",Mr="model_topology",Lr="weight_specs",zr="weight_data",Pr="model_metadata";function Br(e){return{info:[_r,e,Or].join(Dr),topology:[_r,e,Mr].join(Dr),weightSpecs:[_r,e,Lr].join(Dr),weightData:[_r,e,zr].join(Dr),modelMetadata:[_r,e,Pr].join(Dr)}}function Wr(e){const t=e.split(Dr);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(Dr)}class Vr{constructor(e){if(!ue().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Br(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),s=kr(e);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(br)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,s=t.length;e<s;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const r={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),this.LS.setItem(this.keys.modelMetadata,JSON.stringify(r)),{modelArtifactsInfo:s}}catch(e){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const e=JSON.parse(r);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(br){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}Vr.URL_SCHEME="localstorage://";const Ur=e=>{return ue().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Vr.URL_SCHEME)?(t=e.slice(Vr.URL_SCHEME.length),new Vr(t)):null;var t};Ir.registerSaveRouter(Ur),Ir.registerLoadRouter(Ur);class Gr{constructor(){T(ue().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),T("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=_r+Dr,n=Dr+Or;for(let s=0;s<this.LS.length;++s){const r=this.LS.key(s);r.startsWith(t)&&r.endsWith(n)&&(e[Wr(r)]=JSON.parse(this.LS.getItem(r)))}return e}async removeModel(e){var t;const n=Br(e=(t=e).startsWith(Vr.URL_SCHEME)?t.slice(Vr.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const s=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),s}}class Hr{constructor(){this.managers={}}static getInstance(){return null==Hr.instance&&(Hr.instance=new Hr),Hr.instance}static registerManager(e,t){T(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),T(e.length>0,(()=>"scheme must not be an empty string."));const n=Hr.getInstance();T(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}class jr{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(ue().get("IS_BROWSER")){ue().setPlatform("browser",new jr);try{Hr.registerManager(Vr.URL_SCHEME,new Gr)}catch(e){}try{Hr.registerManager(Ar.URL_SCHEME,new Fr)}catch(e){}}let Kr;function qr(e,t="float32",n){return t=t||"float32",se(e),new Fs(e,t,n)}ue().get("IS_NODE")&&ue().setPlatform("node",new class{constructor(){this.util=n(628),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=ue().global.fetch?ue().global.fetch(e,t):(null==Kr&&(Kr=n(410)),Kr(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const Xr=hr({cast_:function(e,t){const n=ur(e,"x","cast");if(!function(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const s={x:n},r={dtype:t};return tr.runKernel(Oe,s,r)}}),Yr=hr({clone_:function(e){const t={x:ur(e,"x","clone","string_or_numeric")};return tr.runKernel(Nt,t)}});function Jr(e){return new Promise((e=>setTimeout(e))).then(e)}er(),_s={buffer:qr,cast:Xr,clone:Yr,print:function(e,t=!1){console.log(e.toString(t))}};class Zr{constructor(e){if(!ue().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Zr.URL_SCHEME)&&(e=e.slice(Zr.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelTopologyFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer);const r=window.URL.createObjectURL(new Blob([JSON.stringify(s)],{type:"application/json"})),a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(a.download=this.modelTopologyFileName,a.href=r,await Jr((()=>a.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Jr((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:kr(e)}}}}function Qr(e,t,n,s){!function(e){T(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){T(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),T(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),T(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,s=null==s?1:s);let r=0;return Promise.all(e.map((a=>(a.then((a=>{const i=n+ ++r/e.length*(s-n);return t(i),a})),a))))}async function ea(e,t){null==t&&(t={});const n=null==t.fetchFunc?ue().platform.fetch:t.fetchFunc,s=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),r=(null==t.onProgress?await Promise.all(s):await Qr(s,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(r):await Qr(r,t.onProgress,.5,1)}Zr.URL_SCHEME="downloads://",Ir.registerSaveRouter((e=>ue().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Zr.URL_SCHEME)?function(e="model"){return new Zr(e)}(e.slice(Zr.URL_SCHEME.length)):null));class ta{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(T("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=ue().platform.fetch,T(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&T(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer),t.body.append("model.json",new Blob([JSON.stringify(s)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:kr(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,s=t.weightsManifest,r=t.generatedBy,a=t.convertedBy,i=t.format,o=t.signature,l=t.userDefinedMetadata;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let u,c;if(null!=s){const e=await this.loadWeights(s);[u,c]=e}const h={modelTopology:n,weightSpecs:u,weightData:c,generatedBy:r,convertedBy:a,format:i};null!=o&&(h.signature=o),null!=l&&(h.userDefinedMetadata=l);const p=t.modelInitializer;return p&&(h.modelInitializer=p),h}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),r=this.weightPathPrefix||n,a=[];for(const t of e)a.push(...t.weights);const i=[],o=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(r+e+s);return this.weightUrlConverter&&i.push(...await Promise.all(o)),[a,wr(await ea(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function na(e){return null!=e.match(ta.URL_SCHEME_REGEX)}ta.URL_SCHEME_REGEX=/^https?:\/\//;const sa=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>na(e))):na(e),n)return ra(e,t)}return null};function ra(e,t){return new ta(e,t)}function aa(e,t){return ra(e,t)}let ia;Ir.registerSaveRouter(sa),Ir.registerLoadRouter(sa);const oa=hr({fromPixels_:function(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,s=!1,r=!1,a=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)r=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);o=!0}if(r){const t=2;if(r&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=cs(ss,tr.backendName)){const n={pixels:e},s={numChannels:t};return tr.runKernel(ss,n,s)}const[l,u]=r?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(i?c=e.getContext("2d").getImageData(0,0,l,u).data:s||n?c=e.data:(a||r||o)&&(null==ia&&(ia=document.createElement("canvas").getContext("2d")),ia.canvas.width=l,ia.canvas.height=u,ia.drawImage(e,0,0,l,u),c=ia.getImageData(0,0,l,u).data),4===t)h=new Int32Array(c);else{const e=l*u;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}return function(e,t,n){if(A(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=ir(e,n);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return dr(e,t,s,n)}(h,[u,l,t],"int32")}});function la(e,t,n){const s=e.shape.length;T(s===t.length,(()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`)),T(s===n.length,(()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`));for(let r=0;r<s;++r)T(t[r]+n[r]<=e.shape[r],(()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`))}function ua(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function ca(e,t,n){const s=[];for(let r=0;r<e.length;r++)s[r]=Math.ceil((t[r]-e[r])/n[r]);return s}function ha(e,t,n,s){const r=[...e];for(let e=r.length;e<s.length;e++)r.push(1);for(let e=0;e<n;e++)0===e?r[t]=1:(r.splice(t,0,1),r.pop());return r}function pa(e,t,n){return n<=e?n:n-(t-1)}function da(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function fa(e,t,n,s,r,a,i,o,l){const u=e.length;let c=new Array(u),h=new Array(u),p=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=ma(i,l,u,s,e),h=ga(o,l,u,r,e),p=ha(a,l,u,e)}else for(let t=0;t<u;t++)c[t]=ba(i,s,a,e,t,l),h[t]=xa(o,r,a,e,t,l),p[t]=ya(a,t,l);return{begin:c,end:h,strides:p}}function ma(e,t,n,s,r){const a=[...r],i=da(n,t);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=0;else{const i=pa(t,n,r);let o=s[i];e&1<<i&&(o=0),a[r]=o}return a}function ga(e,t,n,s,r){const a=[...r],i=da(n,t);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=Number.MAX_SAFE_INTEGER;else{const i=pa(t,n,r);let o=s[i];e&1<<i&&(o=Number.MAX_SAFE_INTEGER),a[r]=o}for(let e=0;e<a.length;e++){const t=r[e];a[e]<0&&(a[e]+=t),a[e]=C(0,a[e],r[e])}return a}function ya(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function ba(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=C(0,i,l-1),i}function xa(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=o>0?C(0,i,l):C(-1,i,l-1),i}function wa(e,t,n){let s=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){s=e;break}for(let r=s+1;r<n.length;r++)if(t[r]>0||n[r]!==e[r])return!1;return!0}function ka(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function va(e,t,n){let s;const r=e.shape.length;let a;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach((e=>{T(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(T(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-s[n]))),[s,a]}function Ia(e,t,n,s,r,a,i,o,l){let u=t.slice(),c=n.slice(),h=s;null==s&&(h=new Array(u.length));const p=ua(i);if(p.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==l)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const d=e.length-u.length,f=ua(o),m=e.slice();f.forEach((e=>{u[e]=0,c[e]=1,m.splice(e,0,1)}));const{begin:g,end:y,strides:b}=fa(m,p,d,u,c,h,r,a,i);u=g,c=y,h=b;const x=ua(l);x.forEach((e=>{c[e]=u[e]+1,h[e]=1}));const w=ca(u,c,h),k=w.filter(((e,t)=>-1===x.indexOf(t)));return{nonStrided:h.every((e=>1===e)),$begin:u,$end:c,$strides:h,size:w,newShape:m,outShape:k}}class Na{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class $a{constructor(){this.classNameMap={}}static getMap(){return null==$a.instance&&($a.instance=new $a),$a.instance}static register(e){$a.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Ca(e){T(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),T("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),T(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),$a.register(e)}function Sa(){return tr}function Ta(){return tr.memory()}function Ea(e,t){return tr.tidy(e,t)}function Aa(e){Xs(e).forEach((e=>e.dispose()))}function Ra(e){return tr.keep(e)}function Fa(e){return tr.setBackend(e)}function Da(e,t,n=1){return tr.registerBackend(e,t,n)}function _a(e){return tr.customGrad(e)}function Oa(e,t){if((G(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&G(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return dr(e,[],[],t)}Os=function(e){ue().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")};class Ma extends Na{minimize(e,t=!1,n){const{value:s,grads:r}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:r[e.name]})));this.applyGradients(e)}else this.applyGradients(r);return Aa(r),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return function(e,t){T(X(e),(()=>"The f passed in variableGrads(f) must be a function")),T(null==t||Array.isArray(t)&&t.every((e=>e instanceof zs)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in tr.registeredVariables)t.push(tr.registeredVariables[e])}const s=n?t.filter((e=>!e.trainable)):null,r=t.length;T((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`));const{value:a,grads:i}=tr.gradients(e,t,null,!0);T(i.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),T(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const o={};return t.forEach(((e,t)=>{null!=i[t]&&(o[e.name]=i[t])})),null!=s&&s.forEach((e=>o[e.name]=null)),{value:a,grads:o}}(e,t)}dispose(){null!=this.iterations_&&Aa(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Oa(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Ma,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});const La=hr({abs_:function(e){const t=ur(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return tr.runKernel(Pe,e)}{const e={x:t};return tr.runKernel(fe,e)}}}),za=hr({add_:function(e,t){let n=ur(e,"a","add"),s=ur(t,"b","add");[n,s]=Ks(n,s);const r={a:n,b:s};return tr.runKernel(ye,r)}}),Pa=hr({all_:function(e,t=null,n=!1){const s={x:ur(e,"x","all","bool")},r={axis:t,keepDims:n};return tr.runKernel(xe,s,r)}}),Ba=hr({any_:function(e,t=null,n=!1){const s={x:ur(e,"x","any","bool")},r={axis:t,keepDims:n};return tr.runKernel(we,s,r)}}),Wa=hr({argMax_:function(e,t=0){const n={x:ur(e,"x","argMax")},s={axis:t};return tr.runKernel(ke,n,s)}});function Va(e,t,n,s,r="NHWC",a){return Ha(e,[...t,e[3]],n,a,s,null,null,ei(r))}function Ua(e,t,n,s,r,a,i="channelsLast"){const[o,l]=qa(t);let u;if("channelsLast"===i)u=[o,l,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);u=[o,l,e[1],e[1]]}return Ha(e,u,n,s,r,a,!1,i)}function Ga(e,t,n,s,r,a,i="NDHWC"){const[o,l,u]=Xa(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,l,u,e[1],e[1]]}return ja(e,c,n,s,r,!1,h,a)}function Ha(e,t,n,s,r,a,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c]=e}const[p,d,,f]=t,[m,g]=qa(n),[y,b]=qa(s),x=Ya(p,y),w=Ya(d,b),{padInfo:k,outHeight:v,outWidth:I}=function(e,t,n,s,r,a,i,o,l){let u,c,h;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,r){null==s&&(s=Ka(e,t,n));const a=e[1];return[Ja((e[0]-t+2*s)/n+1,r),Ja((a-t+2*s)/n+1,r)]}([t,n],a,s,e,o);c=r[0],h=r[1]}else if("same"===e){c=Math.ceil(t/s),h=Math.ceil(n/r);const e=Math.max(0,(c-1)*s+a-t),o=Math.max(0,(h-1)*r+i-n),l=Math.floor(e/2),p=e-l,d=Math.floor(o/2);u={top:l,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/s),h=Math.ceil((n-i+1)/r);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const p="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=Ja((t-a+p+d)/s+1,o),h=Ja((n-i+f+m)/r+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,m,g,x,w,a,o),N=i?f*h:f;let $;return"channelsFirst"===o?$=[l,N,v,I]:"channelsLast"===o&&($=[l,v,I,N]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:v,outWidth:I,outChannels:N,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:$,filterShape:t}}function ja(e,t,n,s,r,a=!1,i="channelsLast",o){let[l,u,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,p,u,c,h]=e}const[d,f,m,,g]=t,[y,b,x]=Xa(n),[w,k,v]=Xa(s),I=Ya(d,w),N=Ya(f,k),$=Ya(m,v),{padInfo:C,outDepth:S,outHeight:T,outWidth:E}=function(e,t,n,s,r,a,i,o,l,u,c){let h,p,d,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,s,r,a){null==r&&(r=Ka(e,t,s));const i=e[1],o=e[2];return[Ja((e[0]-t+2*r)/s+1,a),Ja((i-t+2*r)/s+1,a),Ja((o-t+2*r)/s+1,a),1]}([t,n,s,1],o,0,r,e,c);p=a[0],d=a[1],f=a[2]}else if("same"===e){p=Math.ceil(t/r),d=Math.ceil(n/a),f=Math.ceil(s/i);const e=(p-1)*r+o-t,c=(d-1)*a+l-n,m=(f-1)*i+u-s,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((t-o+1)/r),d=Math.ceil((n-l+1)/a),f=Math.ceil((s-u+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(r,u,c,h,y,b,x,I,N,$,o),A=a?g*p:g;let R;return"channelsFirst"===i?R=[l,A,S,T,E]:"channelsLast"===i&&(R=[l,S,T,E,A]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:p,outDepth:S,outHeight:T,outWidth:E,outChannels:A,padInfo:C,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:I,effectiveFilterHeight:N,effectiveFilterWidth:$,dilationDepth:w,dilationHeight:k,dilationWidth:v,inShape:e,outShape:R,filterShape:t}}function Ka(e,t,n,s=1){const r=Ya(t,s);return Math.floor((e[0]*(n-1)-n+r)/2)}function qa(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Xa(e){return"number"==typeof e?[e,e,e]:e}function Ya(e,t){return t<=1?e:e+(e-1)*(t-1)}function Ja(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function Za(e){const[t,n,s]=qa(e);return 1===t&&1===n&&1===s}function Qa(e,t){return Za(e)||Za(t)}function ei(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}const ti=hr({reshape_:function(e,t){const n={x:ur(e,"x","reshape","string_or_numeric")},s={shape:t};return tr.runKernel(bn,n,s)}}),ni=hr({avgPool_:function(e,t,n,s,r){const a=ur(e,"x","avgPool","float32");T(Qa(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let i=a,o=!1;3===a.rank&&(o=!0,i=ti(a,[1,a.shape[0],a.shape[1],a.shape[2]])),T(4===i.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`)),null!=r&&T(_(s),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r};let c=tr.runKernel(Te,l,u);return c=Xr(c,a.dtype),o?ti(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),si=hr({avgPool3d_:function(e,t,n,s,r,a="NDHWC"){const i=ur(e,"x","avgPool3d","float32");let o=i,l=!1;4===i.rank&&(l=!0,o=ti(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),T(5===o.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`)),T("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),null!=r&&T(_(s),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const u={x:o},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a};let h=tr.runKernel(Ae,u,c);return h=Xr(h,o.dtype),l?ti(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),ri=hr({batchNorm_:function(e,t,n,s,r,a){null==a&&(a=.001);const i=ur(e,"x","batchNorm"),o=ur(t,"mean","batchNorm"),l=ur(n,"variance","batchNorm");let u,c;null!=r&&(u=ur(r,"scale","batchNorm")),null!=s&&(c=ur(s,"offset","batchNorm")),T(o.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),T(null==c||o.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),T(null==u||o.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const h={x:function(e){let t;return t=0===e.rank||1===e.rank?ti(e,[1,1,1,e.size]):2===e.rank?ti(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?ti(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),scale:u,offset:c,mean:o,variance:l},p={varianceEpsilon:a},d=tr.runKernel(xt,h,p);return ti(d,i.shape)}}),ai=hr({batchNorm2d_:function(e,t,n,s,r,a){const i=ur(e,"x","batchNorm"),o=ur(t,"mean","batchNorm"),l=ur(n,"variance","batchNorm");let u,c;return null!=r&&(u=ur(r,"scale","batchNorm")),null!=s&&(c=ur(s,"offset","batchNorm")),T(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),T(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),T(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&T(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&T(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),ri(i,o,l,c,u,a)}}),ii=hr({batchNorm3d_:function(e,t,n,s,r,a){const i=ur(e,"x","batchNorm"),o=ur(t,"mean","batchNorm"),l=ur(n,"variance","batchNorm");let u,c;return null!=r&&(u=ur(r,"scale","batchNorm")),null!=s&&(c=ur(s,"offset","batchNorm")),T(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),T(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),T(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&T(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&T(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),ri(i,o,l,c,u,a)}}),oi=hr({batchNorm4d_:function(e,t,n,s,r,a){const i=ur(e,"x","batchNorm"),o=ur(t,"mean","batchNorm"),l=ur(n,"variance","batchNorm");let u,c;return null!=r&&(u=ur(r,"scale","batchNorm")),null!=s&&(c=ur(s,"offset","batchNorm")),T(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),T(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),T(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&T(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&T(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),ri(i,o,l,c,u,a)}}),li=hr({clipByValue_:function(e,t,n){const s=ur(e,"x","clipByValue");T(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const r={x:s},a={clipValueMin:t,clipValueMax:n};return tr.runKernel(Le,r,a)}}),ui=hr({concat_:function(e,t=0){T(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=cr(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Yr(n[0]);const s=n,r={axis:t};return tr.runKernel(Be,s,r)}}),ci=hr({concat1d_:function(e){return ui(e,0)}}),hi=hr({concat2d_:function(e,t){return ui(e,t)}}),pi=hr({concat3d_:function(e,t){return ui(e,t)}}),di=hr({concat4d_:function(e,t){return ui(e,t)}}),fi=hr({conv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=ur(e,"x","conv2d"),l=ur(t,"filter","conv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=ti(o,[1,o.shape[0],o.shape[1],o.shape[2]])),T(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),T(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),null!=i&&T(_(s),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const h="NHWC"===r?u.shape[3]:u.shape[1];T(h===l.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`)),T(Qa(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const p={x:u,filter:l},d={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},f=tr.runKernel(We,p,d);return c?ti(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),mi=hr({conv1d_:function(e,t,n,s,r="NWC",a=1,i){const o=ur(e,"x","conv1d"),l=ur(t,"filter","conv1d");let u=o,c=!1;2===o.rank&&(c=!0,u=ti(o,[1,o.shape[0],o.shape[1]])),T(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),T(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),null!=i&&T(_(s),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`)),T(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),T(Qa(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),T("NWC"===r,(()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`));const h=ti(l,[1,l.shape[0],l.shape[1],l.shape[2]]),p=ti(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=fi(p,h,[1,n],s,"NHWC",[1,a],i);return ti(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}}),gi=hr({conv2DBackpropInput_:function(e,t,n,s,r,a="NHWC",i){T(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let o=e,l=t,u=!1;3===t.rank&&(u=!0,l=ti(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),T(4===o.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`)),T(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),T(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?l.shape[3]:l.shape[1];T(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),T(h===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`)),null!=i&&T(_(r),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const p={dy:l,filter:n},d={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,inputShape:o},f=tr.runKernel(Ue,p,d);return u?ti(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),yi=hr({conv2dTranspose_:function(e,t,n,s,r,a){const i=ur(e,"x","conv2dTranspose"),o=ur(t,"filter","conv2dTranspose");return gi(n,i,o,s,r,"NHWC",a)}}),bi=hr({conv3d_:function(e,t,n,s,r="NDHWC",a=[1,1,1]){const i=ur(e,"x","conv3d"),o=ur(t,"filter","conv3d");let l=i,u=!1;4===i.rank&&(u=!0,l=ti(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),T(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),T(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),T(l.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),T(Qa(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),T("NDHWC"===r,(()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`));const c={x:l,filter:o},h={strides:n,pad:s,dataFormat:r,dilations:a},p=tr.runKernel(Ge,c,h);return u?ti(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),xi=hr({depthwiseConv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=ur(e,"x","depthwiseConv2d"),l=ur(t,"filter","depthwiseConv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=ti(o,[1,o.shape[0],o.shape[1],o.shape[2]])),T(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),T(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`)),T(u.shape[3]===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),null!=i&&T(_(s),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const h={x:u,filter:l},p={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},d=tr.runKernel(Qe,h,p);return c?ti(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),wi=hr({floorDiv_:function(e,t){let n=ur(e,"a","floorDiv"),s=ur(t,"b","floorDiv");[n,s]=Ks(n,s);const r={a:n,b:s};return tr.runKernel(bt,r)}}),ki=hr({div_:function(e,t){let n=ur(e,"a","div"),s=ur(t,"b","div");if([n,s]=Ks(n,s),"int32"===n.dtype&&"int32"===s.dtype)return wi(n,s);const r={a:n,b:s};return tr.runKernel(it,r,{})}}),vi=hr({elu_:function(e){const t={x:ur(e,"x","elu")};return tr.runKernel(ot,t)}});function Ii(e,t){const n=e.length,s=[];for(let r=0;r<n;r++){const a=n-1-r,i=e[a]||1;(t[t.length-1-r]||1)>1&&1===i&&s.unshift(a)}return s}function Ni(e,t){const n=[];for(let s=0;s<t.length;s++){const r=e[e.length-s-1],a=t.length-s-1,i=t[a];(null==r||1===r&&i>1)&&n.unshift(a)}return n}function $i(e,t){const n=[],s=Math.max(e.length,t.length);for(let r=0;r<s;r++){let s=e[e.length-r-1];null==s&&(s=1);let a=t[t.length-r-1];if(null==a&&(a=1),1===s)n.unshift(a);else if(1===a)n.unshift(s);else{if(s!==a)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);n.unshift(s)}}return n}const Ci=hr({equal_:function(e,t){let n=ur(e,"a","equal"),s=ur(t,"b","equal");[n,s]=Ks(n,s),$i(n.shape,s.shape);const r={a:n,b:s};return tr.runKernel(ct,r)}}),Si=hr({expandDims_:function(e,t=0){const n=ur(e,"x","expandDims","string_or_numeric");T(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const s={input:n},r={dim:t};return tr.runKernel(pt,s,r)}}),Ti=hr({tile_:function(e,t){const n=ur(e,"x","tile","string_or_numeric");T(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const s={x:n},r={reps:t};return tr.runKernel(qn,s,r)}}),Ei=hr({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const r=qr([e,t],s),a=e<=t?e:t;for(let e=0;e<a;++e)r.set(1,e,e);const i=ti(r.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return Ti(Si(i,0),[n[0],1,1]);if(2===n.length)return Ti(Si(Si(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return Ti(Si(Si(Si(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function Ai(e,t,n){const s={shape:e,value:t,dtype:n};return tr.runKernel(mt,{},s)}const Ri=hr({floor_:function(e){const t={x:ur(e,"x","floor")};return tr.runKernel(yt,t)}}),Fi=hr({gather_:function(e,t,n=0,s=0){const r={x:ur(e,"x","gather"),indices:ur(t,"indices","gather","int32")},a={axis:n,batchDims:s};return tr.runKernel(wt,r,a)}}),Di=hr({greater_:function(e,t){let n=ur(e,"a","greater"),s=ur(t,"b","greater");[n,s]=Ks(n,s),$i(n.shape,s.shape);const r={a:n,b:s};return tr.runKernel(vt,r)}}),_i=hr({greaterEqual_:function(e,t){let n=ur(e,"a","greaterEqual"),s=ur(t,"b","greaterEqual");[n,s]=Ks(n,s),$i(n.shape,s.shape);const r={a:n,b:s};return tr.runKernel(It,r)}}),Oi=hr({leakyRelu_:function(e,t=.2){const n={x:ur(e,"x","leakyRelu")},s={alpha:t};return tr.runKernel(At,n,s)}}),Mi=hr({log_:function(e){const t={x:ur(e,"x","log")};return tr.runKernel(_t,t)}}),Li=hr({exp_:function(e){const t={x:ur(e,"x","exp")};return tr.runKernel(ht,t)}}),zi=hr({max_:function(e,t=null,n=!1){const s={x:ur(e,"x","max")},r={reductionIndices:t,keepDims:n};return tr.runKernel(Wt,s,r)}}),Pi=hr({mul_:function(e,t){let n=ur(e,"a","mul"),s=ur(t,"b","mul");[n,s]=Ks(n,s);const r={a:n,b:s};return tr.runKernel(en,r)}}),Bi=hr({sub_:function(e,t){let n=ur(e,"a","sub"),s=ur(t,"b","sub");[n,s]=Ks(n,s);const r={a:n,b:s};return tr.runKernel(Un,r)}}),Wi=hr({sum_:function(e,t=null,n=!1){let s=ur(e,"x","sum");"bool"===s.dtype&&(s=Xr(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return tr.runKernel(Ln,r,a)}}),Vi=hr({logSoftmax_:function(e,t=-1){const n=ur(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const s=_a(((e,n)=>{const s=zi(e,t,!0),r=Bi(e,s),a=Bi(Xr(r,"float32"),Mi(Wi(Li(r),t,!0)));return n([a]),{value:a,gradFunc:(e,n)=>{const[s]=n,r=Li(s);return Bi(e,Pi(Wi(e,t,!0),r))}}}));return s(n)}}),Ui=hr({logicalAnd_:function(e,t){const n=ur(e,"a","logicalAnd","bool"),s=ur(t,"b","logicalAnd","bool");$i(n.shape,s.shape);const r={a:n,b:s};return tr.runKernel(Mt,r)}}),Gi=hr({maxPool_:function(e,t,n,s,r){const a=ur(e,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=ti(a,[1,a.shape[0],a.shape[1],a.shape[2]])),T(4===i.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`)),T(Qa(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=r&&T(_(s),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r},c=tr.runKernel(Ut,l,u);return o?ti(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Hi=hr({maxPool3d_:function(e,t=[1,1,1],n,s,r,a="NDHWC"){const i=ur(e,"x","maxPool3d");let o=i,l=!1;4===i.rank&&(l=!0,o=ti(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),T(5===o.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`)),T("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),null!=r&&T(_(s),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const u={x:o},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a},h=tr.runKernel(Ht,u,c);return l?ti(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),ji=hr({maximum_:function(e,t){let n=ur(e,"a","maximum"),s=ur(t,"b","maximum");[n,s]=Ks(n,s),"bool"===n.dtype&&(n=Xr(n,"int32"),s=Xr(s,"int32")),$i(n.shape,s.shape);const r={a:n,b:s};return tr.runKernel(Vt,r)}}),Ki=hr({mean_:function(e,t=null,n=!1){const s={x:ur(e,"x","mean")},r={axis:t,keepDims:n};return tr.runKernel(qt,s,r)}}),qi=hr({min_:function(e,t=null,n=!1){const s={x:ur(e,"x","min")},r={axis:t,keepDims:n};return tr.runKernel(Xt,s,r)}}),Xi=hr({minimum_:function(e,t){let n=ur(e,"a","minimum"),s=ur(t,"b","minimum");[n,s]=Ks(n,s),"bool"===n.dtype&&(n=Xr(n,"int32"),s=Xr(s,"int32")),$i(n.shape,s.shape);const r={a:n,b:s};return tr.runKernel(Yt,r)}});function Yi(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function Ji(e,t,n){const s=e.length+t.length,r=[];let a=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?r.push(e[a++]):r.push(t[i++]);return r}function Zi(e,t){const n=[],s=e.length;for(let r=0;r<s;r++)-1===t.indexOf(r)&&n.push(e[r]);return[n,t.map((t=>e[t]))]}function Qi(e,t){return Ji(e,t.map((e=>1)),t)}function eo(e,t,n){T(Yi(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function to(e,t){if(Yi(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach((e=>n.push(e))),n}function no(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function so(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}const ro=hr({square_:function(e){const t=ur(e,"x","square");return tr.runKernel("Square",{x:t},{})}}),ao=hr({moments_:function(e,t=null,n=!1){const s=P(t,(e=ur(e,"x","moments")).shape),r=Ki(e,s,n);let a=r.shape;n||(a=Qi(r.shape,s));const i=ro(Bi(Xr(e,"float32"),ti(r,a)));return{mean:r,variance:Ki(i,s,n)}}}),io=hr({neg_:function(e){const t={x:ur(e,"x","neg")};return tr.runKernel(tn,t)}}),oo=hr({notEqual_:function(e,t){let n=ur(e,"a","notEqual"),s=ur(t,"b","notEqual");[n,s]=Ks(n,s),$i(n.shape,s.shape);const r={a:n,b:s};return tr.runKernel(nn,r)}}),lo=hr({oneHot_:function(e,t,n=1,s=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const r={indices:ur(e,"indices","oneHot","int32")},a={depth:t,onValue:n,offValue:s};return tr.runKernel(ln,r,a)}});function uo(e,t="float32"){if("complex64"===t){const t=uo(e,"float32"),n=uo(e,"float32");return pr(t,n)}const n=te(F(e),t);return tr.makeTensor(n,e,t)}function co(e,t="float32"){if("complex64"===t){const t=co(e,"float32"),n=uo(e,"float32");return pr(t,n)}const n=ee(F(e),t);return tr.makeTensor(n,e,t)}const ho=hr({onesLike_:function(e){const t={x:ur(e,"x","onesLike")};return tr.runKernel(on,t)}}),po=hr({pad_:function(e,t,n=0){const s=ur(e,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const r={paddings:t,constantValue:n},a={x:s};return tr.runKernel(cn,a,r)}}),fo=hr({prelu_:function(e,t){const n={x:ur(e,"x","prelu"),alpha:ur(t,"alpha","prelu")};return tr.runKernel(pn,n)}});var mo=n(129);class go{constructor(e,t,n,s,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=r||Math.random();this.random=mo.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,r,a;do{s=2*this.random()-1,r=2*this.random()-1,a=s*s+r*r}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*s*i,t=this.mean+this.stdDev*r*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class yo{constructor(e=0,t=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=mo.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const bo=hr({randomNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const a=new go(t,n,s,!1,r),i=qr(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}}),xo=hr({randomUniform_:function(e,t=0,n=1,s="float32",r){const a=qr(e,s),i=new yo(t,n,null,r);for(let e=0;e<a.values.length;e++)a.values[e]=i.nextValue();return a.toTensor()}}),wo=hr({relu_:function(e){const t={x:ur(e,"x","relu")};return tr.runKernel(yn,t)}}),ko=hr({reverse_:function(e,t){const n={x:ur(e,"x","reverse")},s={dims:t};return tr.runKernel(Nn,n,s)}}),vo=hr({selu_:function(e){const t={x:ur(e,"x","selu")};return tr.runKernel(En,t)}}),Io=hr({separableConv2d_:function(e,t,n,s,r,a=[1,1],i="NHWC"){const o=ur(e,"x","separableConv2d"),l=ur(t,"depthwiseFilter","separableConv2d"),u=ur(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=ti(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");T(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),T(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),T(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),T(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),T(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const p=l.shape[2],d=l.shape[3];T(u.shape[2]===p*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${u.shape[2]}.`));const f=xi(c,l,s,r,i,a),m=fi(f,u,1,"valid",i);return h?ti(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),No=hr({sigmoid_:function(e){const t={x:ur(e,"x","sigmoid")};return tr.runKernel(_n,t)}}),$o=hr({slice_:function(e,t,n){const s=ur(e,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");const r={x:s},a={begin:t,size:n};return tr.runKernel(An,r,a)}}),Co=hr({slice1d_:function(e,t,n){const s=ur(e,"x","slice1d");return T(1===s.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`)),$o(s,[t],[n])}}),So=hr({slice2d_:function(e,t,n){const s=ur(e,"x","slice2d");return T(2===s.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`)),$o(s,t,n)}}),To=hr({slice3d_:function(e,t,n){const s=ur(e,"x","slice3d");return T(3===s.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`)),$o(s,t,n)}}),Eo=hr({slice4d_:function(e,t,n){const s=ur(e,"x","slice4d");return T(4===s.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`)),$o(s,t,n)}}),Ao=hr({softmax_:function(e,t=-1){const n=ur(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const s={logits:n},r={dim:t};return tr.runKernel(Bn,s,r)}}),Ro=hr({softplus_:function(e){const t={x:ur(e,"x","softplus")};return tr.runKernel(On,t)}}),Fo=hr({split_:function(e,t,n=0){const s={x:ur(e,"x","split")},r={numOrSizeSplits:t,axis:n};return tr.runKernel(Pn,s,r)}}),Do=hr({sqrt_:function(e){const t={x:ur(e,"x","sqrt")};return tr.runKernel(Mn,t)}}),_o=hr({squeeze_:function(e,t){const n=ur(e,"x","squeeze");return ti(n,B(n.shape,t).newShape)}}),Oo=hr({stack_:function(e,t=0){const n=cr(e,"tensors","stack","string_or_numeric");T(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&T(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const s=n,r={axis:t};return tr.runKernel(un,s,r)}}),Mo=hr({tanh_:function(e){const t={x:ur(e,"x","tanh")};return tr.runKernel(Kn,t)}});function Lo(e,t){A(e);const n=ir(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return dr(e,null,n,t)}function zo(e,t,n){if(A(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=ir(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return dr(e,t,s,n)}const Po=hr({truncatedNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new go(t,n,s,!0,r),i=qr(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}}),Bo=hr({unstack_:function(e,t=0){const n=ur(e,"x","unstack","string_or_numeric");T(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const s={value:n},r={axis:t};return tr.runKernel(Qn,s,r)}}),Wo=hr({broadcastTo_:function(e,t){let n=ur(e,"broadcastTo","x");const s=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=ti(n,e)}const r=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(r[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Yr(n);const i={x:n},o={reps:a};return tr.runKernel(qn,i,o)}}),Vo=hr({where_:function(e,t,n){const s=ur(t,"a","where"),r=ur(n,"b","where"),a=ur(e,"condition","where","bool"),i=$i(s.shape,r.shape),o=Wo(s,i),l=Wo(r,i);1===a.rank&&T(a.shape[0]===s.shape[0],(()=>"The first dimension of `a` must match the size of `condition`.")),1!==a.rank&&E(a.shape,l.shape,"Error in where: ");const u={condition:a,t:o,e:l};return tr.runKernel(Tn,u)}}),Uo=hr({zerosLike_:function(e){const t={x:ur(e,"x","zerosLike")};return tr.runKernel(ts,t)}}),Go=hr({transpose_:function(e,t){const n=ur(e,"x","transpose");if(null==t&&(t=n.shape.map(((e,t)=>t)).reverse()),T(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`)),t.forEach((e=>{T(e>=0&&e<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${t}`))})),n.rank<=1)return n.clone();const s={x:n},r={perm:t};return tr.runKernel(Jn,s,r)}}),Ho=hr({dropout_:function(e,t,n,s){const r=ur(e,"x","dropout");if(T("float32"===r.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`)),T(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof Ms?r.clone():r;const a=function(e,t){if(null==t)return e.shape.slice();if(D(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?n.push(e.shape[s]):n.push(t[s]);return n}return t}(r,n),i=1-t,o=ki(Ri(za(xo(a,0,1,"float32",s),i)),i);return Pi(r,o)}}),jo=hr({imag_:function(e){const t={input:ur(e,"input","imag")};return tr.runKernel(Ct,t)}}),Ko=hr({real_:function(e){const t={input:ur(e,"input","real")};return tr.runKernel(mn,t)}}),qo=hr({fft_:function(e){T("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return tr.runKernel(ft,t)}}),Xo=hr({rfft_:function(e,t){T("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const s=e.size/n;let r;if(null!=t&&t<n){const s=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,r=$o(e,s,a),n=t}else if(null!=t&&t>n){const s=e.shape.map((e=>e));s[e.shape.length-1]=t-n,r=ui([e,uo(s)],e.shape.length-1),n=t}else r=e;const a=Uo(r),i=ti(pr(r,a),[s,n]),o=qo(i),l=Math.floor(n/2)+1,u=Ko(o),c=jo(o),h=Fo(u,[l,n-l],u.shape.length-1),p=Fo(c,[l,n-l],c.shape.length-1),d=r.shape.slice();return d[r.shape.length-1]=l,ti(pr(h[0],p[0]),d)}}),Yo=hr({ifft_:function(e){T("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return tr.runKernel($t,t)}}),Jo=hr({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let s;if(t<=2){const r=ti(e,[n,t]);s=Yo(r)}else{const r=[n,2*(t-1)],a=ti(Ko(e),[n,t]),i=ti(jo(e),[n,t]),o=ko($o(a,[0,1],[n,t-2]),1),l=Pi(ko($o(i,[0,1],[n,t-2]),1),Oa(-1)),u=ui([a,o],1),c=ui([i,l],1),h=ti(pr(u,c),[r[0],r[1]]);s=Yo(h)}if(s=Ko(s),3===e.rank&&0!==e.shape[0]){const t=s,n=e.shape[0];s=ti(s,[n,s.shape[0]/n,s.shape[1]]),t.dispose()}return s}}),Zo=hr({conv2DBackpropFilter_:function(e,t,n,s,r,a="NHWC",i){let o=e;3===e.rank&&(o=ti(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=ti(t,[1,t.shape[0],t.shape[1],t.shape[2]])),T(4===o.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`)),T(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),T(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];T(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),T(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),null!=i&&T(_(r),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const h={x:o,dy:l},p={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,filterShape:n};return tr.runKernel(Ve,h,p)}}),Qo=hr({relu6_:function(e){const t={x:ur(e,"x","relu6")};return tr.runKernel(In,t)}}),el=hr({step_:function(e,t=0){const n={x:ur(e,"x","step")},s={alpha:t};return tr.runKernel(ns,n,s)}});function tl(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Pi(e,el(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function nl(e,t){let n=t;const s=Ni(e.shape,t.shape);return s.length>0&&(n=Wi(n,s)),ti(n,e.shape)}function sl(e,t,n,s){if("linear"===t)return e;if("relu"===t)return wo(e);if("elu"===t)return vi(e);if("relu6"===t)return Qo(e);if("prelu"===t)return fo(e,n);if("leakyrelu"===t)return Oi(e,s);throw new Error(`Unknown fused activation ${t}.`)}const rl=(e,t)=>!(e>0)||"linear"===t,al=hr({fusedConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",!1===rl(tr.state.gradientDepth,l)){let h=fi(e,t,n,s,r,a,i);return null!=o&&(h=za(h,o)),sl(h,l,u,c)}const h=ur(e,"x","conv2d"),p=ur(t,"filter","conv2d");let d=h,f=!1;3===h.rank&&(f=!0,d=ti(h,[1,h.shape[0],h.shape[1],h.shape[2]])),T(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),T(4===p.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${p.rank}.`)),null!=i&&T(_(s),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`)),T(d.shape[3]===p.shape[2],(()=>`Error in conv2d: depth of input (${d.shape[3]}) must match input depth for filter ${p.shape[2]}.`)),T(Qa(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),T("NHWC"===r,(()=>`Error in conv2d: got dataFormat of ${r} but only NHWC is currently supported.`));const m=Ha(d.shape,p.shape,n,a,s,i);let g,y;null!=o&&(g=ur(o,"bias","fused conv2d"),[g]=Ks(g,h),$i(m.outShape,g.shape)),null!=u&&(y=ur(u,"prelu weights","fused conv2d"));const b=(e,t)=>{const[r,i,o,u]=t,c=tl(e,o,l);T(Za(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const h=[gi(i.shape,c,r,n,s),Zo(i,c,r.shape,n,s)];if(null!=u){const e=nl(u,c);h.push(e)}return h},x={x:d,filter:p,bias:g,preluActivationWeights:y},w={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};if(null==o){const e=_a(((e,t,n)=>{let s=tr.runKernel(is,x,w);return n([t,e,s]),f&&(s=ti(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}));return e(d,p)}{const e=_a(((e,t,n,s)=>{let r=tr.runKernel(is,x,w);return s([t,e,r,n]),f&&(r=ti(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}));return e(d,p,g)}}}),il=hr({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,s,r,a=[1,1],i){let o=e;3===e.rank&&(o=ti(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=ti(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:o,dy:l},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,filterShape:n};return tr.runKernel(et,u,c)}}),ol=hr({depthwiseConv2dNativeBackpropInput_:function(e,t,n,s,r,a=[1,1],i){let o=t,l=!1;3===t.rank&&(l=!0,o=ti(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:o,filter:n},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,inputShape:e},h=tr.runKernel(tt,u,c);return l?ti(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),ll=hr({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===rl(tr.state.gradientDepth,l)){let h=xi(e,t,n,s,r,a,i);return null!=o&&(h=za(h,o)),sl(h,l,u,c)}const h=ur(e,"x","depthwiseConv2d"),p=ur(t,"filter","depthwiseConv2d");let d=h,f=!1;3===h.rank&&(f=!0,d=ti(h,[1,h.shape[0],h.shape[1],h.shape[2]])),T(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),T(4===p.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`)),T(d.shape[3]===p.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${p.shape[2]}.`)),null==a&&(a=[1,1]),T(Qa(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),null!=i&&T(_(s),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${s}.`));const m=Ha(d.shape,p.shape,n,a,s,i,!0);let g,y;null!=o&&(g=ur(o,"bias","fused conv2d"),[g]=Ks(g,h),$i(m.outShape,g.shape)),null!=u&&(y=ur(u,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{T(Za(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[r,o,u,c]=t,h=tl(e,u,l),p=ol(o.shape,h,r,n,s,a,i),d=il(o,h,r.shape,n,s,a,i);return null!=c?[p,d,nl(g,h)]:[p,d]},x={x:d,filter:p,bias:g,preluActivationWeights:y},w={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};if(null==o){const e=_a(((e,t,n)=>{let s=tr.runKernel(os,x,w);return n([t,e,s]),f&&(s=ti(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}));return e(d,p)}{const e=_a(((e,t,n,s)=>{let r=tr.runKernel(os,x,w);return s([t,e,r,n]),f&&(r=ti(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}));return e(d,p,g)}}}),ul=hr({matMul_:function(e,t,n=!1,s=!1){let r=ur(e,"a","matMul"),a=ur(t,"b","matMul");[r,a]=Ks(r,a);const i={a:r,b:a},o={transposeA:n,transposeB:s};return tr.runKernel(Fe,i,o)}}),cl=hr({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:s=!1,bias:r,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:o}){if(!1===rl(tr.state.gradientDepth,a)){let l=ul(e,t,n,s);return null!=r&&(l=za(l,r)),sl(l,a,i,o)}let l=ur(e,"a","fused matMul"),u=ur(t,"b","fused matMul");[l,u]=Ks(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],h=s?u.shape[u.rank-1]:u.shape[u.rank-2],p=n?l.shape[l.rank-1]:l.shape[l.rank-2],d=s?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=F(f),y=F(m);T(l.rank>=2&&u.rank>=2&&l.rank===u.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${l.rank} and ${u.rank}.`)),T(D(f,m),(()=>`Error in fused matMul: outer dimensions (${f}) and (${m}) of Tensors with shapes ${l.shape} and ${u.shape} must match.`)),T(c===h,(()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${s} must match.`));const b=l.shape.slice(0,-2).concat([p,d]),x=ti(l,n?[g,c,p]:[g,p,c]),w=ti(u,s?[y,d,h]:[y,h,d]);let k,v;null!=r&&(k=ur(r,"bias","fused matMul"),[k]=Ks(k,l),$i(b,k.shape)),null!=i&&(v=ur(i,"prelu weights","fused matMul"));const I=(e,t)=>{const[i,o,l,u]=t,c=tl(ti(e,l.shape),l,a);let h,p;return n||s?!n&&s?(h=ul(c,o,!1,!1),p=ul(c,i,!0,!1)):n&&!s?(h=ul(o,c,!1,!0),p=ul(i,c,!1,!1)):(h=ul(o,c,!0,!0),p=ul(c,i,!0,!0)):(h=ul(c,o,!1,!0),p=ul(i,c,!0,!1)),null!=r?[h,p,nl(u,c)]:[h,p]},N={a:x,b:w,bias:k,preluActivationWeights:v},$={transposeA:n,transposeB:s,activation:a,leakyreluAlpha:o};if(null==r){const e=_a(((e,t,n)=>{const s=tr.runKernel(as,N,$);return n([e,t,s]),{value:ti(s,b),gradFunc:I}}));return e(x,w)}{const e=_a(((e,t,n,s)=>{const r=tr.runKernel(as,N,$);return s([e,t,r,n]),{value:ti(r,b),gradFunc:I}}));return e(x,w,k)}}});function hl(e,t,n){const s=1-e%2,r=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+s-1);r[a]=t-n*Math.cos(i)}return Lo(r,"float32")}hr({hammingWindow_:function(e){return hl(e,.54,.46)}});const pl=hr({hannWindow_:function(e){return hl(e,.5,.5)}}),dl=hr({frame_:function(e,t,n,s=!1,r=0){let a=0;const i=[];for(;a+t<=e.size;)i.push($o(e,a,t)),a+=n;if(s)for(;a<e.size;){const s=a+t-e.size,o=ui([$o(e,a,t-s),Ai([s],r)]);i.push(o),a+=n}return 0===i.length?zo([],[0,t]):ti(ui(i),[i.length,t])}});hr({stft_:function(e,t,n,s,r=pl){var a;null==s&&(a=t,s=Math.floor(Math.pow(2,Math.ceil(Math.log(a)/Math.log(2)))));const i=dl(e,t,n),o=Pi(i,r(t)),l=[];for(let e=0;e<i.shape[0];e++)l.push(Xo($o(o,[e,0],[1,t]),s));return ui(l)}});const fl=hr({cropAndResize_:function(e,t,n,s,r="bilinear",a=0){const i=ur(e,"image","cropAndResize"),o=ur(t,"boxes","cropAndResize","float32"),l=ur(n,"boxInd","cropAndResize","int32"),u=o.shape[0];T(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),T(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`)),T(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`)),T(2===s.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`)),T(s[0]>=1&&s[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${s}`)),T("bilinear"===r||"nearest"===r,(()=>`method must be bilinear or nearest, but was ${r}`));const c={image:i,boxes:o,boxInd:l},h={method:r,extrapolationValue:a,cropSize:s};return tr.runKernel(Ye,c,h)}}),ml=hr({flipLeftRight_:function(e){const t=ur(e,"image","flipLeftRight","float32");T(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return tr.runKernel(gt,n,{})}}),gl=hr({rotateWithOffset_:function(e,t,n=0,s=.5){const r=ur(e,"image","rotateWithOffset","float32");T(4===r.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`));const a={image:r},i={radians:t,fillValue:n,center:s};return tr.runKernel(rs,a,i)}});function yl(e,t,n,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),T(0<=s&&s<=1,(()=>`iouThreshold must be in [0, 1], but was '${s}'`)),T(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),T(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),T(1===t.rank,(()=>"scores must be a 1D tensor")),T(t.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`)),T(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const bl=hr({nonMaxSuppression_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=ur(e,"boxes","nonMaxSuppression"),i=ur(t,"scores","nonMaxSuppression"),o=yl(a,i,n,s,r),l={maxOutputSize:n=o.maxOutputSize,iouThreshold:s=o.iouThreshold,scoreThreshold:r=o.scoreThreshold};return tr.runKernel(sn,{boxes:a,scores:i},l)}});function xl(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,r=e.length,a=0,i=!1;for(;s<r;){a=s+(r-s>>>1);const o=n(t,e[a]);o>0?s=a+1:(r=a,i=!o)}return i?s:-s-1}(e,t,n||wl)}(e,t,n),r=s<0?-(s+1):s;e.splice(r,0,t)}function wl(e,t){return e>t?1:e<t?-1:0}function kl(e,t,n,s,r){return Nl(e,t,n,s,r,0)}function vl(e,t,n,s,r,a){return Nl(e,t,n,s,r,0,!1,a,!0)}function Il(e,t,n,s,r,a){return Nl(e,t,n,s,r,a,!0)}function Nl(e,t,n,s,r,a,i=!1,o=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>r&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(Sl);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<r)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=$l(e,a,h[n]);if(i>=s){o=!0;break}if(t.score=t.score*Cl(s,c,i),t.score<=r)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),p.push(t.score)):t.score>r&&xl(u,t,Sl))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=p),l&&(m.validOutputs=d),m}function $l(e,t,n){const s=e.subarray(4*t,4*t+4),r=e.subarray(4*n,4*n+4),a=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),p=Math.max(r[1],r[3]),d=(o-a)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function Cl(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function Sl(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const Tl=hr({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=ur(e,"boxes","nonMaxSuppression"),o=ur(t,"scores","nonMaxSuppression"),l=yl(i,o,n,s,r,a),u={boxes:i,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},h=tr.runKernel(an,u,c);return{selectedIndices:h[0],selectedScores:h[1]}}}),El=hr({nonMaxSuppressionPadded_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=ur(e,"boxes","nonMaxSuppression"),o=ur(t,"scores","nonMaxSuppression"),l=yl(i,o,n,s,r,null),u={boxes:i,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},h=tr.runKernel(rn,u,c);return{selectedIndices:h[0],validOutputs:h[1]}}}),Al=hr({resizeBilinear_:function(e,t,n=!1,s=!1){const r=ur(e,"images","resizeBilinear");T(3===r.rank||4===r.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`)),T(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),T(!1===s||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=ti(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=tr.runKernel(kn,o,l);return i?ti(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),Rl=hr({resizeNearestNeighbor_:function(e,t,n=!1,s=!1){const r=ur(e,"images","resizeNearestNeighbor");T(3===r.rank||4===r.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`)),T(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),T("float32"===r.dtype||"int32"===r.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),T(!1===s||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=ti(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=tr.runKernel(xn,o,l);return i?ti(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),Fl=hr({transform_:function(e,t,n="nearest",s="constant",r=0,a){const i=ur(e,"image","transform","float32"),o=ur(t,"transforms","transform","float32");T(4===i.rank,(()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`)),T(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),T(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const l={image:i,transforms:o},u={interpolation:n,fillMode:s,fillValue:r,outputShape:a};return tr.runKernel(Yn,l,u)}}),Dl=hr({lessEqual_:function(e,t){let n=ur(e,"a","lessEqual"),s=ur(t,"b","lessEqual");[n,s]=Ks(n,s),$i(n.shape,s.shape);const r={a:n,b:s};return tr.runKernel(Ft,r)}});function _l(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const r={start:e,stop:t,step:n,dtype:s};return tr.runKernel(fn,{},r)}const Ol=hr({bandPart_:function(e,t,n){T(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),T(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const s=ur(e,"a","bandPart");T(s.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`));const r=s.shape,[a,i]=s.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=a),n<0&&(n=i);const o=ti(_l(0,a,1,"int32"),[-1,1]),l=_l(0,i,1,"int32"),u=Bi(o,l),c=Ui(Dl(u,Oa(+t,"int32")),_i(u,Oa(-n,"int32"))),h=uo([a,i],s.dtype);return ti(Oo(Bo(ti(s,[-1,a,i])).map((e=>Vo(c,e,h)))),r)}}),Ml=hr({pow_:function(e,t){let n=ur(e,"base","pow"),s=ur(t,"exp","pow");[n,s]=Ks(n,s);const r={a:n,b:s};return tr.runKernel(hn,r)}});function Ll(e,t,n=null){if(0===e.rank)return La(e);if(1!==e.rank&&null===n)return Ll(ti(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Wi(La(e),n);if(t===1/0)return zi(La(e),n);if(t===-1/0)return qi(La(e),n);if("euclidean"===t||2===t)return Do(Wi(Ml(La(e),Oa(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return zi(Wi(La(e),n[0]),n[1]-1);if(t===1/0)return zi(Wi(La(e),n[1]),n[0]);if(t===-1/0)return qi(Wi(La(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return Do(Wi(ro(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const zl=hr({norm_:function(e,t="euclidean",n=null,s=!1){const r=Ll(e=ur(e,"x","norm"),t,n);let a=r.shape;if(s){const t=P(n,e.shape);a=Qi(r.shape,t)}return ti(r,a)}}),Pl=hr({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,T(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)T(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=Fo(e,e.shape[0],0).map((e=>_o(e,[0])));T(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],s=e;for(let t=0;t<e.length;++t)n.push(tr.tidy((()=>{let e=s[t];if(t>0)for(let s=0;s<t;++s){const t=Pi(Wi(Pi(n[s],e)),n[s]);e=Bi(e,t)}return ki(e,zl(e,"euclidean"))})));return t?Oo(n,0):n}});function Bl(e,t=!1){return tr.tidy((()=>{T(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],s=e.shape[1];let r=Ei(n),a=Yr(e);const i=zo([[1]],[1,1]);let o=Yr(i);const l=n>=s?s:n;for(let e=0;e<l;++e){const t=a,l=o,u=r;[o,a,r]=tr.tidy((()=>{const t=$o(a,[e,e],[n-e,1]),l=zl(t),u=$o(a,[e,e],[1,1]),c=Vo(Di(u,0),zo([[-1]]),zo([[1]])),h=Bi(u,Pi(c,l)),p=ki(t,h);o=1===p.shape[0]?Yr(i):ui([i,$o(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=io(ki(ul(c,h),l)),f=$o(a,[e,0],[n-e,s]),m=Pi(d,o),g=Go(o);if(0===e)a=Bi(f,ul(m,ul(g,f)));else{const t=Bi(f,ul(m,ul(g,f)));a=ui([$o(a,[0,0],[e,s]),t],0)}const y=Go(m),b=$o(r,[0,e],[n,r.shape[1]-e]);if(0===e)r=Bi(b,ul(ul(b,o),y));else{const t=Bi(b,ul(ul(b,o),y));r=ui([$o(r,[0,0],[n,e]),t],1)}return[o,a,r]})),Aa([t,l,u])}return!t&&n>s&&(r=$o(r,[0,0],[n,s]),a=$o(a,[0,0],[s,s])),[r,a]}))}const Wl=hr({qr_:function(e,t=!1){if(T(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Bl(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),s=Bo(ti(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),r=[],a=[];return s.forEach((e=>{const[n,s]=Bl(e,t);r.push(n),a.push(s)})),[ti(Oo(r,0),e.shape),ti(Oo(a,0),e.shape)]}}});var Vl;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Vl||(Vl={}));const Ul=hr({computeWeightedLoss_:function(e,t,n=Vl.SUM_BY_NONZERO_WEIGHTS){const s=ur(e,"losses","computeWeightedLoss");let r=null;null!=t&&(r=ur(t,"weights","computeWeightedLoss"));const a=null==r?s:Pi(s,r);if(n===Vl.NONE)return a;if(n===Vl.SUM)return Wi(a);if(n===Vl.MEAN){if(null==r)return Ki(a);{const e=s.size/r.size,t=ki(Wi(a),Wi(r));return e>1?ki(t,Oa(e)):t}}if(n===Vl.SUM_BY_NONZERO_WEIGHTS){if(null==r)return ki(Wi(a),Oa(s.size));{const e=Pi(r,co(s.shape)),t=Xr(Wi(oo(e,Oa(0))),"float32");return ki(Wi(a),t)}}throw Error(`Unknown reduction: ${n}`)}});hr({absoluteDifference_:function(e,t,n,s=Vl.SUM_BY_NONZERO_WEIGHTS){const r=ur(e,"labels","absoluteDifference"),a=ur(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=ur(n,"weights","absoluteDifference")),E(r.shape,a.shape,"Error in absoluteDifference: ");const o=La(Bi(r,a));return Ul(o,i,s)}}),hr({cosineDistance_:function(e,t,n,s,r=Vl.SUM_BY_NONZERO_WEIGHTS){const a=ur(e,"labels","cosineDistance"),i=ur(t,"predictions","cosineDistance");let o=null;null!=s&&(o=ur(s,"weights","cosineDistance")),E(a.shape,i.shape,"Error in cosineDistance: ");const l=Oa(1),u=Bi(l,Wi(Pi(a,i),n,!0));return Ul(u,o,r)}}),hr({hingeLoss_:function(e,t,n,s=Vl.SUM_BY_NONZERO_WEIGHTS){let r=ur(e,"labels","hingeLoss");const a=ur(t,"predictions","hingeLoss");let i=null;null!=n&&(i=ur(n,"weights","hingeLoss")),E(r.shape,a.shape,"Error in hingeLoss: ");const o=Oa(1);r=Bi(Pi(Oa(2),r),o);const l=wo(Bi(o,Pi(r,a)));return Ul(l,i,s)}}),hr({huberLoss_:function(e,t,n,s=1,r=Vl.SUM_BY_NONZERO_WEIGHTS){const a=ur(e,"labels","huberLoss"),i=ur(t,"predictions","huberLoss");let o=null;null!=n&&(o=ur(n,"weights","huberLoss")),E(a.shape,i.shape,"Error in huberLoss: ");const l=Oa(s),u=La(Bi(i,a)),c=Xi(u,l),h=Bi(u,c),p=za(Pi(Oa(.5),ro(c)),Pi(l,h));return Ul(p,o,r)}}),hr({logLoss_:function(e,t,n,s=1e-7,r=Vl.SUM_BY_NONZERO_WEIGHTS){const a=ur(e,"labels","logLoss"),i=ur(t,"predictions","logLoss");let o=null;null!=n&&(o=ur(n,"weights","logLoss")),E(a.shape,i.shape,"Error in logLoss: ");const l=Oa(1),u=Oa(s),c=io(Pi(a,Mi(za(i,u)))),h=Pi(Bi(l,a),Mi(za(Bi(l,i),u))),p=Bi(c,h);return Ul(p,o,r)}});const Gl=hr({squaredDifference_:function(e,t){let n=ur(e,"a","squaredDifference"),s=ur(t,"b","squaredDifference");[n,s]=Ks(n,s),$i(n.shape,s.shape);const r={a:n,b:s};return tr.runKernel(Wn,r,{})}});hr({meanSquaredError_:function(e,t,n,s=Vl.SUM_BY_NONZERO_WEIGHTS){const r=ur(e,"labels","meanSquaredError"),a=ur(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=ur(n,"weights","meanSquaredError")),E(r.shape,a.shape,"Error in meanSquaredError: ");const o=Gl(r,a);return Ul(o,i,s)}});const Hl=hr({log1p_:function(e){const t={x:ur(e,"x","log1p")};return tr.runKernel(Ot,t)}});hr({sigmoidCrossEntropy_:function(e,t,n,s=0,r=Vl.SUM_BY_NONZERO_WEIGHTS){let a=ur(e,"multiClassLabels","sigmoidCrossEntropy");const i=ur(t,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=ur(n,"weights","sigmoidCrossEntropy")),E(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),s>0){const e=Oa(s),t=Oa(1),n=Oa(.5);a=za(Pi(a,Bi(t,e)),Pi(n,e))}const l=function(e,t){const n=ur(e,"labels","sigmoidCrossEntropyWithLogits"),s=ur(t,"logits","sigmoidCrossEntropyWithLogits");E(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=wo(s),a=Pi(s,n),i=Hl(Li(io(La(s))));return za(Bi(r,a),i)}(a,i);return Ul(l,o,r)}});const jl=hr({logSumExp_:function(e,t=null,n=!1){const s=ur(e,"x","logSumExp"),r=P(t,s.shape),a=zi(s,r,!0),i=Bi(s,a),o=Li(i),l=Wi(o,r),u=Mi(l),c=za(ti(a,u.shape),u);if(n){const e=Qi(c.shape,r);return ti(c,e)}return c}});hr({softmaxCrossEntropy_:function(e,t,n,s=0,r=Vl.SUM_BY_NONZERO_WEIGHTS){let a=ur(e,"onehotLabels","softmaxCrossEntropy");const i=ur(t,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=ur(n,"weights","softmaxCrossEntropy")),E(a.shape,i.shape,"Error in softmaxCrossEntropy: "),s>0){const e=Oa(s),t=Oa(1),n=Oa(a.shape[1]);a=za(Pi(a,Bi(t,e)),ki(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const s=_a(((e,t,s)=>{const r=jl(t,[n],!0),a=Bi(Xr(t,"float32"),r);s([e,a]);const i=io(Pi(a,e));return{value:Wi(i,[n]),gradFunc:(e,t)=>{const[s,r]=t,a=Qi(e.shape,[n]);return[Pi(ti(e,a),Bi(Xr(s,"float32"),Li(r))),Pi(ti(e,a),Bi(Li(r),Xr(s,"float32")))]}}}));return s(e,t)}(a,i);return Ul(l,o,r)}});const Kl={flipLeftRight:ml,resizeNearestNeighbor:Rl,resizeBilinear:Al,rotateWithOffset:gl,cropAndResize:fl,nonMaxSuppression:bl,nonMaxSuppressionAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=ur(e,"boxes","nonMaxSuppressionAsync"),i=ur(t,"scores","nonMaxSuppressionAsync"),o=yl(a,i,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const l=await Promise.all([a.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:h}=kl(u,c,n,s,r);return a!==e&&a.dispose(),i!==t&&i.dispose(),Lo(h,"int32")},nonMaxSuppressionWithScore:Tl,nonMaxSuppressionWithScoreAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=ur(e,"boxes","nonMaxSuppressionAsync"),o=ur(t,"scores","nonMaxSuppressionAsync"),l=yl(i,o,n,s,r,a);n=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=u[0],h=u[1],{selectedIndices:p,selectedScores:d}=Il(c,h,n,s,r,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Lo(p,"int32"),selectedScores:Lo(d)}},nonMaxSuppressionPadded:El,nonMaxSuppressionPaddedAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=ur(e,"boxes","nonMaxSuppressionAsync"),o=ur(t,"scores","nonMaxSuppressionAsync"),l=yl(i,o,n,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=vl(p,d,u,c,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Lo(f,"int32"),validOutputs:Oa(m,"int32")}},transform:Fl},ql={bandPart:Ol,gramSchmidt:Pl,qr:Wl};class Xl extends Ma{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=tr.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=tr.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:Ea((()=>Uo(s).variable(!1)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:Ea((()=>Uo(s).variable(!1)))});const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;Ea((()=>{const e=za(Pi(a,this.rho),Pi(ro(r),1-this.rho)),t=Pi(ki(Do(za(i,this.epsilon)),Do(za(a,this.epsilon))),r),n=za(Pi(i,this.rho),Pi(ro(t),1-this.rho));a.assign(e),i.assign(n);const o=za(Pi(t,-this.learningRate),s);s.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Aa(this.accumulatedGrads.map((e=>e.variable))),Aa(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}Xl.className="Adadelta",Ca(Xl);class Yl extends Ma{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=tr.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:Ea((()=>Ai(s.shape,this.initialAccumulatorValue).variable(e)))}}const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable;Ea((()=>{const e=za(a,ro(r));a.assign(e);const t=za(Pi(ki(r,Do(za(e,tr.backend.epsilon()))),-this.learningRate),s);s.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Aa(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}Yl.className="Adagrad",Ca(Yl);class Jl extends Ma{constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Ea((()=>{this.accBeta1=Oa(t).variable(),this.accBeta2=Oa(n).variable()})),null==s&&(this.epsilon=tr.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Ea((()=>{const n=Bi(1,this.accBeta1),s=Bi(1,this.accBeta2);t.forEach(((t,r)=>{const a=tr.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:Ea((()=>Uo(a).variable(!1)))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:`${t}/v`,variable:Ea((()=>Uo(a).variable(!1)))});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedSecondMoment[r].variable,u=za(Pi(o,this.beta1),Pi(i,1-this.beta1)),c=za(Pi(l,this.beta2),Pi(ro(i),1-this.beta2)),h=ki(u,n),p=ki(c,s);o.assign(u),l.assign(c);const d=za(Pi(ki(h,za(Do(p),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign(Pi(this.accBeta1,this.beta1)),this.accBeta2.assign(Pi(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Aa(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&Aa(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),Ea((()=>{this.accBeta1.assign(Ml(this.beta1,this.iterations_+1)),this.accBeta2.assign(Ml(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}Jl.className="Adam",Ca(Jl);class Zl extends Ma{constructor(e,t,n,s=null,r=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Ea((()=>{this.iteration=Oa(0).variable(),this.accBeta1=Oa(t).variable()})),null==s&&(this.epsilon=tr.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Ea((()=>{const n=Bi(1,this.accBeta1),s=ki(-this.learningRate,za(Pi(this.iteration,this.decay),1));t.forEach(((t,r)=>{const a=tr.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:Uo(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:`${t}/v`,variable:Uo(a).variable(!1)});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedWeightedInfNorm[r].variable,u=za(Pi(o,this.beta1),Pi(i,1-this.beta1)),c=Pi(l,this.beta2),h=La(i),p=ji(c,h);o.assign(u),l.assign(p);const d=za(Pi(ki(s,n),ki(u,za(p,this.epsilon))),a);a.assign(d)})),this.iteration.assign(za(this.iteration,1)),this.accBeta1.assign(Pi(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Aa(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&Aa(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}Zl.className="Adamax",Ca(Zl);class Ql extends Ma{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const r=tr.registeredVariables[t];Ea((()=>{const e=za(Pi(this.c,s),r);r.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=Ra(Oa(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}Ql.className="SGD",Ca(Ql);class eu extends Ql{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=Oa(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=tr.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:Ea((()=>Uo(s).variable(e)))}}const r=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&Ea((()=>{let e;const t=za(Pi(this.m,r),a);e=this.useNesterov?za(Pi(this.c,za(a,Pi(t,this.m))),s):za(Pi(this.c,t),s),r.assign(t),s.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Aa(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}eu.className="Momentum",Ca(eu);class tu extends Ma{constructor(e,t=.9,n=0,s=null,r=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==s&&(this.epsilon=tr.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=tr.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:Ea((()=>Uo(s).variable(r)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:Ea((()=>Uo(s).variable(r)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:Ea((()=>Uo(s).variable(r)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;Ea((()=>{const e=za(Pi(i,this.decay),Pi(ro(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,r=za(Pi(t,this.decay),Pi(a,1-this.decay)),l=ki(Pi(a,this.learningRate),Do(Bi(e,za(ro(r),this.epsilon)))),u=za(Pi(o,this.momentum),l);i.assign(e),t.assign(r),o.assign(u);const c=Bi(s,u);s.assign(c)}else{const e=za(Pi(i,this.decay),Pi(ro(a),1-this.decay)),t=za(Pi(o,this.momentum),ki(Pi(a,this.learningRate),Do(za(e,this.epsilon))));i.assign(e),o.assign(t);const n=Bi(s,t);s.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Aa(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&Aa(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&Aa(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}tu.className="RMSProp",Ca(tu);class nu{static sgd(e){return new Ql(e)}static momentum(e,t,n=!1){return new eu(e,t,n)}static rmsprop(e,t=.9,n=0,s=null,r=!1){return new tu(e,t,n,s,r)}static adam(e=.001,t=.9,n=.999,s=null){return new Jl(e,t,n,s)}static adadelta(e=.001,t=.95,n=null){return new Xl(e,t,n)}static adamax(e=.002,t=.9,n=.999,s=null,r=0){return new Zl(e,t,n,s,r)}static adagrad(e,t=.1){return new Yl(e,t)}}const su={sgd:nu.sgd,momentum:nu.momentum,adadelta:nu.adadelta,adagrad:nu.adagrad,rmsprop:nu.rmsprop,adamax:nu.adamax,adam:nu.adam},ru="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function au(){return new Promise((e=>ru((()=>e()))))}function iu(e,t){const n=e[0].length;e.forEach(((e,t)=>{T(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),T(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const s=e[0];e.forEach(((e,r)=>{for(let a=0;a<n;a++)T(a===t||e[a]===s[a],(()=>`Error in concat${n}D: Shape of tensors[${r}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`))}))}function ou(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}const lu=30;function uu(e){return e<=lu?e:Y(e,Math.floor(Math.sqrt(e)))}function cu(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function hu(e,t,n,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(e[0]/n),r=r.concat(e.slice(1));else{r=r.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)r=r.concat([e[s+1]/t[s],t[s]]);r=r.concat(e.slice(n+1))}return r}function pu(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],r=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?r.push(s):n.push(s);s.push(...n),s.push(0),s.push(...r)}return s}function du(e,t,n,s=!0){const r=[];s?r.push(e[0]/n):r.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?s?r.push(t[n-1]*e[n]):r.push(e[n]/t[n-1]):r.push(e[n]);return r}function fu(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function mu(e,t,n){const s=e.slice(0,1);for(let r=0;r<n;++r)s.push(e[r+1]-t[r][0]-t[r][1]);return s}function gu(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===F(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const r=t.shape,a=r[r.length-1];let i=1;for(let e=0;e<r.length-1;++e)i*=r[e];const o=e.shape,l=r.slice();l.pop();let u=1;for(let e=a;e<n;++e)u*=o[e],l.push(o[e]);const c=[...J(e.shape).map((e=>e/u)),1].slice(0,a);return[l,i,u,c]}function yu(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(a+` update.rank < ${r}. `);if(e.length<s+(n.rank-r))throw new Error(a+` Output shape length < ${s+(n.rank-r)}`);if(n.rank!==r+e.length-s)throw new Error(a+" update.rank != "+(r+e.length-s));for(let e=0;e<r;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-r;++t)if(n.shape[t+r]!==e[t+s])throw new Error(a+` updates.shape[${t+r}] (${n.shape[t+r]}) != shape[${t+r}] (${e[t+r]})`)}function bu(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}yu(n,t,e)}function xu(e,t,n){const s=t.shape.length,r=s>1?t.shape[s-1]:1,a=n.length;let i=1;for(let e=r;e<a;++e)i*=n[e];const o=r<1?1:r;return{sliceRank:r,numUpdates:F(t.shape)/o,sliceSize:i,strides:[...J(n.slice(0,r)),1],outputSize:F(n)}}const wu=1.7580993408473768,ku=1.0507009873554805,vu=.3275911,Iu=.254829592,Nu=-.284496736,$u=1.421413741,Cu=-1.453152027,Su=1.061405429;function Tu(...e){ue().getBool("IS_TEST")||console.warn(...e)}function Eu(...e){ue().getBool("IS_TEST")||console.log(...e)}function Au(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function Ru(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function Fu(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function Du(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function _u(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Ou(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function Mu(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let r=0;r<Math.ceil(e/2);r++){const a=(t?2:-2)*Math.PI*(r/e);n[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:n,imag:s}}function Lu(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}function zu(e,t,n=0){let s=[];if("number"==typeof t)T(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),s=new Array(t).fill(e.shape[n]/t);else{const r=t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0);T(r<=1,(()=>"There should be only one negative value in split array."));const a=t.indexOf(-1);if(-1!==a){const s=t.reduce(((e,t)=>t>0?e+t:e));t[a]=e.shape[n]-s}T(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),s=t}return s}function Pu(e,t){let n,s=!1;for(e<=lu?(n=e,s=!0):n=Y(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=Y(e,n+1);return n}function Bu(e,t,n){const s=[],r=e.length;for(let a=0;a<r;a++)a!==t?s.push(e[a]):s.push(n);return s}function Wu(e,t,n,s){const r=t.shape.length,a=e.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>a)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${a}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let n=0;n<s;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const i=e.shape[n],o=[];let l=1,u=1,c=1;for(let t=0;t<s;++t)o.push(e.shape[t]),l*=e.shape[t];for(let t=s;t<n;t++)o.push(e.shape[t]),u*=e.shape[t];for(let e=s;e<r;e++)o.push(t.shape[e]);for(let t=n+1;t<a;t++)o.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:o}}function Vu(e){try{return e.map((e=>ws(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Uu(e){return e.map((e=>xs(e)))}function Gu(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const s=qr(e,"int32"),r=qr([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=s.indexToLoc(n[t]),i=t*e.length;r.values.set(a,i)}return r.toTensor()}const Hu={kernelName:fe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Pi(e,el(Xr(n,"float32"),-1))}}},ju={kernelName:me,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=ro(Xr(n,"float32")),s=Do(Bi(Oa(1),t));return io(ki(e,s))}}}},Ku={kernelName:ge,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Do(Bi(ro(Xr(n,"float32")),1));return ki(e,t)}}}},qu={kernelName:ye,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=$i(n.shape,s.shape);return{a:()=>{let t=e;const s=Ni(n.shape,r);return s.length>0&&(t=Wi(t,s)),ti(t,n.shape)},b:()=>{let t=e;const n=Ni(s.shape,r);return n.length>0&&(t=Wi(t,n)),ti(t,s.shape)}}}},Xu={kernelName:be,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,s)=>{n[s]=()=>e.clone()})),n}},Yu={kernelName:ke,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Uo(n)}}},Ju={kernelName:ve,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Uo(n)}}},Zu={kernelName:Ie,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ki(e,Do(Bi(Oa(1),ro(Xr(n,"float32")))))}}},Qu={kernelName:Ne,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Do(za(Oa(1),ro(Xr(n,"float32"))));return ki(e,t)}}}},ec={kernelName:Se,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=$i(n.shape,s.shape);return{a:()=>{const t=za(ro(n),ro(s));let a=Pi(e,ki(s,t));const i=Ni(n.shape,r);return i.length>0&&(a=Wi(a,i)),ti(a,n.shape)},b:()=>{const t=za(ro(n),ro(s));let a=io(Pi(e,ki(n,t)));const i=Ni(s.shape,r);return i.length>0&&(a=Wi(a,i)),ti(a,s.shape)}}}},tc={kernelName:$e,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ki(e,za(ro(Xr(n,"float32")),1))}}},nc={kernelName:Ce,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ki(e,Bi(Oa(1),ro(Xr(n,"float32"))))}}},sc=hr({avgPool3dGrad_:function(e,t,n,s,r,a){const i=ur(e,"dy","avgPool3dGrad"),o=ur(t,"input","avgPool3dGrad");let l=i,u=o,c=!1;4===o.rank&&(c=!0,l=ti(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),u=ti(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),T(5===l.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`)),T(5===u.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`)),null!=a&&T(_(r),(()=>`Error in avgPool3dGrad: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`));const h={dy:l,input:u},p={filterSize:n,strides:s,pad:r,dimRoundingMode:a},d=tr.runKernel(Re,h,p);return c?ti(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),rc={kernelName:Ae,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i,dimRoundingMode:o}=n;return{x:()=>sc(e,s,r,a,i,o)}}},ac=hr({avgPoolGrad_:function(e,t,n,s,r){const a=ur(e,"dy","avgPoolGrad"),i=ur(t,"input","avgPoolGrad");T(i.rank===a.rank,(()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`));let o=i,l=a,u=!1;3===i.rank&&(u=!0,o=ti(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=ti(a,[1,a.shape[0],a.shape[1],a.shape[2]])),T(4===l.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),T(4===o.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`));const c={dy:l,input:o},h={filterSize:n,strides:s,pad:r},p=tr.runKernel(Ee,c,h);return u?ti(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),ic={kernelName:Te,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i}=n;return{x:()=>ac(e,s,r,a,i)}}},oc={kernelName:Fe,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,r]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>ul(e,r,!1,!1),b:()=>ul(e,s,!0,!1)}:a&&!i?{a:()=>ul(r,e,!1,!0),b:()=>ul(s,e,!1,!1)}:{a:()=>ul(r,e,!0,!0),b:()=>ul(e,s,!0,!0)}:{a:()=>ul(e,r,!1,!0),b:()=>ul(s,e,!0,!1)}}},lc=hr({spaceToBatchND_:function(e,t,n){const s=ur(e,"x","spaceToBatchND");T(s.rank>=1+t.length,(()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`)),T(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),T(s.shape.reduce(((e,s,r)=>r>0&&r<=t.length?e&&(s+n[r-1][0]+n[r-1][1])%t[r-1]==0:e),!0),(()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const r={x:s},a={blockShape:t,paddings:n};return tr.runKernel(zn,r,a)}}),uc={kernelName:De,gradFunc:(e,t,n)=>{const{blockShape:s,crops:r}=n;return{x:()=>lc(e,s,r)}}},cc={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const s=n,r=s.inputShape,a=s.shape,i=Array.from(a);for(let e=r.length-1;e>=0;e--)if(r[e]===a[e])i[e]=1;else if(1!==r[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);const o=[];for(let e=0;e<i.length;e++)i[e]>1&&o.push(e);return{x:()=>Wi(e,o,!0)}}},hc={kernelName:Oe,gradFunc:e=>({x:()=>e.clone()})},pc={kernelName:Me,gradFunc:e=>({x:()=>Uo(e)})},dc={kernelName:Le,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:r,clipValueMax:a}=n;return{x:()=>Vo(Ui(_i(s,r),Dl(s,a)),e,Uo(e))}}},fc={kernelName:Pe,inputsToSave:["x"],gradFunc:Hu.gradFunc},mc={kernelName:Be,saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map((e=>e.shape)),{axis:r}=n,a=P(r,t[0].shape)[0],i=s.map((e=>e[a]));return Fo(e,i,a).map((e=>()=>e))}},gc={kernelName:We,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{dilations:a,strides:i,pad:o,dataFormat:l}=n;return T(Za(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>gi(s.shape,e,r,i,o,l),filter:()=>Zo(s,e,r.shape,i,o,l)}}},yc={kernelName:Ue,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>fi(e,r,a,i,o,1,l),filter:()=>Zo(e,s,r.shape,a,i,o,l)}}},bc=hr({conv3DBackpropFilter_:function(e,t,n,s,r){let a=e;4===e.rank&&(a=ti(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=ti(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),T(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),T(5===i.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`)),T(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),T(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),T(i.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`));const o={x:a,dy:i},l={strides:s,pad:r,filterShape:n};return tr.runKernel(He,o,l)}}),xc=hr({conv3DBackpropInput_:function(e,t,n,s,r){T(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,i=t,o=!1;4===t.rank&&(o=!0,i=ti(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const l=a[4],u=i.shape[4];T(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),T(5===i.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`)),T(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),T(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),T(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:i,filter:n},h={pad:r,strides:s,inputShape:a},p=tr.runKernel(je,c,h);return o?ti(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),wc={kernelName:Ge,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a}=n;T(Za(s),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const[i,o]=t;return{x:()=>xc(i.shape,e,o,r,a),filter:()=>bc(i,e,o.shape,r,a)}}},kc=hr({sin_:function(e){const t={x:ur(e,"x","sin")};return tr.runKernel(Rn,t)}}),vc={kernelName:Ke,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Pi(io(kc(Xr(n,"float32"))),e)}}},Ic=hr({sinh_:function(e){const t={x:ur(e,"x","sinh")};return tr.runKernel(Fn,t)}}),Nc={kernelName:qe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Pi(Ic(Xr(n,"float32")),e)}}},$c=hr({cumsum_:function(e,t=0,n=!1,s=!1){const r={x:ur(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:s};return tr.runKernel(Xe,r,a)}}),Cc={kernelName:Xe,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r,exclusive:a,reverse:i}=n;return{x:()=>{const t=to([r],s.rank);let n=$c(e,r,a,!i);return null!=t&&(n=Go(n,t)),n}}}},Sc={kernelName:Qe,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:i}=n,o=null==s?[1,1]:s;T(Za(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[l,u]=t;return T(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),T(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),T(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),T(Qa(r,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`)),null!=i&&T(_(a),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`)),{x:()=>ol(l.shape,e,u,r,a,s,i),filter:()=>il(l,e,u.shape,r,a,s,i)}}},Tc={kernelName:st,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,a={x:s,filter:r,dy:e},i={x:s,filter:r,dy:e};return{x:()=>tr.runKernel(rt,a,n),filter:()=>tr.runKernel(at,i,n)}}},Ec={kernelName:ot,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>tr.runKernel(lt,s)}}},Ac={kernelName:ut,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=Pi(Li(io(ro(n))),2/Math.sqrt(Math.PI));return{x:()=>Pi(e,s)}}},Rc={kernelName:ht,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Pi(e,n)}}},Fc={kernelName:pt,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>ti(e,n.shape)}}},Dc={kernelName:dt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Pi(e,Li(n))}}},_c={kernelName:yt,gradFunc:e=>({x:()=>Uo(e)})},Oc={kernelName:bt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=$i(n.shape,s.shape);return{a:()=>{const t=ki(e,Xr(s,"float32")),a=Ni(n.shape,r);return a.length>0?ti(Wi(t,a),n.shape):t},b:()=>{let t=Pi(e,Xr(n,"float32"));const a=Ni(s.shape,r);a.length>0&&(t=ti(Wi(t,a),s.shape));const i=ro(s);return io(ki(t,Xr(i,"float32")))}}}},Mc=hr({rsqrt_:function(e){const t={x:ur(e,"x","rsqrt")};return tr.runKernel(Cn,t)}}),Lc={kernelName:xt,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[r,a,i,o]=t,l=null==o?Oa(1):o,u=Ni(a.shape,r.shape),c=[];if(1===a.rank){for(let e=0;e<r.shape.length-1;++e)c.push(r.shape[e]);c.push(1)}const h=Bi(r,a),p=Pi(e,l),d=Mc(za(i,Oa(s))),f=Pi(Pi(Pi(d,d),d),Oa(-.5));return{x:()=>1===a.rank?ti(Pi(Pi(e,Ti(ti(d,[1,1,1,a.shape[0]]),c)),l),r.shape):ti(Pi(Pi(e,d),l),r.shape),mean:()=>{let e=Pi(Pi(d,Oa(-1)),p);return 1===a.rank&&(e=Wi(e,u)),ti(e,a.shape)},variance:()=>{let e=Pi(Pi(f,h),p);return 1===a.rank&&(e=Wi(e,u)),ti(e,a.shape)},scale:()=>{const t=Pi(h,d);let n=Pi(e,t);return 1===a.rank&&(n=Wi(n,u)),ti(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=Wi(t,u)),ti(t,a.shape)}}}},zc=hr({unsortedSegmentSum_:function(e,t,n){const s=ur(e,"x","unsortedSegmentSum"),r=ur(t,"segmentIds","unsortedSegmentSum","int32");T(_(n),(()=>"numSegments must be of dtype int"));const a={x:s,segmentIds:r},i={numSegments:n};return tr.runKernel(es,a,i)}}),Pc={kernelName:wt,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,r]=t,{axis:a}=n,i=P(a,s.shape)[0];return{x:()=>{const t=s.shape,n=r.size,o=t.slice(0,i),l=o.length,u=t.slice(a,t.length).slice(1),c=u.length,h=Bc(0,l),p=Bc(l+1,l+1+c),d=Wc([o,[n],u]),f=ti(e,d),m=ti(r,[n]),g=Wc([[l],h,p]),y=Go(f,g);let b=zc(y,m,s.shape[i]);const x=no(g);return b=Go(b,x),b},indices:()=>r}}};function Bc(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function Wc(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const Vc={kernelName:It,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Uo(n),b:()=>Uo(s)}}},Uc={kernelName:Nt,gradFunc:e=>({x:()=>Xr(e,"float32")})},Gc={kernelName:St,gradFunc:e=>({x:()=>Uo(e)})},Hc={kernelName:Tt,gradFunc:e=>({x:()=>Uo(e)})},jc={kernelName:Et,gradFunc:e=>({x:()=>Uo(e)})},Kc={kernelName:At,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:r}=n,a=Di(s,0);return{x:()=>Vo(a,e,Pi(e,r))}}},qc={kernelName:Ot,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ki(e,za(n,1))}}},Xc={kernelName:_t,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ki(e,Xr(n,"float32"))}}},Yc={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;return{logits:()=>{const t=Li(s);return Bi(e,Pi(Wi(e,r,!0),t))}}}},Jc=hr({localResponseNormalizationBackprop_:function(e,t,n,s=5,r=1,a=1,i=.5){const o={x:e,y:t,dy:n},l={depthRadius:s,bias:r,alpha:a,beta:i};return tr.runKernel(Bt,o,l)}}),Zc={kernelName:Pt,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>Jc(s,r,e,a,i,o,l)}}};function Qc(e,t,n,s){return t.rank<n.rank&&(t=ti(t,Qi(t.shape,s))),e.rank<n.rank&&(e=ti(e,Qi(e.shape,s))),{x:()=>Pi(e,Xr(Ci(n,t),e.dtype))}}const eh={kernelName:Wt,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:r}=s,a=t[0],i=Qc(e,t[1],a,P(r,a.shape));return{x:()=>i.x()}}},th=hr({less_:function(e,t){let n=ur(e,"a","less"),s=ur(t,"b","less");[n,s]=Ks(n,s),$i(n.shape,s.shape);const r={a:n,b:s};return tr.runKernel(Rt,r)}}),nh={kernelName:Vt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Pi(e,Xr(_i(n,s),"float32")),b:()=>Pi(e,Xr(th(n,s),"float32"))}}},sh=hr({maxPool3dGrad_:function(e,t,n,s,r,a,i){const o=ur(e,"dy","maxPool3dGrad"),l=ur(t,"input","maxPool3dGrad"),u=ur(n,"output","maxPool3dGrad");let c=o,h=l,p=u,d=!1;4===l.rank&&(d=!0,c=ti(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),h=ti(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=ti(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),T(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),T(5===h.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`)),T(5===p.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${p.rank}.`)),null!=i&&T(_(a),(()=>`Error in maxPool3dGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const f={dy:c,input:h,output:p},m={filterSize:s,strides:r,pad:a,dimRoundingMode:i},g=tr.runKernel(jt,f,m);return d?ti(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),rh={kernelName:Ht,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=n;return{x:()=>sh(e,s,r,a,i,o,l)}}},ah=hr({maxPoolGrad_:function(e,t,n,s,r,a,i){const o=ur(e,"dy","maxPoolGrad"),l=ur(t,"input","maxPoolGrad"),u=ur(n,"output","maxPoolGrad");T(l.rank===o.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`)),T(4===o.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`)),T(4===l.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`)),null!=i&&T(_(a),(()=>`Error in maxPoolGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const c={dy:o,input:l,output:u},h={filterSize:s,strides:r,pad:a,dimRoundingMode:i};return tr.runKernel(Gt,c,h)}}),ih={kernelName:Ut,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>ah(e,s,r,a,i,o)}}},oh={kernelName:qt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n,a=P(r,s.shape),i=F(Zi(s.shape,a)[1]);return{x:()=>{const t=s.shape.slice();a.forEach((e=>{t[e]=1}));const n=ti(e,t);return ki(Pi(n,co(s.shape,"float32")),i)}}}},lh={kernelName:Xt,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:r}=s,[a,i]=t,o=Qc(e,i,a,P(r,a.shape));return{x:()=>o.x()}}},uh={kernelName:Yt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Pi(e,Xr(Dl(n,s),"float32")),b:()=>Pi(e,Xr(Di(n,s),"float32"))}}},ch={kernelName:Jt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>$o(e,a,s.shape)}}},hh={kernelName:Zt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=$i(n.shape,s.shape);return{a:()=>{const t=Ni(n.shape,r);return t.length>0?ti(Wi(e,t),n.shape):e},b:()=>{const t=Pi(e,io(Ri(ki(n,s)))),a=Ni(s.shape,r);return a.length>0?ti(Wi(t,a),s.shape):t}}}},ph={kernelName:en,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=$i(n.shape,s.shape);return{a:()=>{const t=Pi(e,Xr(s,"float32")),a=Ni(n.shape,r);return a.length>0?ti(Wi(t,a),n.shape):t},b:()=>{const t=Pi(e,Xr(n,"float32")),a=Ni(s.shape,r);return a.length>0?ti(Wi(t,a),s.shape):t}}}},dh={kernelName:tn,gradFunc:e=>({x:()=>io(e)})},fh={kernelName:ln,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>uo(n.shape,"float32")}}},mh={kernelName:on,gradFunc:e=>({x:()=>Uo(e)})},gh={kernelName:un,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return Bo(e,s).map((e=>()=>e))}},yh={kernelName:cn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>$o(e,a,s.shape)}}},bh={kernelName:hn,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,r]=t,a=n,i=s,o=$i(a.shape,i.shape);return{a:()=>{const t=Xr(i,"float32");let n=Pi(e,Pi(t,Ml(a,Bi(t,Oa(1)))));const s=Ni(a.shape,o);return s.length>0&&(n=Wi(n,s)),ti(n,a.shape)},b:()=>{const t=Di(a,0),n=Vo(t,Mi(a),Uo(a));let s=Pi(e,Pi(r,n));const l=Ni(i.shape,o);return l.length>0&&(s=Wi(s,l)),ti(s,i.shape)}}}},xh={kernelName:pn,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,r=Di(n,0);return{x:()=>Vo(r,e,Pi(e,s)),alpha:()=>{let t=Vo(r,Uo(e),Pi(e,n));const a=Ni(s.shape,e.shape);return a.length>0&&(t=Wi(t,a)),ti(t,s.shape)}}}},wh={kernelName:it,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=$i(n.shape,s.shape);return{a:()=>{const t=ki(e,Xr(s,"float32")),a=Ni(n.shape,r);return a.length>0?ti(Wi(t,a),n.shape):t},b:()=>{let t=Pi(e,Xr(n,"float32"));const a=Ni(s.shape,r);a.length>0&&(t=ti(Wi(t,a),s.shape));const i=ro(s);return io(ki(t,Xr(i,"float32")))}}}},kh={kernelName:gn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ki(e,io(ro(n)))}}},vh={kernelName:In,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=Pi(Dl(n,6),el(n));return{x:()=>Pi(e,Xr(s,"float32"))}}},Ih={kernelName:yn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Pi(e,Xr(el(n),"float32"))}}},Nh={kernelName:bn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ti(e,n.shape)}}},$h={kernelName:kn,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>tr.runKernel(vn,r,n)}}},Ch={kernelName:xn,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>tr.runKernel(wn,r,n)}}},Sh={kernelName:Nn,gradFunc:(e,t,n)=>{const{dims:s}=n,r=P(s,e.shape);return{x:()=>ko(e,r)}}},Th={kernelName:$n,gradFunc:e=>({x:()=>Uo(e)})},Eh={kernelName:Cn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>io(ki(e,Pi(Ml(n,1.5),2)))}}},Ah=hr({logicalNot_:function(e){const t={x:ur(e,"x","logicalNot","bool")};return tr.runKernel(Lt,t)}}),Rh={kernelName:Tn,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Xr(Uo(n),"float32"),t:()=>Pi(e,Xr(n,e.dtype)),e:()=>Pi(e,Xr(Ah(n),e.dtype))}}},Fh={kernelName:En,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Di(n,Oa(0)),s=Oa(wu),r=Oa(ku),a=Pi(e,r),i=Pi(Pi(e,s),Li(Xr(n,"float32")));return Vo(t,a,i)}}}},Dh={kernelName:_n,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Pi(e,Pi(n,Bi(Oa(1),n)))}}},_h={kernelName:Dn,gradFunc:e=>({x:()=>Uo(e)})},Oh=hr({cos_:function(e){const t={x:ur(e,"x","cos")};return tr.runKernel(Ke,t)}}),Mh={kernelName:Rn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Pi(Oh(Xr(n,"float32")),e)}}},Lh=hr({cosh_:function(e){const t={x:ur(e,"x","cosh")};return tr.runKernel(qe,t)}}),zh={kernelName:Fn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Pi(Lh(Xr(n,"float32")),e)}}},Ph={kernelName:An,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:r,size:a}=n,i=s.shape,[o,l]=va(s,r,a),u=[];for(let t=0;t<e.rank;t++)u.push([o[t],i[t]-o[t]-l[t]]);return{x:()=>po(e,u)}}},Bh={kernelName:Bn,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:r}=n,a=Pi(e,s);return{logits:()=>Bi(a,Pi(Wi(a,[r],!0),s))}}},Wh={kernelName:On,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Pi(e,No(n))}}},Vh=hr({batchToSpaceND_:function(e,t,n){const s=ur(e,"x","batchToSpaceND"),r=t.reduce(((e,t)=>e*t));T(s.rank>=1+t.length,(()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`)),T(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),T(s.shape[0]%r==0,(()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`));const a={x:s},i={blockShape:t,crops:n};return tr.runKernel(De,a,i)}}),Uh={kernelName:zn,gradFunc:(e,t,n)=>{const{blockShape:s,paddings:r}=n;return{x:()=>Vh(e,s,r)}}},Gh={kernelName:Pn,gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>ui(e,s)}}},Hh=[Hu,ju,Ku,qu,Xu,Yu,Ju,Zu,Qu,ec,tc,nc,rc,ic,oc,uc,cc,hc,pc,dc,fc,mc,yc,gc,wc,vc,Nc,Cc,Sc,Tc,wh,Ec,Ac,Rc,Fc,Dc,Oc,_c,Lc,Pc,Vc,Uc,Gc,Hc,jc,Kc,qc,Xc,Yc,Zc,eh,eh,nh,rh,ih,oh,lh,uh,ch,hh,ph,dh,fh,mh,gh,yh,yh,bh,xh,kh,vh,Ih,Nh,$h,Ch,Sh,Th,Eh,Rh,Fh,Dh,_h,Mh,zh,Ph,Bh,Wh,Uh,Uh,Gh,Gh,{kernelName:Mn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ki(e,Pi(Do(Xr(n,"float32")),2))}}},{kernelName:Wn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Oa(2);return{a:()=>Pi(e,Pi(r,Bi(n,s))),b:()=>Pi(e,Pi(r,Bi(s,n)))}}},{kernelName:Vn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Pi(e,Pi(Xr(n,"float32"),2))}}},{kernelName:ns,gradFunc:e=>({x:()=>Uo(e)})},{kernelName:Un,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=$i(n.shape,s.shape);return{a:()=>{let t=e;const s=Ni(n.shape,r);return s.length>0&&(t=Wi(t,s)),ti(t,n.shape)},b:()=>{let t=e;const n=Ni(s.shape,r);return n.length>0&&(t=Wi(t,n)),ti(io(t),s.shape)}}}},{kernelName:Ln,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,r=s.shape.slice(),{axis:a}=n;P(a,s.shape).forEach((e=>{r[e]=1}));const i=ti(e,r),o=Pi(i,co(s.shape,"float32"));return{x:()=>o}}},{kernelName:jn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ki(e,ro(Oh(n)))}}},{kernelName:Kn,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Pi(Bi(Oa(1),ro(n)),e)}}},{kernelName:qn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:r}=n;return{x:()=>{let t=Uo(s);if(1===s.rank)for(let n=0;n<r[0];++n)t=za(t,$o(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)t=za(t,$o(e,[n*s.shape[0],a*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)t=za(t,$o(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)for(let o=0;o<r[3];++o)t=za(t,$o(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},{kernelName:Jn,gradFunc:(e,t,n)=>{const s=n,{perm:r}=s,a=no(r);return{x:()=>Go(e,a)}}},{kernelName:Qn,gradFunc:(e,t,n)=>{const s=n,{axis:r}=s;return{value:()=>Oo(e,r)}}},{kernelName:es,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=ji(t,Uo(t)),s=Fi(e,n);let r=_i(t,Oa(0,"int32"));const a=s.rank-r.rank;for(let e=0;e<a;++e)r=Si(r,e+1);r=Ui(r,co(s.shape,"bool"));const i=Uo(s);return Vo(r,s,i)}(e,n)}}},{kernelName:ts,gradFunc:e=>({x:()=>Uo(e)})}];for(const e of Hh)fs(e);Ls().prototype.abs=function(){return this.throwIfDisposed(),La(this)};const jh=hr({acos_:function(e){const t={x:ur(e,"x","acos")};return tr.runKernel(me,t)}});Ls().prototype.acos=function(){return this.throwIfDisposed(),jh(this)};const Kh=hr({acosh_:function(e){const t={x:ur(e,"x","acosh")};return tr.runKernel(ge,t)}});Ls().prototype.acosh=function(){return this.throwIfDisposed(),Kh(this)},Ls().prototype.add=function(e){return this.throwIfDisposed(),za(this,e)},Ls().prototype.all=function(e,t){return this.throwIfDisposed(),Pa(this,e,t)},Ls().prototype.any=function(e,t){return this.throwIfDisposed(),Ba(this,e,t)},Ls().prototype.argMax=function(e){return this.throwIfDisposed(),Wa(this,e)};const qh=hr({argMin_:function(e,t=0){const n={x:ur(e,"x","argMin")},s={axis:t};return tr.runKernel(ve,n,s)}});Ls().prototype.argMin=function(e){return this.throwIfDisposed(),qh(this,e)},Ls().prototype.asScalar=function(){return this.throwIfDisposed(),T(1===this.size,(()=>"The array must have only 1 element.")),ti(this,[])},Ls().prototype.asType=function(e){return this.throwIfDisposed(),Xr(this,e)},Ls().prototype.as1D=function(){return this.throwIfDisposed(),ti(this,[this.size])},Ls().prototype.as2D=function(e,t){return this.throwIfDisposed(),ti(this,[e,t])},Ls().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),ti(this,[e,t,n])},Ls().prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),ti(this,[e,t,n,s])},Ls().prototype.as5D=function(e,t,n,s,r){return this.throwIfDisposed(),ti(this,[e,t,n,s,r])};const Xh=hr({asin_:function(e){const t={x:ur(e,"x","asin")};return tr.runKernel(Ie,t)}});Ls().prototype.asin=function(){return this.throwIfDisposed(),Xh(this)};const Yh=hr({asinh_:function(e){const t={x:ur(e,"x","asinh")};return tr.runKernel(Ne,t)}});Ls().prototype.asinh=function(){return this.throwIfDisposed(),Yh(this)};const Jh=hr({atan_:function(e){const t={x:ur(e,"x","atan")};return tr.runKernel($e,t)}});Ls().prototype.atan=function(){return this.throwIfDisposed(),Jh(this)};const Zh=hr({atan2_:function(e,t){let n=ur(e,"a","atan2"),s=ur(t,"b","atan2");[n,s]=Ks(n,s);const r={a:n,b:s};return tr.runKernel(Se,r)}});Ls().prototype.atan2=function(e){return this.throwIfDisposed(),Zh(this,e)};const Qh=hr({atanh_:function(e){const t={x:ur(e,"x","atanh")};return tr.runKernel(Ce,t)}});Ls().prototype.atanh=function(){return this.throwIfDisposed(),Qh(this)},Ls().prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),ni(this,e,t,n,s)},Ls().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),Vh(this,e,t)},Ls().prototype.batchNorm=function(e,t,n,s,r){return this.throwIfDisposed(),ri(this,e,t,n,s,r)},Ls().prototype.broadcastTo=function(e){return this.throwIfDisposed(),Wo(this,e)},Ls().prototype.cast=function(e){return this.throwIfDisposed(),Xr(this,e)};const ep=hr({ceil_:function(e){const t={x:ur(e,"x","ceil")};return tr.runKernel(Me,t)}});Ls().prototype.ceil=function(){return this.throwIfDisposed(),ep(this)},Ls().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),li(this,e,t)},Ls().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof Ms&&(e=[e]),ui([this,...e],t)},Ls().prototype.conv1d=function(e,t,n,s,r,a){return this.throwIfDisposed(),mi(this,e,t,n,s,r,a)},Ls().prototype.conv2dTranspose=function(e,t,n,s,r){return this.throwIfDisposed(),yi(this,e,t,n,s,r)},Ls().prototype.conv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),fi(this,e,t,n,s,r,a)},Ls().prototype.cos=function(){return this.throwIfDisposed(),Oh(this)},Ls().prototype.cosh=function(){return this.throwIfDisposed(),Lh(this)},Ls().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),$c(this,e,t,n)};const tp=hr({depthToSpace_:function(e,t,n="NHWC"){const s=ur(e,"x","depthToSpace"),r="NHWC"===n?s.shape[1]:s.shape[2],a="NHWC"===n?s.shape[2]:s.shape[3],i="NHWC"===n?s.shape[3]:s.shape[1];T(r*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`)),T(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${s.shape}`)),T(i%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${s.shape}`));const o={x:s},l={blockSize:t,dataFormat:n};return tr.runKernel(Ze,o,l)}});Ls().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),tp(this,e,t)},Ls().prototype.depthwiseConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),xi(this,e,t,n,s,r,a)};const np=hr({dilation2d_:function(e,t,n,s,r=[1,1],a="NHWC"){const i=ur(e,"x","dilation2d"),o=ur(t,"filter","dilation2d");T(3===i.rank||4===i.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`)),T(3===o.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`)),T("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let l=i,u=!1;3===i.rank&&(l=ti(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);const c={x:l,filter:o},h={strides:n,pad:s,dilations:r},p=tr.runKernel(st,c,h);return u?ti(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});Ls().prototype.dilation2d=function(e,t,n,s,r){return this.throwIfDisposed(),np(this,e,t,n,s,r)};const sp=hr({divNoNan_:function(e,t){let n=ur(e,"a","div"),s=ur(t,"b","div");[n,s]=Ks(n,s);const r=ki(n,s),a=Uo(r),i=Ci(s,a);return Vo(i,a,r)}});Ls().prototype.divNoNan=function(e){return this.throwIfDisposed(),sp(this,e)},Ls().prototype.div=function(e){return this.throwIfDisposed(),ki(this,e)};const rp=hr({dot_:function(e,t){const n=ur(e,"t1","dot"),s=ur(t,"t2","dot");T(!(1!==n.rank&&2!==n.rank||1!==s.rank&&2!==s.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`));const r=1===n.rank?n.size:n.shape[1],a=1===s.rank?s.size:s.shape[0];if(T(r===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${a}.`)),1===n.rank&&1===s.rank){const e=ti(n,[1,-1]),t=ti(s,[-1,1]),r=ul(e,t);return ti(r,[])}if(1===n.rank&&2===s.rank){const e=ti(n,[1,-1]),t=ti(s,[s.shape[0],s.shape[1]]),r=ul(e,t);return ti(r,[r.size])}if(2===n.rank&&1===s.rank){const e=ti(s,[-1,1]),t=ul(n,e);return ti(t,[t.size])}{const e=ti(s,[s.shape[0],s.shape[1]]);return ul(n,e)}}});Ls().prototype.dot=function(e){return this.throwIfDisposed(),rp(this,e)},Ls().prototype.elu=function(){return this.throwIfDisposed(),vi(this)},Ls().prototype.equal=function(e){return this.throwIfDisposed(),Ci(this,e)};const ap=hr({erf_:function(e){let t=ur(e,"x","erf");T("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=Xr(t,"float32"));const n={x:t};return tr.runKernel(ut,n)}});Ls().prototype.erf=function(){return this.throwIfDisposed(),ap(this)},Ls().prototype.exp=function(){return this.throwIfDisposed(),Li(this)},Ls().prototype.expandDims=function(e){return this.throwIfDisposed(),Si(this,e)};const ip=hr({expm1_:function(e){const t={x:ur(e,"x","expm1")};return tr.runKernel(dt,t)}});Ls().prototype.expm1=function(){return this.throwIfDisposed(),ip(this)},Ls().prototype.fft=function(){return this.throwIfDisposed(),qo(this)},Ls().prototype.flatten=function(){return this.throwIfDisposed(),ti(this,[this.size])},Ls().prototype.floor=function(){return this.throwIfDisposed(),Ri(this)},Ls().prototype.floorDiv=function(e){return this.throwIfDisposed(),wi(this,e)},Ls().prototype.gather=function(e,t){return this.throwIfDisposed(),Fi(this,e,t)},Ls().prototype.greaterEqual=function(e){return this.throwIfDisposed(),_i(this,e)},Ls().prototype.greater=function(e){return this.throwIfDisposed(),Di(this,e)},Ls().prototype.ifft=function(){return this.throwIfDisposed(),Yo(this)},Ls().prototype.irfft=function(){return this.throwIfDisposed(),Jo(this)};const op=hr({isFinite_:function(e){const t={x:ur(e,"x","isFinite")};return tr.runKernel(St,t)}});Ls().prototype.isFinite=function(){return this.throwIfDisposed(),op(this)};const lp=hr({isInf_:function(e){const t={x:ur(e,"x","isInf")};return tr.runKernel(Tt,t)}});Ls().prototype.isInf=function(){return this.throwIfDisposed(),lp(this)};const up=hr({isNaN_:function(e){const t={x:ur(e,"x","isNaN")};return tr.runKernel(Et,t)}});Ls().prototype.isNaN=function(){return this.throwIfDisposed(),up(this)},Ls().prototype.leakyRelu=function(e){return this.throwIfDisposed(),Oi(this,e)},Ls().prototype.lessEqual=function(e){return this.throwIfDisposed(),Dl(this,e)},Ls().prototype.less=function(e){return this.throwIfDisposed(),th(this,e)};const cp=hr({localResponseNormalization_:function(e,t=5,n=1,s=1,r=.5){const a=ur(e,"x","localResponseNormalization");T(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),T(_(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let i=a,o=!1;3===a.rank&&(o=!0,i=ti(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:i},u={depthRadius:t,bias:n,alpha:s,beta:r},c=tr.runKernel(Pt,l,u);return o?ti(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});Ls().prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),cp(this,e,t,n,s)};const hp=hr({logSigmoid_:function(e){const t=ur(e,"x","logSigmoid");return _a((e=>({value:io(Ro(io(e))),gradFunc:t=>Pi(t,No(io(e)))})))(t)}});Ls().prototype.logSigmoid=function(){return this.throwIfDisposed(),hp(this)},Ls().prototype.logSoftmax=function(e){return this.throwIfDisposed(),Vi(this,e)},Ls().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),jl(this,e,t)},Ls().prototype.log=function(){return this.throwIfDisposed(),Mi(this)},Ls().prototype.log1p=function(){return this.throwIfDisposed(),Hl(this)},Ls().prototype.logicalAnd=function(e){return this.throwIfDisposed(),Ui(this,e)},Ls().prototype.logicalNot=function(){return this.throwIfDisposed(),Ah(this)};const pp=hr({logicalOr_:function(e,t){const n=ur(e,"a","logicalOr","bool"),s=ur(t,"b","logicalOr","bool");$i(n.shape,s.shape);const r={a:n,b:s};return tr.runKernel(zt,r)}});Ls().prototype.logicalOr=function(e){return this.throwIfDisposed(),pp(this,e)};const dp=hr({logicalXor_:function(e,t){const n=ur(e,"a","logicalXor","bool"),s=ur(t,"b","logicalXor","bool");return $i(n.shape,s.shape),Ui(pp(e,t),Ah(Ui(e,t)))}});Ls().prototype.logicalXor=function(e){return this.throwIfDisposed(),dp(this,e)},Ls().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),ul(this,e,t,n)},Ls().prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),Gi(this,e,t,n,s)},Ls().prototype.max=function(e,t){return this.throwIfDisposed(),zi(this,e,t)},Ls().prototype.maximum=function(e){return this.throwIfDisposed(),ji(this,e)},Ls().prototype.mean=function(e,t){return this.throwIfDisposed(),Ki(this,e,t)},Ls().prototype.min=function(e,t){return this.throwIfDisposed(),qi(this,e,t)},Ls().prototype.minimum=function(e){return this.throwIfDisposed(),Xi(this,e)};const fp=hr({mirrorPad_:function(e,t,n){T("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const s=ur(e,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");T(t.length===s.rank,(()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`));const r="reflect"===n?1:0;for(let e=0;e<s.rank;e++)T(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),T(t[e][0]>=0&&t[e][0]<=s.shape[e]-r&&t[e][1]>=0&&t[e][1]<=s.shape[e]-r,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${s.shape[e]-r} or less than 0 for input of shape ${s.shape}`));const a={paddings:t,mode:n},i={x:s};return tr.runKernel(Jt,i,a)}});Ls().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),fp(this,e,t)};const mp=hr({mod_:function(e,t){let n=ur(e,"a","mod"),s=ur(t,"b","mod");[n,s]=Ks(n,s);const r={a:n,b:s};return tr.runKernel(Zt,r)}});Ls().prototype.mod=function(e){return this.throwIfDisposed(),mp(this,e)},Ls().prototype.mul=function(e){return this.throwIfDisposed(),Pi(this,e)},Ls().prototype.neg=function(){return this.throwIfDisposed(),io(this)},Ls().prototype.norm=function(e,t,n){return this.throwIfDisposed(),zl(this,e,t,n)},Ls().prototype.notEqual=function(e){return this.throwIfDisposed(),oo(this,e)},Ls().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),lo(this,e,t,n)},Ls().prototype.onesLike=function(){return this.throwIfDisposed(),ho(this)},Ls().prototype.pad=function(e,t){return this.throwIfDisposed(),po(this,e,t)};const gp=hr({pool_:function(e,t,n,s,r,a){null==r&&(r=[1,1]),null==a&&(a=1),0===s&&(s="valid");const i=ur(e,"x","maxPool");let o=i,l=!1;3===i.rank&&(l=!0,o=ti(i,[1,i.shape[0],i.shape[1],i.shape[2]])),T(Qa(a,r),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${r}'`));const u=Ua(o.shape,t,a,r,s),c=[u.dilationHeight,u.dilationWidth];let h;h="same"===s?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),s=n.map((e=>Math.floor(e/2))),r=n.map(((e,t)=>e-s[t]));return n.map(((e,t)=>[s[t],r[t]]))}([u.filterHeight,u.filterWidth],c):[[0,0],[0,0]];const p=1===c[0]&&1===c[1],[d,f]=function(e,t,n){const s=n.map((e=>e[0])),r=n.map((e=>e[1])),a=e.concat(s,r),i=t.map(((e,t)=>(e-a[t]%e)%e)),o=r.map(((e,t)=>e+i[t]));return[t.map(((e,t)=>[s[t],o[t]])),t.map(((e,t)=>[0,i[t]]))]}([u.inHeight,u.inWidth],c,h),m=p?s:"valid",g=p?o:lc(o,c,d),y=("avg"===n?()=>ni(g,t,a,m):()=>Gi(g,t,a,m))(),b=p?y:Vh(y,c,f);return l?ti(b,[b.shape[1],b.shape[2],b.shape[3]]):b}});Ls().prototype.pool=function(e,t,n,s,r){return this.throwIfDisposed(),gp(this,e,t,n,s,r)},Ls().prototype.pow=function(e){return this.throwIfDisposed(),Ml(this,e)},Ls().prototype.prelu=function(e){return this.throwIfDisposed(),fo(this,e)};const yp=hr({prod_:function(e,t=null,n=!1){let s=ur(e,"x","prod");"bool"===s.dtype&&(s=Xr(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return tr.runKernel(dn,r,a)}});Ls().prototype.prod=function(e,t){return this.throwIfDisposed(),yp(this,e,t)};const bp=hr({reciprocal_:function(e){const t={x:ur(e,"x","reciprocal")};return tr.runKernel(gn,t)}});Ls().prototype.reciprocal=function(){return this.throwIfDisposed(),bp(this)},Ls().prototype.relu=function(){return this.throwIfDisposed(),wo(this)},Ls().prototype.relu6=function(){return this.throwIfDisposed(),Qo(this)},Ls().prototype.reshapeAs=function(e){return this.throwIfDisposed(),ti(this,e.shape)},Ls().prototype.reshape=function(e){return this.throwIfDisposed(),ti(this,e)},Ls().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),Al(this,e,t,n)},Ls().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),Rl(this,e,t,n)},Ls().prototype.reverse=function(e){return this.throwIfDisposed(),ko(this,e)},Ls().prototype.rfft=function(){return this.throwIfDisposed(),Xo(this)};const xp=hr({round_:function(e){const t={x:ur(e,"x","round")};return tr.runKernel($n,t)}});Ls().prototype.round=function(){return this.throwIfDisposed(),xp(this)},Ls().prototype.rsqrt=function(){return this.throwIfDisposed(),Mc(this)},Ls().prototype.selu=function(){return this.throwIfDisposed(),vo(this)},Ls().prototype.separableConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Io(this,e,t,n,s,r,a)},Ls().prototype.sigmoid=function(){return this.throwIfDisposed(),No(this)};const wp=hr({sign_:function(e){const t={x:ur(e,"x","sign")};return tr.runKernel(Dn,t)}});Ls().prototype.sign=function(){return this.throwIfDisposed(),wp(this)},Ls().prototype.sin=function(){return this.throwIfDisposed(),kc(this)},Ls().prototype.sinh=function(){return this.throwIfDisposed(),Ic(this)},Ls().prototype.slice=function(e,t){return this.throwIfDisposed(),$o(this,e,t)},Ls().prototype.softmax=function(e){return this.throwIfDisposed(),Ao(this,e)},Ls().prototype.softplus=function(){return this.throwIfDisposed(),Ro(this)},Ls().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),lc(this,e,t)},Ls().prototype.split=function(e,t){return this.throwIfDisposed(),Fo(this,e,t)},Ls().prototype.sqrt=function(){return this.throwIfDisposed(),Do(this)},Ls().prototype.square=function(){return this.throwIfDisposed(),ro(this)},Ls().prototype.squaredDifference=function(e){return this.throwIfDisposed(),Gl(this,e)},Ls().prototype.squeeze=function(e){return this.throwIfDisposed(),_o(this,e)},Ls().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof Ms?[this,e]:[this,...e];return Oo(n,t)},Ls().prototype.step=function(e){return this.throwIfDisposed(),el(this,e)};const kp=hr({stridedSlice_:function(e,t,n,s,r=0,a=0,i=0,o=0,l=0){const u={x:ur(e,"x","stridedSlice")},c={begin:t,end:n,strides:s,beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};return tr.runKernel(Hn,u,c)}});Ls().prototype.stridedSlice=function(e,t,n,s,r,a,i,o){return this.throwIfDisposed(),kp(this,e,t,n,s,r,a,i,o)},Ls().prototype.sub=function(e){return this.throwIfDisposed(),Bi(this,e)},Ls().prototype.sum=function(e,t){return this.throwIfDisposed(),Wi(this,e,t)};const vp=hr({tan_:function(e){const t={x:ur(e,"x","tan")};return tr.runKernel(jn,t)}});Ls().prototype.tan=function(){return this.throwIfDisposed(),vp(this)},Ls().prototype.tanh=function(){return this.throwIfDisposed(),Mo(this)},Ls().prototype.tile=function(e){return this.throwIfDisposed(),Ti(this,e)},Ls().prototype.toBool=function(){return this.throwIfDisposed(),Xr(this,"bool")},Ls().prototype.toFloat=function(){return this.throwIfDisposed(),Xr(this,"float32")},Ls().prototype.toInt=function(){return this.throwIfDisposed(),Xr(this,"int32")};const Ip=hr({topk_:function(e,t=1,n=!0){const s=ur(e,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const a={x:s},i={k:t,sorted:n},[o,l]=tr.runKernel(Xn,a,i);return{values:o,indices:l}}});Ls().prototype.topk=function(e,t){return this.throwIfDisposed(),Ip(this,e,t)},Ls().prototype.transpose=function(e){return this.throwIfDisposed(),Go(this,e)};const Np=hr({unique_:function(e,t=0){const n=ur(e,"x","unique","string_or_numeric");T(n.rank>0,(()=>"The input tensor must be at least 1D"));const s={x:n},r={axis:t},[a,i]=tr.runKernel(Zn,s,r);return{values:a,indices:i}}});let $p;function Cp(){return null==$p&&($p=tr.backend.epsilon()),$p}Ls().prototype.unique=function(e){return this.throwIfDisposed(),Np(this,e)},Ls().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),zc(this,e,t)},Ls().prototype.unstack=function(e){return this.throwIfDisposed(),Bo(this,e)},Ls().prototype.where=function(e,t){return this.throwIfDisposed(),Vo(e,this,t)},Ls().prototype.zerosLike=function(){return this.throwIfDisposed(),Uo(this)};class Sp extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Sp.prototype)}}class Tp extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Tp.prototype)}}class Ep extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Ep.prototype)}}class Ap extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Ap.prototype)}}class Rp extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Rp.prototype)}}function Fp(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function Dp(e,t){if(!e)throw new Rp(t)}function _p(e,t){let n=0;for(const s of e)s===t&&n++;return n}function Op(e){return 1===e.length?e[0]:e}function Mp(e){return Array.isArray(e)?e:[e]}function Lp(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function zp(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}Error;let Pp={};function Bp(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function Wp(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>Wp(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?Wp(t):e[n]=t.value)}}}function Vp(e,t={},n={},s="object",r=!1){if("string"==typeof e){const r=e;let a;if(r in n)a=n[r];else if(r in Pp)a=Pp[r];else if(a=t[r],null==a)throw new Ep(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new Ep(`${s}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in Pp?[o,l]=Pp.className:i in t&&([o,l]=t[i]),null==o)throw new Ep(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(Pp))e[t]=Pp[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},Pp);for(const e of Object.keys(n))Pp[e]=n[e];Wp(a.config);const s=l(o,a.config,n,r);return Pp=Object.assign({},t),s}{const e=Object.assign({},Pp);for(const e of Object.keys(n))Pp[e]=n[e];const t=new o(a.config);return Pp=Object.assign({},e),t}}}function Up(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function Gp(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function Hp(e){if(null==e)throw new Ep(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function jp(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new Ep(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function Kp(e,t,n=0,s=1/0){return Dp(n>=0),Dp(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every((e=>typeof e===t))}function qp(e,t){Array.isArray(e)?(T(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>qp(e,`element ${n+1} of ${t}`)))):T(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${Xp(e)}.`))}function Xp(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>Xp(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function Yp(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function Jp(e,t){return Ea((()=>Do(Wi(Pi(e,e),t,!0))))}class Zp extends Na{getConfig(){return{}}}class Qp extends Zp{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Ea((()=>{const t=Jp(e,this.axis),n=li(t,0,this.maxValue);return Pi(e,ki(n,za(Cp(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Qp.className="MaxNorm",Ca(Qp);class ed extends Zp{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Ea((()=>ki(e,za(Cp(),Jp(e,this.axis)))))}getConfig(){return{axis:this.axis}}}ed.className="UnitNorm",Ca(ed);class td extends Zp{apply(e){return wo(e)}}td.className="NonNeg",Ca(td);class nd extends Zp{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Ea((()=>{const t=Jp(e,this.axis),n=za(Pi(this.rate,li(t,this.minValue,this.maxValue)),Pi(1-this.rate,t));return Pi(e,ki(n,za(Cp(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}nd.className="MinMaxNorm",Ca(nd);const sd={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function rd(e){return Bp(e)}function ad(e,t={}){return Vp(e,$a.getMap().classNameMap,t,"constraint")}function id(e){return null==e?null:"string"==typeof e?ad({className:e in sd?sd[e]:e,config:{}}):e instanceof Zp?e:ad(e)}const od=["channelsFirst","channelsLast"],ld=["nearest","bilinear"],ud=["valid","same","causal"],cd=["max","avg"],hd=["sum","mul","concat","ave"],pd=new Map;function dd(e){jp(od,"DataFormat",e)}function fd(e){jp(ud,"PaddingMode",e)}function md(e){jp(cd,"PoolMode",e)}const gd=[];function yd(e,t){gd.push(e);try{const e=t();return gd.pop(),e}catch(e){throw gd.pop(),e}}function bd(e){if(!kd(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===gd.length?"":gd.join("/")+"/")+e}function xd(e){if(!kd(e))throw new Error("Not a valid tensor name: '"+e+"'");pd.has(e)||pd.set(e,0);const t=pd.get(e);if(pd.set(e,pd.get(e)+1),t>0){const n=`${e}_${t}`;return pd.set(n,1),n}return e}const wd=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function kd(e){return!!e.match(wd)}function vd(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let r=t;r<n;++r)s*=e[r];return s}function Id(e){return Lo(e=Array.isArray(e)?new Float32Array(e):e)}function Nd(e){return qi(Id(e)).dataSync()[0]}function $d(e){return zi(Id(e)).dataSync()[0]}function Cd(e,t){if(t<e)throw new Ep(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}function Sd(e,t){return e.asType(t)}function Td(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),e.reshape(n)}function Ed(e,t,n){return Ea((()=>{switch(e.rank){case 1:return Co(e,t,n);case 2:return So(e,[t,0],[n,e.shape[1]]);case 3:return To(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return Eo(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return $o(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return $o(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new Ep(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Ad(e,t,n){return Ea((()=>{switch(e.rank){case 1:return Co(e,t,n);case 2:return So(e,[0,t],[e.shape[0],n]);case 3:return To(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return Eo(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new Ep(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Rd(e,t,n,s){return Ea((()=>{switch(e.rank){case 1:return Co(e,t,n);case 2:switch(s){case 1:return Ed(e,t,n);case 2:return Ad(e,t,n);default:throw new Ep(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return Ed(e,t,n);case 2:return To(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return Ad(e,t,n);default:throw new Ep(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return Ed(e,t,n);case 2:return Eo(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return Eo(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return Ad(e,t,n);default:throw new Ep(`The axis is not within the rank of the tensor ${s}`)}default:throw new Ep(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Fd(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),ui(e,t)}function Dd(e,t){switch(e.rank){case 1:return ci([e,t]);case 2:return hi([e,t],0);case 3:return pi([e,t],0);case 4:return di([e,t],0);default:throw new Ep(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function _d(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new Ep(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return Ti(e,t)}function Od(e,t=0,n=1,s,r){return bo(e,t,n,s,r)}function Md(e,t,n,s){if(e.rank<2||t.rank<2)throw new Ap(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3&&e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new Ap(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`);if(2===e.rank&&2===t.rank)return cl({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?Pd(e.rank,s,"channelsLast"):null,activation:n});{const r=e.shape.slice(),a=r.pop();e=e.reshape([-1,a]);const i=t.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=t.transpose(c).reshape([l,-1]);const h=[...r,...u];return cl({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?Pd(e.rank,s,"channelsLast"):null,activation:n}).reshape(h)}}function Ld(e,t,n){return Ea((()=>(t=Array.isArray(t)?Lo(t,"int32"):t.toInt(),Fi(e,t,n))))}function zd(e){return Pi(e,e)}function Pd(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new Ep(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1,1,1]):t.reshape([1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,1,1,s[0]]):t.reshape([1].concat(s))}else if(4===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1,1]):t.reshape([1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,1,s[0]]):t.reshape([1].concat(s))}else if(3===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1]):t.reshape([1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,s[0]]):t.reshape([1].concat(s))}else if(e<3)return t;throw new Ep(`Unsupported input rank by biasAdd: ${t.rank}`)}function Bd(e,t,n){return Ea((()=>(null==n&&(n="channelsLast"),dd(n),e.add(Pd(e.rank,t,n)))))}function Wd(e,t,n,s){return Ea((()=>Ho(e,t,n,s)))}function Vd(e,t,n=!1){return n?e():t()}const Ud=["fanIn","fanOut","fanAvg"],Gd=["normal","uniform","truncatedNormal"];class Hd extends Na{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class jd extends Hd{apply(e,t){return uo(e,t)}}jd.className="Zeros",Ca(jd);class Kd extends Hd{apply(e,t){return co(e,t)}}Kd.className="Ones",Ca(Kd);class qd extends Hd{constructor(e){if(super(),"object"!=typeof e)throw new Ep(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new Ep(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return Ea((()=>Pi(Oa(this.value),co(e,t))))}getConfig(){return{value:this.value}}}qd.className="Constant",Ca(qd);class Xd extends Hd{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return xo(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Xd.className="RandomUniform",Ca(Xd);class Yd extends Hd{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Ap(`randomNormal does not support dType ${t}.`);return Od(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Yd.className="RandomNormal",Ca(Yd);class Jd extends Hd{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Ap(`truncatedNormal does not support dType ${t}.`);return Po(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Jd.className="TruncatedNormal",Ca(Jd);class Zd extends Hd{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return Ea((()=>{if(2!==e.length||e[0]!==e[1])throw new Ep("Identity matrix initializer can only be used for 2D square matrices.");return Pi(this.gain,Ei(e[0]))}))}getConfig(){return{gain:this.gain}}}Zd.className="Identity",Ca(Zd);class Qd extends Hd{constructor(e){if(super(),e.scale<0)throw new Ep(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,jp(Ud,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){jp(Gd,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,s;if(dd(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=vd(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=vd(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=vd(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(e),s=n[0],r=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,s):"fanOut"===this.mode?a/=Math.max(1,r):a/=Math.max(1,(s+r)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Ap(`${this.getClassName()} does not support dType ${t}.`);return Po(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return xo(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Qd.className="VarianceScaling",Ca(Qd);class ef extends Qd{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Qd.className}}ef.className="GlorotUniform",Ca(ef);class tf extends Qd{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Qd.className}}tf.className="GlorotNormal",Ca(tf);class nf extends Qd{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Qd.className}}nf.className="HeNormal",Ca(nf);class sf extends Qd{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Qd.className}}sf.className="HeUniform",Ca(sf);class rf extends Qd{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Qd.className}}rf.className="LeCunNormal",Ca(rf);class af extends Qd{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Qd.className}}af.className="LeCunNormal",Ca(af);class of extends Hd{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new Ap("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return Ea((()=>{if(e.length<2)throw new Ap("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=Od(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=ql.gramSchmidt(t);return e[0]>e[1]&&(n=n.transpose()),Pi(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}of.className="Orthogonal",Ca(of);const lf={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function uf(e,t={}){return Vp(e,$a.getMap().classNameMap,t,"initializer")}function cf(e){return Bp(e)}function hf(e){if("string"==typeof e){const t=e in lf?lf[e]:e;if("GlorotNormal"===t)return new tf;if("GlorotUniform"===t)return new ef;if("HeNormal"===t)return new nf;if("HeUniform"===t)return new sf;if("LeCunNormal"===t)return new rf;if("LeCunUniform"===t)return new af;{const e={};return e.className=t,e.config={},uf(e)}}return e instanceof Hd?e:uf(e)}let pf=0;function df(){return pf++}const ff={};function mf(e=""){return e in ff||(ff[e]=0),ff[e]+=1,e+ff[e].toString()}function gf(e){return Array.isArray(e)&&Array.isArray(e[0])}function yf(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function bf(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new Ep(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function xf(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new Ep(`Expected exactly 1 Shape; got ${e.length}`)}return e}function wf(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}const kf="Variable";class vf{constructor(e,t="float32",n=kf,s=!0,r=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=df(),n=null==n?kf:n,this.originalName=bd(n),this.name=xd(this.originalName),this.trainable_=s,this.constraint=r,this.val=function(e,t=!0,n,s){return tr.makeVariable(e,t,n,s)}(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function If(e){return e.map((e=>e.read()))}function Nf(e){e.forEach((e=>{e[0].write(e[1])}))}class $f{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class Cf{constructor(e,t,n,s,r,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=r,this.outputTensorIndex=i,this.id=df(),null!=a&&(this.originalName=bd(a),this.name=xd(this.originalName)),this.rank=t.length}}let Sf=0;class Tf{constructor(e,t){this.callArgs=t,this.id=Sf++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let Ef=0;class Af extends Na{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=Ef++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=Lp(e)+"_"+mf(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new Tp(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new Ep(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return Op(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return Op(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Sp(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new Sp(`Layer ${this.name} is not connected, no input to return.`);return Op(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Sp(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Sp(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Op(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=Mp(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=Mp(this.inputSpec);if(e.length!==t.length)throw new Ep(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const s=e[n],r=t[n];if(null==r)continue;const a=s.rank;if(null!=r.ndim&&a!==r.ndim)throw new Ep(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${a}`);if(null!=r.maxNDim&&a>r.maxNDim)throw new Ep(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${a}`);if(null!=r.minNDim&&a<r.minNDim)throw new Ep(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${a}.`);if(null!=r.dtype&&s.dtype!==r.dtype)throw new Ep(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${s.dtype}.`);if(r.axes){const e=s.shape;for(const t in r.axes){const s=Number(t),a=r.axes[t],i=s>=0?e[s]:e[e.length+s];if(null!=a&&-1===[a,null].indexOf(i))throw new Ep(`Input ${n} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=r.shape)for(let e=0;e<r.shape.length;++e){const t=r.shape[e],a=s.shape[e];if(null!=t&&null!=a&&t!==a)throw new Ep(`Input ${n} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=Mp(e);let s=!0;for(const e of n)if(!(e instanceof Cf)){s=!1;break}let r=!0;for(const e of n)if(e instanceof Cf){r=!1;break}if(s===r)throw new Ep("Arguments to apply() must be all SymbolicTensors or all Tensors");return yd(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of Mp(e))t.push(n.shape);this.build(Op(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&r&&(this._refCount=1)}if(this.assertInputCompatibility(e),r){let s=this.call(e,t);const r=Mp(s),a=[];for(let e of r)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(s=Op(a),null!=this.activityRegularizer)throw new Ap("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=Mp(e);const t=[];for(const n of e)t.push(n.shape);return Op(t)}(e),s=this.computeOutputShape(n);let r;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),r=null!=s&&s.length>0&&Array.isArray(s[0])?s.map(((n,s)=>new Cf(a,n,this,Mp(e),t,this.name,s))):new Cf(a,s,this,Mp(e),t,this.name),this.addInboundNode(e,r,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new Ap("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Sp(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new Sp(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Tp(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return wf(this.weights)}build(e){this.built=!0}getWeights(e=!1){return If(e?this.trainableWeights:this.weights)}setWeights(e){Ea((()=>{const t=this.weights;if(t.length!==e.length)throw new Ep(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=If(t);for(let r=0;r<s.length;++r){const a=s[r],i=t[r],o=e[r];if(!D(a.shape,o.shape))throw new Ep(`Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}Nf(n)}))}addWeight(e,t,n,s,r,a,i){if(-1!==this._addedWeightNames.indexOf(e))throw new Ep(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=hf("zeros"));const o=s.apply(t,n),l=new vf(o,n,e,a,i);return o.dispose(),null!=r&&this.addLoss((()=>r.apply(l.read()))),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=Mp(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,s,r,a,i=null){const o=Mp(e);t=Mp(t),n=Mp(n),s=Mp(s),r=yf(r),a=yf(a);const l=[],u=[],c=[];for(const e of o)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new Tf({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:r,outputShapes:a},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function Rf(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=Rf(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class Ff extends Af{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:mf("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new Ep("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new Ep("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new Ep("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new Cf(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new Tf({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new Ep(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}async function Df(e){if(null==e)return;const t=[],n=[],s=[];for(const r in e){const a=e[r];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(r),s.push(e)}}if(t.length>0){const r=await Promise.all(t);for(let t=0;t<r.length;++t)e[n[t]]=r[t][0];Aa(s)}}function _f(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var Of;Ff.className="InputLayer",Ca(Ff),function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(Of||(Of={}));class Mf{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class Lf{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class zf extends Mf{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const s=t[e];if("number"==typeof s)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+s*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const r=Ea((()=>za(this.totals[e],Pi(s,n))));this.totals[e]=r,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:Ea((()=>{const n=Pi(ki(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),Ra(t[e])})))}}class Pf extends Mf{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const r=this.history[s];for(let a=0;a<r.length;++a)if("number"!=typeof r[a]){const i=r[a];e.push(i.data()),t.push(s),n.push(a)}}const s=await Promise.all(e);for(let e=0;e<s.length;++e)this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=s[e][0]}}class Bf extends Mf{constructor(e,t){if(super(),this.currentEpoch=0,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");K(this.yieldEvery)&&(this.maybeWait=function(e,t){let n,s=bs();return(...r)=>{const a=bs();return a-s<t||(s=a,n=e(...r)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const s=[];null!=this.yield&&(await Df(n),s.push(this.yield(e,t,n))),s.push(au()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await Df(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await Df(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(au()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await Df(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await Df(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(au()):K(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await Df(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await Df(e),await this.trainEnd(e))}}function Wf(e,t){return null==e&&(e={}),e instanceof Mf?[e]:Array.isArray(e)&&e[0]instanceof Mf?e:Mp(e).map((e=>new Bf(e,t)))}class Vf{constructor(){}static registerCallbackConstructor(e,t){T(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),Vf.checkForDuplicate(t),null==Vf.constructors[e]&&(Vf.constructors[e]=[]),Vf.constructors[e].push(t)}static checkForDuplicate(e){for(const t in Vf.constructors)Vf.constructors[+t].forEach((t=>{if(t===e)throw new Ep("Duplicate callback constructor.")}))}static clear(){Vf.constructors={}}static createCallbacks(e){const t=[];for(const n in Vf.constructors){const s=+n;e>=s&&t.push(...Vf.constructors[s])}return t.map((e=>new e))}}function Uf(e,t,n,s,r,a,i,o,l){const u=new Pf,c=[new zf,...Vf.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new Lf(c);return h.setParams({epochs:n,initialEpoch:s,samples:r,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:h,history:u}}function Gf(e,t={},n=!1){return Vp(e,$a.getMap().classNameMap,t,"layer",n)}function Hf(e,t){return Ea((()=>{"float32"!==e.dtype&&(e=e.asType("float32"));const n=Wi(zd(e),t,!0),s=Ai(n.shape,Cp()),r=Do(ji(n,s));return ki(e,r)}))}function jf(e,t){return Ea((()=>Ki(zd(Bi(t,e)),-1)))}function Kf(e,t){return Ea((()=>Ki(La(Bi(t,e)),-1)))}function qf(e,t){return Ea((()=>{const n=Bi(e,t),s=li(La(e),Cp(),Number.MAX_VALUE),r=La(ki(n,s));return Pi(100,Ki(r,-1))}))}function Xf(e,t,n=!1){return Ea((()=>{if(n)t=Ao(t);else{const e=Wi(t,t.shape.length-1,!0);t=ki(t,e)}return t=li(t,Cp(),1-Cp()),io(Wi(Pi(e.toFloat(),Mi(t)),t.shape.length-1))}))}function Yf(e,t,n=!1){return Ea((()=>{const s=Ri(function(e){const t=[vd(e.shape)];return e.reshape(t)}(e)).toInt(),r=(t=li(t,Cp(),1-Cp())).shape;return Xf(lo(s,r[r.length-1]).reshape(r),t,n)}))}function Jf(e,t){return Ea((()=>{let n;return n=li(t,Cp(),1-Cp()),n=Mi(ki(n,Bi(1,n))),Ki(function(e,t){if(!D(e.shape,t.shape))throw new Ep(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return Ea((()=>{const n=t.relu(),s=t.abs().neg();return n.sub(t.mul(e)).add(s.exp().log1p())}))}(e,n),-1)}))}function Zf(e,t){return Ea((()=>{const n=Hf(e,-1),s=Hf(t,-1),r=Pi(n,s);return io(Wi(r,-1))}))}Vf.constructors={};const Qf={meanSquaredError:jf,meanAbsoluteError:Kf,meanAbsolutePercentageError:qf,meanSquaredLogarithmicError:function(e,t){return Ea((()=>{const n=li(t,Cp(),Number.MAX_VALUE),s=Mi(za(1,n)),r=li(e,Cp(),Number.MAX_VALUE),a=Mi(za(1,r));return Ki(zd(Bi(s,a)),-1)}))},squaredHinge:function(e,t){return Ea((()=>{const n=ji(0,Bi(1,Pi(e,t)));return Ki(zd(n),-1)}))},hinge:function(e,t){return Ea((()=>{const n=ji(0,Bi(1,Pi(e,t)));return Ki(n,-1)}))},categoricalHinge:function(e,t){return Ea((()=>{const n=Wi(Pi(e,t),-1),s=zi(Pi(Bi(1,e),t),-1);return ji(0,za(1,Bi(s,n)))}))},logcosh:function(e,t){return Ea((()=>{const n=Math.log(2),s=Bi(t,e),r=Bi(za(s,Ro(Pi(-2,s))),n);return Ki(r,-1)}))},categoricalCrossentropy:Xf,sparseCategoricalCrossentropy:Yf,binaryCrossentropy:Jf,kullbackLeiblerDivergence:function(e,t){return Ea((()=>{const n=li(e,Cp(),1),s=li(t,Cp(),1);return Wi(Pi(e,Mi(ki(n,s))),-1)}))},poisson:function(e,t){return Ea((()=>{const n=Mi(za(Cp(),t));return Ki(Bi(t,Pi(e,n)),-1)}))},cosineProximity:Zf};function em(e){if("string"==typeof e){if(e in Qf)return Qf[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new Ep(t)}return e}function tm(e,t){return Ea((()=>{const n=Pi(.5,ho(t)),s=Sd(Di(t,n),e.dtype);return Ki(Ci(e,s),-1)}))}function nm(e,t){return Ea((()=>Sd(Ci(Wa(e,-1),Wa(t,-1)),"float32")))}function sm(e,t){return Jf(e,t)}function rm(e,t){return e.rank===t.rank&&(e=e.squeeze([e.rank-1])),(t=t.argMax(-1)).dtype!==e.dtype&&(t=t.asType(e.dtype)),Ci(e,t).asType("float32")}const am=Xf,im=Yf,om={binaryAccuracy:tm,categoricalAccuracy:nm,precision:function(e,t){return Ea((()=>{const n=function(e,t){return Ea((()=>Ui(e.equal(1),t.equal(1)).sum().cast("float32")))}(e,t),s=function(e,t){return Ea((()=>Ui(e.equal(0),t.equal(1)).sum().cast("float32")))}(e,t),r=n.add(s);return Vo(Di(r,0),n.div(r),0).cast("float32")}))},categoricalCrossentropy:am,sparseCategoricalCrossentropy:im,mse:jf,MSE:jf,mae:Kf,MAE:Kf,mape:qf,MAPE:qf,cosine:Zf};function lm(e){if("string"==typeof e&&e in om)return om[e];if("string"!=typeof e&&null!=e)return e;throw new Ep(`Unknown metric ${e}`)}function um(e){if(Dp(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(Qf))if(Qf[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(om))if(om[n]===e){t=n;break}return void 0!==t?t:e.name}}function cm(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!hm(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function hm(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!hm(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!hm(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function pm(e,t,n=console.log){let s="";for(let n=0;n<e.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=e[n],s=s.slice(0,t[n]),s+=" ".repeat(t[n]-s.length);n(s)}function dm(e,t,n){let s;try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}pm([`${e.name} (${e.getClassName()})`,s,e.countParams().toString()],t,n)}function fm(e,t,n,s){let r;try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}const a=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,s=t.nodeIndices[e],r=t.tensorIndices[e];a.push(`${n}[${s}][${r}]`)}const i=e.name,o=e.getClassName(),l=0===a.length?"":a[0];pm([`${i} (${o})`,r,e.countParams().toString(),l],t,s);for(let e=1;e<a.length;++e)pm(["","","",a[e]],t,s)}function mm(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function gm(e,t){if(null===e)return null;if("string"==typeof e)return zp(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];mm(t,r,s)?n.push(s):n.push(gm(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=zp(n);t[e]=gm(s,e)}}return t}}function ym(e,t){if(null==e)return null;if("string"==typeof e)return Lp(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];mm(t,r,s)?n.push(s):n.push(ym(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];t[Lp(n)]="name"!==n&&"className"!==n||"string"!=typeof s?ym(s,n):s}return t}}const bm="3.3.0";class xm{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof xm)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new Ep(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return Xr(t,e.dtype)}catch(n){throw new Ep(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof Cf){if(null==this.id2Value[e.id])throw new Ep(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new Ep(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof Cf){if(null==this.id2Value[e.id])throw new Ep(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new Ep(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&Aa(this.id2Mask)}}const wm={},km={};function vm(e,t,n,s){const r=null!=n&&n.training,a=Array.isArray(e),i=a?e:[e],o=i.map((e=>e.name)),l=[],u=t.names();for(const e of o)-1!==u.indexOf(e)?l.push(t.getValue(e)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=o.join(",")+"|"+t.names().join(",");let h,p;if(null==wm[c]){const e=function(e,t){T(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],s={};if(1===e.length){const r=Nm(e[0],t);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of e){const{sorted:e,recipientMap:i}=Nm(a,t);for(const t of e)r.has(t.name)||(n.push(t),r.add(t.name));for(const e in i)null==s[e]&&(s[e]=new Set),i[e].forEach((t=>s[e].add(t)))}}return{sorted:n,recipientCounts:Im(s)}}(i,t);h=e.sorted,p=e.recipientCounts,wm[c]=h,km[c]=p}h=wm[c],p={},r||Object.assign(p,km[c]);const d=new xm(t);for(let e=0;e<h.length;++e){if(null!=s){const e=Ta().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const a=h[e],i=a.sourceLayer;if(i instanceof Ff)continue;const u=[],c=[],f=[];let m=!1;for(const e of a.inputs){const n=d.getValue(e),s=d.getMask(e);u.push(n),c.push(s),null!=s&&(m=!0),r||(p[e.name]--,0!==p[e.name]||t.hasKey(e)||-1!==o.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=Mp(i.apply(u,n));let y=null;i.supportsMasking&&(y=i.computeMask(u,c));const b=$m(a),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){d.hasKey(x[e])||d.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=o.indexOf(x[e].name);-1!==t&&(l[t]=g[e])}r||Aa(f)}return d.disposeMasks(),a?l:l[0]}function Im(e){const t={};for(const n in e)t[n]=e[n].size;return t}function Nm(e,t){const n=new Set,s=[],r={};for(const e of t.names())n.add(e);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),s.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==r[t.name]&&(r[t.name]=new Set),r[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:s,recipientMap:r}}function $m(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}class Cm extends Af{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=mf(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],Gp(this.inputs).length!==this.inputs.length)throw new Ep(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);Gp(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(s)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;Dp(0===n,"input layer has >1 nodes"),Dp(0===s,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof Ff))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},s={},r={},a={},i=[],o=(e,t,n,s,r,l)=>{null!=s&&null!=r&&null!=l||(s=e.sourceLayer,r=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[r];if(-1!==n.indexOf(u))throw new Tp(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(Cm.nodeKey(s,r)),s.id in a||(a[s.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const s=u.inputTensors[e],r=u.inboundLayers[e],a=u.nodeIndices[e],i=u.tensorIndices[e];o(s,t,n,r,a,i)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const e of this.outputs)o(e,l,u);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const i=null==s[e.outboundLayer.id]?0:s[e.outboundLayer.id];a=Math.max(a,i),s[e.outboundLayer.id]=a,r[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let s=0;s<e.inboundLayers.length;s++){const r=e.inboundLayers[s],i=e.nodeIndices[s],o=r.inboundNodes[i],l=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(a+1,l),n[o.id]=o}}const h={};for(const e in t){const s=t[e];s in h||(h[s]=[]),h[s].push(n[e])}const p={};for(const e in s){const t=s[e];t in p||(p[t]=[]),p[t].push(r[e])}let d=Object.keys(p).map((e=>parseInt(e,10))).sort(Up);this.layers=[];for(const e of d){const t=p[e];t.sort(((e,t)=>{const n=a[e.id],s=a[t.id];return n<s?-1:n>s?1:0}));for(const e of t)e instanceof Cm&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=p,d=Object.keys(h).map((e=>parseInt(e,10))).sort(Up);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new Tp(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new Tp(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new Tf({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new Ep("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new Ep(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,s++}const r=[];for(const s in e){let a=s;if(null==n[s]){const e=s.split("/");a=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[a])r.push([n[a],e[s]]);else if(t)throw new Ep(`Provided weight data has no target variable: ${s}`);delete n[a]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new Ep(`${e.length} of ${s} weights are not set: ${e}`)}Nf(r)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${bm}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=ym(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return Ea((()=>{e=Mp(e);const n=new xm;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return vm(this.outputs,n,t)}))}computeMask(e,t){return Ea((()=>{let n;return e=Mp(e),n=null==t?Fp(null,e.length):Mp(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=yf(e);if(t.length!==this.inputLayers.length)throw new Ep(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const s=this.inputLayers[e],r=t[e];n[s.name+"_0_0"]=r}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(Up);if(s.length>1)for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const s=[];for(let t=0;t<e.inboundLayers.length;t++){const r=e.inboundLayers[t],a=e.nodeIndices[t],i=e.tensorIndices[t],o=n[`${r.name}_${a}_${i}`];s.push(o)}const r=yf(t.computeOutputShape(Op(s))),a=t.inboundNodes.indexOf(e);for(let e=0;e<r.length;e++)n[`${t.name}_${a}_${e}`]=r[e]}}const r=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],s=this.outputLayersTensorIndices[e],r=`${t.name}_${n}_${s}`;a.push(r)}for(let e=0;e<a.length;e++){const t=a[e];Dp(t in n),r.push(n[t])}return Op(r)}runInternalGraph(e,t){null==t&&(t=Fp(null,e.length));const n={};for(let s=0;s<this.inputs.length;++s){const r=this.inputs[s],a=e[s],i=t[s];n[r.id]=[a,i]}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(Up);for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,s=e.inputTensors,r=e.outputTensors,a=new Array;for(const e of s)e.id in n&&a.push(n[e.id]);if(a.length===s.length){let s,i,o,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===a.length){const[e,n]=a[0];null==u.mask&&(u.mask=n),o=Mp(t.call(e,u)),l=Mp(t.computeMask(e,n)),s=[e],i=[n]}else s=a.map((e=>e[0])),i=a.map((e=>e[1])),null==u.mask&&(u.mask=i),o=Mp(t.call(s,u)),l=Mp(t.computeMask(s,i));if(t.activityRegularizer)throw new Ap("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<r.length;++e){const t=r[e],s=o[e],a=l[e];n[t.id]=[s,a]}}}}const r=[],a=[],i=[];for(const e of this.outputs){Dp(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,s]=n[e.id];i.push(t.shape),r.push(t),a.push(s)}return[r,a,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof Cm?1:0;for(let s=0;s<e.inboundNodes.length;s++){const r=Cm.nodeKey(e,s);this.containerNodes.has(r)&&(t[r]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new Ep(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new Ep("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new Ep(`No such layer: ${e}`)}calculateLosses(){return Ea((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=Cm.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const s=e.getClassName(),r=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const s=e.inboundNodes[n],r=Cm.nodeKey(e,n);let i={};if(this.containerNodes.has(r)){if(s.callArgs)try{JSON.stringify(s.callArgs),i=s.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${s.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(s.inboundLayers.length>0){const e=[];for(let n=0;n<s.inboundLayers.length;n++){const r=s.inboundLayers[n],a=s.nodeIndices[n],o=s.tensorIndices[n];let l=t[Cm.nodeKey(r,a)];null==l&&(l=0),e.push([r.name,l,o,i])}a.push(e)}}}const i={};i.name=e.name,i.className=s,i.config=r,i.inboundNodes=a,n.push(i)}e.layers=n;const s=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],r=this.inputLayersNodeIndices[e],a=Cm.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[e];s.push([n.name,i,o])}e.inputLayers=s;const r=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],s=this.outputLayersNodeIndices[e],a=Cm.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[e];r.push([n.name,i,o])}return e.outputLayers=r,e}static fromConfig(e,t,n={},s=!1){const r={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let s;for(const a of t){const o=a[0],l=a[1],u=a[2];if(s=null==a[3]?{}:a[3],!(o in r))return void i(e,t);const c=r[o];if(c.inboundNodes.length<=l)return void i(e,t);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&e.apply(Op(n),s)}function l(e){const n=e.name,a=Gf(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(s),r[n]=a,e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new Ep(`Corrupted configuration, expected array for nodeData: ${e}`);i(a,e)}))}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!Hp(a);)for(const e of c){const t=r[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],s=e[2];Dp(t in r);const a=r[t].inboundNodes[n].outputTensors;h.push(a[s])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],s=e[2];Dp(t in r);const a=r[t].inboundNodes[n].outputTensors;p.push(a[s])}return new e({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new Ep("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){Ea((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function Sm(e,t){return function(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}(e,t,"classWeight")}async function Tm(e,t,n,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=Ea((()=>{if(1===e.shape.length)return e.clone();if(2===e.shape.length){if(e.shape[1]>1){const t=1;return e.argMax(t)}if(1===e.shape[1])return e.reshape([e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),s=Array.from(await t.data());Aa(t);const r=[];return s.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);r.push(n[e])})),Lo(r,"float32")}return null}function Em(e,t){return Pi(e,t)}function Am(e,t){let n,s;const r=t;n=r.xs,s=r.ys,T(null!=n&&null!=s,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=Rm("input",e.inputNames,n),i=Rm("output",e.outputNames,s),o=a[0].shape[0];T(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),T(i.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<a.length;t++)T(a[t].shape[0]===o,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));for(let t=0;t<i.length;t++)T(i[t].shape[0]===o,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${i[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));return{xs:a,ys:i}}function Rm(e,t,n){if(n instanceof Ms)return[n];if(Array.isArray(n))return T(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const s=[];for(const r of t){if(null==n[r])throw new Ep(`The feature data generated by the dataset lacks the required ${e} key '${r}'.`);s.push(n[r])}return s}}function Fm(e){return"function"==typeof e.iterator}function Dm(e){T(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function _m(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>Ed(e,t,n-t))):Ed(e,t,n-t)}function Om(e,t){return Ea((()=>null==e?null:Array.isArray(e)?e.map((e=>Om(e,t))):Ld(e,"int32"===t.dtype?t:t.toInt())))}function Mm(e,t){const n=[];let s=0,r=null;for(;s<e;)r=s+t,r>=e&&(r=e),n.push([s,r]),s=r;return n}function Lm(e){const t=[];e instanceof Ms&&(e=[e]);for(let n=0;n<e.length;++n){const s=e[n];if(1===s.rank)t.push(Td(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function zm(e,t){if(null==e)return;const n=[];if(t instanceof Ms)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const s=t[e];n.push(s.id)}const s=[];if(e instanceof Ms)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&s.push(e)}));else if(null!=e)for(const t in e){const r=e[t];-1===n.indexOf(r.id)&&s.push(r)}s.forEach((e=>{e.isDisposed||e.dispose()}))}function Pm(e){return Array.isArray(e)}function Bm(e){return!function(e){return e instanceof Ms}(e)&&!Pm(e)}function Wm(e,t,n,s=!0,r=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(Pm(e)&&e.length>0)t=!0;else if(Bm(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new Ep(`Error when checking model ${r} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(Bm(e)){a=[];for(const n of t){if(null==e[n])throw new Ep(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(Pm(e)){if(e.length!==t.length)throw new Ep(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(t.length>1)throw new Ep(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=Lm(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new Ep(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let a=0;a<n[e].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[e][a];if(null!=l&&l>=0&&o!==l)throw new Ep(`Error when checking ${r}: expected ${t[e]} to have shape [${n[e]}], but got array with shape [${i.shape}].`)}}return a}function Vm(e,t,n,s=!0,r=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new Ep(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new Ep(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new Ep(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[e][a];if(null!=l&&l!==o)throw new Ep(`Error when checking ${r}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class Um extends Cm{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new Ep("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,s=console.log){const r=function(e){let t=!0;const n=[],s=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}s.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const r of n.inboundNodes)if(-1!==s.indexOf(r)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Output shape","Param #"];let i;if(r?(t=t||65,n=n||[.45,.85,1]):(t=t||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!r){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}s("_".repeat(t)),pm(a,n,s),s("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)r?dm(o[e],n,s):fm(o[e],n,i,s),s((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;return t=null!=e.collectedTrainableWeights?wf(e.collectedTrainableWeights):wf(e.trainableWeights),t}(e),u=wf(e.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>su.adagrad(.01),Adadelta:()=>su.adadelta(1,.95,Cp()),Adam:()=>su.adam(.001,.9,.999,Cp()),Adamax:()=>su.adamax(.002,.9,.999,Cp(),0),RMSProp:()=>su.rmsprop(.001,.9,0,Cp()),SGD:()=>su.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new Ep(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Ma))throw new Ep("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new Ep(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>em(e)))}else{const n=em(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new Ep(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(em(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],yd("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const s=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),r=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};yd("metric",(()=>{for(let e=0;e<this.outputs.length;++e)-1===n.indexOf(e)&&(t=>{let n,s,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let r;1===t[t.length-1]||this.lossFunctions[e]===Jf?-1!==["accuracy","acc"].indexOf(i)?s=tm:-1!==["crossentropy","ce"].indexOf(i)&&(s=sm):this.lossFunctions[e]===Yf?-1!==["accuracy","acc"].indexOf(i)?s=rm:-1!==["crossentropy","ce"].indexOf(i)&&(s=im):-1!==["accuracy","acc"].indexOf(i)?s=nm:-1!==["crossentropy","ce"].indexOf(i)&&(s=am),-1!==["accuracy","acc"].indexOf(i)?r="acc":-1!==["crossentropy","ce"].indexOf(i)&&(r="ce"),a=s,n=""+r}else{const e=lm(i);a=e,n=""+um(i)}let t;yd(n,(()=>{t=a})),r(e,n,t)}})(s[e])})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;Dm(s);const r=this.standardizeUserDataXY(e,t,!0,s);try{const e=r[0].concat(r[1]);this.makeTestFunction();const t=this.testFunction;return Op(this.testLoop(t,e,s,n.verbose,n.steps))}finally{zm(r[0],e),zm(r[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,r=e.testFunction;let a=[];if(n.verbose>0)throw new Ap("Verbose mode is not implemented yet.");T(!s||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const i="function"==typeof t.next?t:await t.iterator();let o=0,l=0;for(;!s||l<n.batches;){const t=await i.next();if(a=Ea((()=>{if(t.value){const{xs:n,ys:s}=Am(e,t.value),i=n.concat(s),u=Ea((()=>r(i)));if(Aa(i),0===l)for(let e=0;e<u.length;++e)a.push(Oa(0));const c=i[0].shape[0];for(let e=0;e<u.length;++e){const t=u[e],n=a[e];a[e]=Ea((()=>za(a[e],Pi(c,t)))),l>0&&Aa(n)}Aa(u),o+=c,++l}return a})),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=ki(a[e],o),Aa(t)}return Op(a)}(this,e,t)}checkNumSamples(e,t,n,s="steps"){let r;if(null!=n){if(r=null,null!=t)throw new Ep(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new Ep(`Either the input data should have a defined shape, or ${s} shoud be specified.`);r=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return r}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new Ep("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),s=n?t:[t],r=this.retrieveSymbolicTensors(s),a=new xm;if(e instanceof Ms&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new Ep(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new Ep(`No value is provided for the model's input ${t.name}`);a.add(t,n)}const i=vm(r,a);return n?i:i[0]}retrieveSymbolicTensors(e){const t=Fp(null,e.length);let n=e.length;for(const s of this.layers){const r=Array.isArray(s.output)?s.output:[s.output],a=r.map((e=>e.name));for(let s=0;s<e.length;++s){const i=a.indexOf(e[s]);if(-1!==i&&(t[s]=r[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,s)=>{null==t&&n.push(e[s])})),new Ep(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return Ea((()=>{const s=this.checkNumSamples(e);if(n)throw new Ap("Verbose predictLoop() is not implemented yet.");const r=Mm(s,t),a=this.outputs.map((e=>[]));for(let t=0;t<r.length;++t)Ea((()=>{const n=r[t][0],s=r[t][1],a=_m(e,n,s),i=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)i.push({key:this.inputs[e],value:a[e]});else i.push({key:this.inputs[0],value:a});const o=new xm(i);return vm(this.outputs,o)})).forEach(((e,t)=>a[t].push(e)));return Op(a.map((e=>ui(e,0))))}))}predict(e,t={}){const n=Lm(e);Vm(n,this.inputNames,this.feedInputShapes,!1);try{const e=null==t.batchSize?32:t.batchSize;return Dm(e),this.predictLoop(n,e)}finally{zm(n,e)}}predictOnBatch(e){Vm(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new Tp("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const r=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===Yf?r.push(t.slice(0,t.length-1).concat([1])):r.push(t)}if(function(e,t,n){const s=Gp(e.map((e=>e.shape[0])));s.sort();const r=Gp(t.map((e=>e.shape[0])));if(r.sort(),s.length>1)throw new Ep(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(r.length>1)throw new Ep(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(s.length>0&&r.length>0&&!D(s,r))throw new Ep(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=Wm(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=Wm(t,this.feedOutputNames,r,!1,"target")),function(e,t,n){const s=[jf,Jf,Xf];for(let r=0;r<e.length;++r){const a=e[r],i=t[r],o=n[r];if(null!=i){if(i===Xf&&1===a.shape[a.shape.length-1])throw new Ep(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const s=e[n],r=t[n];if(null!=r&&s!==r)throw new Ep(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!=0)throw new Ep(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,s,r=!0,a){const[i,o]=this.standardizeUserDataXY(e,t,r,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const e=Sm(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await Tm(o[t],null,e[t]))}return[i,o,l]}testLoop(e,t,n,s=0,r){return Ea((()=>{const a=this.checkNumSamples(t,n,r,"steps"),i=[];if(s>0)throw new Ap("Verbose mode is not implemented yet.");if(null!=r)throw new Ap("steps mode in testLoop() is not implemented yet");{const s=Mm(a,n),r=Lo(Cd(0,a));for(let n=0;n<s.length;++n){const a=s[n][0],o=s[n][1],l=Ed(r,a,o-a),u=Om(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)i.push(Oa(0));for(let e=0;e<c.length;++e){const t=c[e];i[e]=za(i[e],Pi(o-a,t))}}for(let e=0;e<i.length;++e)i[e]=ki(i[e],a)}return i}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let r=s;_p(e,s)>1&&(r+=`_${_p(e.slice(0,n),s)}`),t.push(r)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new xm(e),o=vm(this.outputs,i,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(s[e],o[e]);null!=r[e]&&(n=Em(n,r[e]));const a=Ki(n);t.push(a),l=0===e?n:za(l,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],r=this.metricsTensors[e][1];n=Ki(t(s[r],o[r]))}Ra(n),a.push(n)}return l=Ki(l),this.calculateLosses().forEach((e=>{l=za(l,e)})),l}),!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>Ea((()=>{const t=[];let n;const s=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:s[e]});const i=new xm(a),o=vm(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const s=this.lossFunctions[e],a=Ki(s(r[e],o[e]));n=0===e?a:za(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],s=this.metricsTensors[e][1],a=Ki(n(r[s],o[s]));t.push(a)}return t}))}async fit(e,t,n={}){return async function(e,t,n,s={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let r,a,i,o,l,u,c;e.isTraining=!0;try{const h=null==s.batchSize?32:s.batchSize;Dm(h);const p=!1,d=await e.standardizeUserData(t,n,s.sampleWeight,s.classWeight,p,h);r=d[0],a=d[1],c=d[2];let f,m=!1;if(null!=s.validationData&&s.validationData.length>0){if(m=!0,2!==s.validationData.length)throw 3===s.validationData.length?new Ap("validationData including sample weights is not supported yet."):new Ep(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);i=s.validationData[0],o=s.validationData[1];const t=!0,n=await e.standardizeUserData(i,o,null,null,t,h);l=n[0],u=n[1],f=l.concat(u)}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){m=!0;const e=Math.floor(r[0].shape[0]*(1-s.validationSplit)),t=r[0].shape[0];l=_m(r,e,t),r=_m(r,0,e),u=_m(a,e,t),a=_m(a,0,e),f=l.concat(u)}else null!=s.validationSteps&&(m=!0);const g=r.concat(a).concat(c);e.checkTrainableWeightsConsistency();const y=e.makeTrainFunction(),b=e.getDedupedMetricsNames();let x,w;m?(e.makeTestFunction(),x=e.testFunction,w=b.slice().concat(b.map((e=>"val_"+e)))):(x=null,f=[],w=b.slice());const k=Wf(s.callbacks,s.yieldEvery),v=await async function(e,t,n,s,r,a,i,o,l,u,c,h,p,d,f){null==r&&(r=32),null==a&&(a=1),null==c&&(c=!0),null==p&&(p=0);let m=!1;null!=l&&null!=u&&(m=!0);const g=e.checkNumSamples(n,r,d,"steps_per_epoch");let y;null!=g&&(y=Cd(0,g)),null==i&&(i=1);const{callbackList:b,history:x}=Uf(o,i,a,p,g,d,r,m,h);b.setModel(e),e.history=x,await b.onTrainBegin(),e.stopTraining_=!1;for(let i=p;i<a;++i){await b.onEpochBegin(i);const a={};{if("batch"===c)throw new Ap("batch shuffling is not implemneted yet");c&&$(y);const i=Lo(y),o=Mm(g,r);for(let c=0;c<o.length;++c){const h={};if(await b.onBatchBegin(c,h),Ea((()=>{const p=o[c][0],d=o[c][1],f=Ed(i,p,d-p);h.batch=c,h.size=d-p;const g=Om(n,f),y=t(g);for(let e=0;e<s.length;++e){const t=s[e],n=y[e];h[t]=n,Ra(n)}if(c===o.length-1&&m){const t=e.testLoop(l,u,r);for(let e=0;e<s.length;++e){const n=s[e],r=t[e];Ra(r),a["val_"+n]=r}}})),await b.onBatchEnd(c,h),_f(h),e.stopTraining_)break}i.dispose()}if(await b.onEpochEnd(i,a),e.stopTraining_)break}return await b.onTrainEnd(),await e.history.syncData(),e.history}(e,y,g,b,h,s.epochs,s.verbose,k,x,f,s.shuffle,w,s.initialEpoch,null);return v}finally{e.isTraining=!1,zm(r,t),zm(a,n),zm(l,i),zm(u,o),null!=c&&Aa(c)}}(this,e,t,n)}async fitDataset(e,t){return async function(e,t,n){const s=null!=n.batchesPerEpoch;if(T(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),T(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),T(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),T(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),T(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const r=null!=n.validationData;let a,i;if(r)if(Fm(n.validationData))T(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new Ap("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,i=e.ys}const o=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map((e=>"val_"+e))):l.slice();const c=Wf(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:p,history:d}=Uf(c,h,n.epochs,null,null,function(e,t){let n=null;return null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size),n}(t,n),null,r,u);p.setModel(e),e.history=d,await p.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const u={};await p.onEpochBegin(f);let c=0,h=0;for(s||(m=await t.iterator());!s||c<n.batchesPerEpoch;){const t=await m.next();if(s&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:s,ys:r}=Am(e,t.value),a={};a.batch=h,a.size=s[0].shape[0],await p.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const t=Sm(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await Tm(r[e],null,t[e]))}const u=s.concat(r).concat(i),d=o(u);Aa(u);for(let e=0;e<l.length;++e){const t=l[e],n=d[e];a[t]=n,Ra(n)}await p.onBatchEnd(h,a),_f(a),h++,c++}if(s?c>=n.batchesPerEpoch:t.done){if(r){let t;t=Fm(n.validationData)?Mp(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):Mp(e.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)u[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await p.onEpochEnd(f,u),f++,e.stopTraining_)break}return await p.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),s=n[0],r=n[1],a=this.makeTrainFunction()(s.concat(r)),i=[];for(const e of a){const t=await e.data();i.push(t[0])}return Aa(a),Op(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,r=this.getWeights(n);for(let e=0;e<s.length;++e)n&&!s[e].trainable||t.push({name:s[e].originalName,tensor:r[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=Ta().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-Ta().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=Lp(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>Lp(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=Lp(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Lp(um(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>Lp(um(e))));{const e={};for(const t in this.metrics)e[t]=Lp(um(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=Gf(gm(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=zp(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>zp(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=zp(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map((e=>zp(e)));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=zp(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(e,t){if("string"==typeof e){const t=Nr(e);if(0===t.length)throw new Ep(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Ep(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Ep("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await gr(this.getNamedWeights(t)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:`TensorFlow.js tfjs-layers v${bm}`,convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:r}=await gr(await this.optimizer.getWeights(),e);n.specs.push(...r),n.data=wr([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;cm(this.userDefinedMetadata,this.name,e),s.userDefinedMetadata=this.userDefinedMetadata}return s.weightData=n.data,s.weightSpecs=n.specs,e.save(s)}setUserDefinedMetadata(e){cm(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}Um.className="Model",Ca(Um);class Gm extends Um{}Gm.className="Functional",Ca(Gm);class Hm extends Um{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:mf("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new Ep(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof Hm||e instanceof Um;let n;if(t){if(n=e,1!==n.outputs.length)throw new Ep("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new Ep("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new Ep("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=function(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new Ep("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new Ff({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new Ep(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new Ep("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=Rf(this.outputs[0])}this.inboundNodes=[],new Tf({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Fp(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(xf(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Um({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new Tp("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new Tp("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new Tp("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new Tp("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let r,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new Ep("Legacy serialization format not supported yet.");r=t}else T(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),r=t.layers,delete t.layers,a=t;const i=new e(a);if(!(i instanceof Hm))throw new Ap(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const e of r){const t=Gf(e,void 0,s);s&&t.setFastWeightInitDuringBuild(!0),i.add(t)}return i}set stopTraining(e){if(null==this.model)throw new Ep("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new Ep("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}Hm.className="Sequential",Ca(Hm);class jm extends Na{getConfig(){return{}}}class Km extends jm{apply(e,t=1){return function(e,t=1){if(1!==t)throw new Ap(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return vi(e)}(e,t)}}Km.className="elu",Ca(Km);class qm extends jm{apply(e){return vo(e)}}qm.className="selu",Ca(qm);class Xm extends jm{apply(e){return wo(e)}}Xm.className="relu",Ca(Xm);class Ym extends jm{apply(e){return Ea((()=>Xi(6,wo(e))))}}Ym.className="relu6",Ca(Ym);class Jm extends jm{apply(e){return e}}Jm.className="linear",Ca(Jm);class Zm extends jm{apply(e){return No(e)}}Zm.className="sigmoid",Ca(Zm);class Qm extends jm{apply(e){return function(e){return Ea((()=>{const t=za(.5,Pi(.2,e));return li(t,0,1)}))}(e)}}Qm.className="hardSigmoid",Ca(Qm);class eg extends jm{apply(e){return Ro(e)}}eg.className="softplus",Ca(eg);class tg extends jm{apply(e){return function(e){return Ea((()=>ki(e,La(e).add(1))))}(e)}}tg.className="softsign",Ca(tg);class ng extends jm{apply(e){return Mo(e)}}ng.className="tanh",Ca(ng);class sg extends jm{apply(e,t=-1){return Ao(e,t)}}sg.className="softmax",Ca(sg);class rg extends jm{apply(e,t=-1){return Vi(e,t)}}rg.className="logSoftmax",Ca(rg);class ag extends jm{apply(e,t=1){return Ea((()=>No(e.mul(t)).mul(e)))}}function ig(e){return e.getClassName()}function og(e,t={}){return Vp(e,$a.getMap().classNameMap,t,"activation")}function lg(e){if(null==e){return og({className:"linear",config:{}})}if("string"==typeof e){const t={};return t.className=e,t.config={},og(t)}return e instanceof jm?e:og(e)}ag.className="swish",Ca(ag);class ug extends Na{}class cg extends ug{constructor(e){super(),function(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return Ea((()=>{let t=uo([1]);return this.hasL1&&(t=za(t,Wi(Pi(this.l1,La(e))))),this.hasL2&&(t=za(t,Wi(Pi(this.l2,zd(e))))),t.asScalar()}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}cg.className="L1L2",Ca(cg);const hg={l1l2:"L1L2"};function pg(e){return Bp(e)}function dg(e,t={}){return Vp(e,$a.getMap().classNameMap,t,"regularizer")}function fg(e){return null==e?null:"string"==typeof e?dg({className:e in hg?hg[e]:e,config:{}}):e instanceof ug?e:dg(e)}class mg extends Af{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=bf(e);let n=wo(e);return null!=this.maxValue&&(n=li(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}mg.className="ReLU",Ca(mg);class gg extends Af{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=bf(e);return Oi(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}gg.className="LeakyReLU",Ca(gg);class yg extends Af{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=hf(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=fg(e.alphaRegularizer),this.alphaConstraint=id(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new Ep(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=xf(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new $f({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=bf(e),fo(e,this.alpha.read())}getConfig(){const e={alphaInitializer:cf(this.alphaInitializer),alphaRegularizer:pg(this.alphaRegularizer),alphaConstraint:rd(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}yg.className="PReLU",Ca(yg);class bg extends Af{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Ap(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=bf(e);return vi(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}bg.className="ELU",Ca(bg);class xg extends Af{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=bf(e);return n.mul(Sd(n.greater(this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}xg.className="ThresholdedReLU",Ca(xg);class wg extends Af{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new sg).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=bf(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function kg(e,t,n){if("number"==typeof e)return Fp(e,t);if(e.length!==t)throw new Ep(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let r=0;r<t;++r){const a=e[r];if((s=a)!==parseInt(s.toString(),10))throw new Ep(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var s}function vg(e,t,n,s,r=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function Ig(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+$d([n-t,0]);else{if("same"!==s)throw new Ep(`Unsupport padding mode: ${s}.`);e*=t}return e}function Ng(e,t){return Ea((()=>(dd(t),"channelsFirst"===t?Go(e,[0,2,3,1]):e)))}function $g(e,t){return Ea((()=>(dd(t),"channelsFirst"===t?Go(e,[0,2,3,4,1]):e)))}function Cg(e,t,n,s=[1,1],r="valid",a,i,o=null){return Ea((()=>{if(null==a&&(a="channelsLast"),dd(a),3!==e.rank&&4!==e.rank)throw new Ep(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new Ep(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=Ng(e,a);if("causal"===r)throw new Ap("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=al({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=Go(l,[0,3,1,2])),l}))}wg.className="Softmax",Ca(wg);class Sg extends Af{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Sg.verifyArgs(t),this.rank=e,qp(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Ap(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=kg(t.kernelSize,e,"kernelSize"),this.strides=kg(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,fd(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,dd(this.dataFormat),this.activation=lg(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=hf(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=id(t.biasConstraint),this.biasRegularizer=fg(t.biasRegularizer),this.activityRegularizer=fg(t.activityRegularizer),this.dilationRate=kg(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Ep(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Ep(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Ep(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(Dp("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!Kp(e.kernelSize,"number",1,3))throw new Ep(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:ig(this.activation),useBias:this.useBias,biasInitializer:cf(this.biasInitializer),biasRegularizer:pg(this.biasRegularizer),activityRegularizer:pg(this.activityRegularizer),biasConstraint:rd(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class Tg extends Sg{constructor(e,t){super(e,t),this.kernel=null,Tg.verifyArgs(t),this.filters=t.filters,qp(this.filters,"filters"),this.kernelInitializer=hf(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=id(t.kernelConstraint),this.kernelRegularizer=fg(t.kernelRegularizer)}build(e){e=xf(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Ep(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return Ea((()=>{let t;e=bf(e);const n=null==this.bias?null:this.bias.read(),s=Yp(this.activation.getClassName());if(null!=s&&2===this.rank)t=Cg(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=function(e,t,n,s=1,r="valid",a,i=1){return Ea((()=>{if(null==a&&(a="channelsLast"),dd(a),3!==e.shape.length)throw new Ep(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new Ep(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new Ep(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(e=Go(e,[0,2,1])),"causal"===r)throw new Ap("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=mi(e,t,s,"same"===r?"same":"valid","NWC",i);return null!=n&&(o=Bd(o,n)),o}))}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=Cg(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Ap("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,s=[1,1,1],r="valid",a,i){return Ea((()=>{if(null==a&&(a="channelsLast"),dd(a),4!==e.rank&&5!==e.rank)throw new Ep(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new Ep(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=$g(e,a);if("causal"===r)throw new Ap("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=bi(o,t,s,"same"===r?"same":"valid","NDHWC",i),null!=n&&(o=Bd(o,n)),"channelsFirst"===a&&(o=Go(o,[0,4,1,2,3])),o}))}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=xf(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const s=vg(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(s)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:cf(this.kernelInitializer),kernelRegularizer:pg(this.kernelRegularizer),kernelConstraint:rd(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new Ep(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class Eg extends Tg{constructor(e){super(2,e),Eg.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Kp(e.kernelSize,"number",1,2))throw new Ep(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}Eg.className="Conv2D",Ca(Eg);class Ag extends Tg{constructor(e){super(3,e),Ag.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new Ep(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}Ag.className="Conv3D",Ca(Ag);class Rg extends Eg{constructor(e){if(super(e),this.inputSpec=[new $f({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new Ep(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=xf(e)).length)throw new Ep("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Ep("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new $f({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return Ea((()=>{let t=bf(e);if(4!==t.shape.length)throw new Ep(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a;"channelsFirst"===this.dataFormat?(r=2,a=3):(r=1,a=2);const i=n[r],o=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[s,Ig(i,c,l,this.padding),Ig(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Go(t,[0,2,3,1]));let d=yi(t,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=Go(d,[0,3,1,2])),null!=this.bias&&(d=Bd(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=xf(e)).slice();let n,s,r;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3):(n=3,s=1,r=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=Ig(t[s],o,a,this.padding),t[r]=Ig(t[r],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Rg.className="Conv2DTranspose",Ca(Rg);class Fg extends Tg{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new Ep("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new Ep("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new Ep(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=hf(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=fg(t.depthwiseRegularizer),this.depthwiseConstraint=id(t.depthwiseConstraint),this.pointwiseInitializer=hf(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=fg(t.pointwiseRegularizer),this.pointwiseConstraint=id(t.pointwiseConstraint)}build(e){if((e=xf(e)).length<this.rank+2)throw new Ep(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new Ep(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),r=[];for(let e=0;e<this.rank;++e)r.push(1);r.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",r,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new $f({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return Ea((()=>{let t;if(e=bf(e),1===this.rank)throw new Ap("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=Go(e,[0,2,3,1])),t=Io(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=Bd(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=Go(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=cf(this.depthwiseInitializer),e.pointwiseInitializer=cf(this.pointwiseInitializer),e.depthwiseRegularizer=pg(this.depthwiseRegularizer),e.pointwiseRegularizer=pg(this.pointwiseRegularizer),e.depthwiseConstraint=rd(this.depthwiseConstraint),e.pointwiseConstraint=rd(this.pointwiseConstraint),e}}Fg.className="SeparableConv";class Dg extends Fg{constructor(e){super(2,e)}}Dg.className="SeparableConv2D",Ca(Dg);class _g extends Tg{constructor(e){super(1,e),_g.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Kp(e.kernelSize,"number",1,1))throw new Ep(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}_g.className="Conv1D",Ca(_g);class Og extends Af{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return Ea((()=>{if(e=bf(e),"channelsLast"===this.dataFormat){const t=Rd(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Rd(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=Rd(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Rd(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Og.className="Cropping2D",Ca(Og);class Mg extends Af{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,dd(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,jp(ld,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return Ea((()=>{let t=bf(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=Go(t,[0,2,3,1]);const e=this.size[0]*n[2],s=this.size[1]*n[3],r="nearest"===this.interpolation?t.resizeNearestNeighbor([e,s]):t.resizeBilinear([e,s]);return Go(r,[0,3,1,2])}{const e=this.size[0]*n[1],s=this.size[1]*n[2];return"nearest"===this.interpolation?t.resizeNearestNeighbor([e,s]):t.resizeBilinear([e,s])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Mg.className="UpSampling2D",Ca(Mg);class Lg extends Sg{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=hf(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=id(e.depthwiseConstraint),this.depthwiseRegularizer=fg(e.depthwiseRegularizer)}build(e){if((e=xf(e)).length<4)throw new Ep(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new Ep(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Ea((()=>{let t=function(e,t,n=[1,1],s="valid",r,a){return Ea((()=>{null==r&&(r="channelsLast"),dd(r);let i=Ng(e,r);if(4!==e.rank)throw new Ep(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new Ep(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=xi(i,t,n,"same"===s?"same":"valid","NHWC",a),"channelsFirst"===r&&(i=Go(i,[0,3,1,2])),i}))}(e=bf(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=Bd(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=xf(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,r=vg(t,this.kernelSize[0],this.padding,this.strides[0]),a=vg(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,r,a]:[e[0],r,a,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=cf(this.depthwiseInitializer),e.depthwiseRegularizer=pg(this.depthwiseRegularizer),e.depthwiseConstraint=rd(this.depthwiseRegularizer),e}}function zg(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new Ep("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function r(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=r(t),constants:n=r(n)}}function Pg(e,t,n,s=!1,r,a,i=!1,o=!1){return Ea((()=>{const l=t.shape.length;if(l<3)throw new Ep(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(Cd(2,l));if(t=Go(t,u),null!=a)throw new Ap("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=r.asType("bool").asType("float32")).rank===l-1&&(r=Si(r,-1)),r=Go(r,u)),s&&(t=ko(t,0),null!=r&&(r=ko(r,0)));const c=[];let h,p=n;const d=t.shape[0],f=Bo(t);let m,g;null!=r&&(m=Bo(r));for(let t=0;t<d;++t){const n=f[t],s=Ea((()=>e(n,p)));if(null==r)h=s[0],p=s[1];else{const e=Ea((()=>{const e=m[t],n=ho(e).sub(e);return{output:s[0].mul(e).add(p[0].mul(n)),newStates:p.map(((t,r)=>s[1][r].mul(e).add(t.mul(n))))}}));h=e.output,p=e.newStates}o&&c.push(h)}return o&&(g=Oo(c,1)),[h,g,p]}))}Lg.className="DepthwiseConv2D",Ca(Lg);class Bg extends Af{constructor(e){let t;if(super(e),null==e.cell)throw new Ep("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new qg({cells:e.cell}):e.cell,null==t.stateSize)throw new Ep("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new $f({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?Cd(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null)):this.states_}setStates(e){this.states_=e}computeOutputShape(e){gf(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,t){return Ea((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new Ap("Constants support is not implemented in RNN yet.");gf(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new $f({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let r;if(this.cell.build(s),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!D(this.stateSpec.map((e=>e.shape[e.shape.length-1])),r))throw new Ep(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=r.map((e=>new $f({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){Ea((()=>{if(!this.stateful)throw new Sp("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new Ep("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>uo([n,e]))):this.states_=[uo([n,this.cell.stateSize])];else if(null==e)Aa(this.states_),null!=this.keptStates&&(Aa(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>uo([n,e]))):this.states_[0]=uo([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Ep(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):Aa(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],r=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,r];if(!D(s.shape,a))throw new Ep(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map((e=>Ra(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=zg(e,n,s,this.numConstants);e=r.inputs,n=r.initialState,s=r.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new $f({shape:e.shape}));i=i.concat(this.stateSpec)}if(null!=s&&(t.constants=s,a=a.concat(s),this.numConstants=s.length),a[0]instanceof Cf){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return Ea((()=>{const n=null==t?null:t.mask,s=null==t?null:t.training;let r=null==t?null:t.initialState;e=bf(e),null==r&&(r=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==a)throw new Ep(`RNN Layer has ${a} state(s) but was passed ${r.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=Pg(((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]}),e,r,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h}))}getInitialState(e){return Ea((()=>{let t=uo(e.shape);return t=Wi(t,[1,2]),t=Td(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?_d(t,[1,e]):t)):this.cell.stateSize>1?[_d(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===Bg.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const s=Gf(t.cell,n);return new e(Object.assign(t,{cell:s}))}}Bg.className="RNN",Ca(Bg);class Wg extends Af{}class Vg extends Wg{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,qp(this.units,"units"),this.activation=lg(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=hf(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=hf(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=hf(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=fg(e.kernelRegularizer),this.recurrentRegularizer=fg(e.recurrentRegularizer),this.biasRegularizer=fg(e.biasRegularizer),this.kernelConstraint=id(e.kernelConstraint),this.recurrentConstraint=id(e.recurrentConstraint),this.biasConstraint=id(e.biasConstraint),this.dropout=Nd([1,$d([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Nd([1,$d([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=xf(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Ea((()=>{if(2!==e.length)throw new Ep(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const s=null!=t.training&&t.training;let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Xg({ones:()=>ho(e),rate:this.dropout,training:s})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Xg({ones:()=>ho(n),rate:this.recurrentDropout,training:s}));const a=this.dropoutMask,i=this.recurrentDropoutMask;r=Md(null!=a?Pi(e,a):e,this.kernel.read()),null!=this.bias&&(r=Bd(r,this.bias.read())),null!=i&&(n=Pi(n,i));let o=za(r,Md(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:ig(this.activation),useBias:this.useBias,kernelInitializer:cf(this.kernelInitializer),recurrentInitializer:cf(this.recurrentInitializer),biasInitializer:cf(this.biasInitializer),kernelRegularizer:pg(this.kernelRegularizer),recurrentRegularizer:pg(this.recurrentRegularizer),biasRegularizer:pg(this.biasRegularizer),activityRegularizer:pg(this.activityRegularizer),kernelConstraint:rd(this.kernelConstraint),recurrentConstraint:rd(this.recurrentConstraint),biasConstraint:rd(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}Vg.className="SimpleRNNCell",Ca(Vg);class Ug extends Bg{constructor(e){e.cell=new Vg(e),super(e)}call(e,t){return Ea((()=>{null!=this.cell.dropoutMask&&(Aa(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Aa(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return new e(t)}}Ug.className="SimpleRNN",Ca(Ug);class Gg extends Wg{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new Ep("GRUCell does not support reset_after parameter set to true.");this.units=e.units,qp(this.units,"units"),this.activation=lg(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=lg(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=hf(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=hf(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=hf(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=fg(e.kernelRegularizer),this.recurrentRegularizer=fg(e.recurrentRegularizer),this.biasRegularizer=fg(e.biasRegularizer),this.kernelConstraint=id(e.kernelConstraint),this.recurrentConstraint=id(e.recurrentConstraint),this.biasConstraint=id(e.biasConstraint),this.dropout=Nd([1,$d([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Nd([1,$d([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=xf(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Ea((()=>{if(2!==e.length)throw new Ep(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Xg({ones:()=>ho(e),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Xg({ones:()=>ho(s),rate:this.recurrentDropout,training:n,count:3}));const r=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(e=Pi(e,r[0]));let u=Md(e,this.kernel.read());this.useBias&&(u=Bd(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=Pi(s,a[0]));const c=this.recurrentKernel.read(),[h,p]=Fo(c,[2*this.units,this.units],c.rank-1),d=Md(s,h),[f,m,g]=Fo(u,3,u.rank-1),[y,b]=Fo(d,2,d.rank-1);i=this.recurrentActivation.apply(za(f,y)),o=this.recurrentActivation.apply(za(m,b));const x=Md(Pi(o,s),p);l=this.activation.apply(za(g,x));const w=za(Pi(i,s),Pi(za(1,io(i)),l));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:ig(this.activation),recurrentActivation:ig(this.recurrentActivation),useBias:this.useBias,kernelInitializer:cf(this.kernelInitializer),recurrentInitializer:cf(this.recurrentInitializer),biasInitializer:cf(this.biasInitializer),kernelRegularizer:pg(this.kernelRegularizer),recurrentRegularizer:pg(this.recurrentRegularizer),biasRegularizer:pg(this.biasRegularizer),activityRegularizer:pg(this.activityRegularizer),kernelConstraint:rd(this.kernelConstraint),recurrentConstraint:rd(this.recurrentConstraint),biasConstraint:rd(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}Gg.className="GRUCell",Ca(Gg);class Hg extends Bg{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Gg(e),super(e)}call(e,t){return Ea((()=>{null!=this.cell.dropoutMask&&(Aa(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Aa(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Hg.className="GRU",Ca(Hg);class jg extends Wg{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,qp(this.units,"units"),this.activation=lg(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=lg(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=hf(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=hf(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=hf(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=fg(e.kernelRegularizer),this.recurrentRegularizer=fg(e.recurrentRegularizer),this.biasRegularizer=fg(e.biasRegularizer),this.kernelConstraint=id(e.kernelConstraint),this.recurrentConstraint=id(e.recurrentConstraint),this.biasConstraint=id(e.biasConstraint),this.dropout=Nd([1,$d([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Nd([1,$d([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=xf(e))[e.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;s=new((t=class extends Hd{apply(t,s){const r=e.apply([n]),a=(new Kd).apply([n]),i=e.apply([2*n]);return Dd(Dd(r,a),i)}}).className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return Ea((()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new Ep(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const r=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Xg({ones:()=>ho(e),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Xg({ones:()=>ho(s),rate:this.recurrentDropout,training:n,count:4}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(e=Pi(e,a[0]));let h=Md(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=Pi(s,i[0])),h=za(h,Md(s,this.recurrentKernel.read())),this.useBias&&(h=Bd(h,this.bias.read()));const[p,d,f,m]=Fo(h,4,h.rank-1);o=this.recurrentActivation.apply(p),l=this.recurrentActivation.apply(d),u=za(Pi(l,r),Pi(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=Pi(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:ig(this.activation),recurrentActivation:ig(this.recurrentActivation),useBias:this.useBias,kernelInitializer:cf(this.kernelInitializer),recurrentInitializer:cf(this.recurrentInitializer),biasInitializer:cf(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:pg(this.kernelRegularizer),recurrentRegularizer:pg(this.recurrentRegularizer),biasRegularizer:pg(this.biasRegularizer),activityRegularizer:pg(this.activityRegularizer),kernelConstraint:rd(this.kernelConstraint),recurrentConstraint:rd(this.recurrentConstraint),biasConstraint:rd(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}jg.className="LSTMCell",Ca(jg);class Kg extends Bg{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new jg(e),super(e)}call(e,t){return Ea((()=>{null!=this.cell.dropoutMask&&(Aa(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Aa(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Kg.className="LSTM",Ca(Kg);class qg extends Wg{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return Ea((()=>{let n=e.slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(n.splice(0,e.stateSize.length)):s.push(n.splice(0,1));s.reverse();const r=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=s[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),r.push(a.slice(1))}n=[];for(const e of r.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;gf(e)&&(e=e[0]),this.cells.forEach(((n,s)=>{yd(`RNNCell_${s}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign({},e,t)}static fromConfig(e,t,n={}){const s=[];for(const e of t.cells)s.push(Gf(e,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return If(e)}setWeights(e){const t=[];for(const n of this.cells){const s=n.weights.length,r=e.splice(s);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],r[e]])}Nf(t)}}function Xg(e){const{ones:t,rate:n,training:s=!1,count:r=1}=e,a=()=>Wd(t(),n),i=()=>Vd(a,t,s);return!r||r<=1?Ra(i().clone()):Array(r).fill(void 0).map(i).map((e=>Ra(e.clone())))}qg.className="StackedRNNCells",Ca(qg);var Yg,Jg;class Zg extends Bg{constructor(e){if(e.unroll)throw new Ap("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Ap("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new $f({ndim:5})]}call(e,t){return Ea((()=>{if(null!=this.cell.dropoutMask&&(Aa(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Aa(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new Ep("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return Ea((()=>{const{stateSize:t}=this.cell,n=e.shape,s=this.computeSingleOutputShape(n),r=uo([s[0],...s.slice(2)]);return Array.isArray(t)?Array(t.length).fill(r):[r]}))}resetStates(e,t=!1){Ea((()=>{if(!this.stateful)throw new Sp("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),r=[s[0],...s.slice(2)];if(null==n[0])throw new Ep("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>uo(r))):this.states_=[uo(r)];else if(null==e)Aa(this.states_),null!=this.keptStates&&(Aa(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>uo(r))):this.states_[0]=uo(r);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Ep(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):Aa(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=r;if(!D(n.shape,s))throw new Ep(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>Ra(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:r,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],c=vg(l,s[0],r,a[0],i[0]),h=vg(u,s[1],r,a[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}Zg.className="ConvRNN2D";class Qg extends jg{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:r,dataFormat:a,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,qp(this.filters,"filters"),this.kernelSize=kg(n,2,"kernelSize"),this.kernelSize.forEach((e=>qp(e,"kernelSize"))),this.strides=kg(s||1,2,"strides"),this.strides.forEach((e=>qp(e,"strides"))),this.padding=r||"valid",fd(this.padding),this.dataFormat=a||"channelsLast",dd(this.dataFormat),this.dilationRate=kg(i||1,2,"dilationRate"),this.dilationRate.forEach((e=>qp(e,"dilationRate")))}build(e){var t;e=xf(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new Ep(`The channel dimension of the input should be defined. Found ${e[n]}`);const s=e[n],r=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;e=new((t=class extends Hd{apply(e,t){return Fd([n.apply([s]),co([s]),n.apply([2*s])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return Ea((()=>{if(3!==e.length)throw new Ep(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,s=e[0],r=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Xg({ones:()=>ho(s),rate:this.dropout,training:n,count:4}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?Pi(t[n],e):e;let l=o(s,i,0),u=o(s,i,1),c=o(s,i,2),h=o(s,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Xg({ones:()=>ho(r),rate:this.recurrentDropout,training:n,count:4}));const p=this.recurrentDropoutMask;let d=o(r,p,0),f=o(r,p,1),m=o(r,p,2),g=o(r,p,3);const[y,b,x,w]=Fo(this.kernel.read(),4,3),[k,v,I,N]=this.useBias?Fo(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,k,this.padding),u=this.inputConv(u,b,v,this.padding),c=this.inputConv(c,x,I,this.padding),h=this.inputConv(h,w,N,this.padding);const[$,C,S,T]=Fo(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,$),f=this.recurrentConv(f,C),m=this.recurrentConv(m,S),g=this.recurrentConv(g,T);const E=this.recurrentActivation.apply(za(l,d)),A=this.recurrentActivation.apply(za(u,f)),R=za(Pi(A,a),Pi(E,this.activation.apply(za(c,m)))),F=Pi(this.recurrentActivation.apply(za(h,g)),this.activation.apply(R));return[F,F,R]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(e);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(e,s[r])&&(n[s[r]]=e[s[r]])}return n}(e,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,s)}inputConv(e,t,n,s){const r=fi(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Bd(r,n,this.dataFormat):r}recurrentConv(e,t){return fi(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}Qg.className="ConvLSTM2DCell",Ca(Qg);class ey extends Zg{constructor(e){const t=new Qg(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}ey.className="ConvLSTM2D",Ca(ey);class ty extends Af{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return Ea((()=>{this.invokeCallHook(e,t);const n=bf(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,s=this.getNoiseShape(n);return Vd((()=>Wd(n,this.rate,s,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}ty.className="Dropout",Ca(ty);class ny extends ty{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}ny.className="SpatialDropout1D",Ca(ny);class sy extends Af{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,qp(this.units,"units"),this.activation=lg(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=hf(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=hf(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=id(e.kernelConstraint),this.biasConstraint=id(e.biasConstraint),this.kernelRegularizer=fg(e.kernelRegularizer),this.biasRegularizer=fg(e.biasRegularizer),this.activityRegularizer=fg(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=xf(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=xf(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return Ea((()=>{this.invokeCallHook(e,t);const n=bf(e),s=Yp(this.activation.getClassName());let r;return null!=s?r=Md(n,this.kernel.read(),s,this.bias?this.bias.read():null):(r=Md(n,this.kernel.read()),null!=this.bias&&(r=Bd(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r}))}getConfig(){const e={units:this.units,activation:ig(this.activation),useBias:this.useBias,kernelInitializer:cf(this.kernelInitializer),biasInitializer:cf(this.biasInitializer),kernelRegularizer:pg(this.kernelRegularizer),biasRegularizer:pg(this.biasRegularizer),activityRegularizer:pg(this.activityRegularizer),kernelConstraint:rd(this.kernelConstraint),biasConstraint:rd(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}sy.className="Dense",Ca(sy);class ry extends Af{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=xf(e);for(const t of e.slice(1))if(null==t)throw new Ep(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],vd(e,1)]}call(e,t){return Ea((()=>{this.invokeCallHook(e,t);let n=bf(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=n.transpose(e)}return function(e){if(e.rank<=1)throw new Ep(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],vd(e.shape,1)];return e.reshape(t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}ry.className="Flatten",Ca(ry);class ay extends Af{constructor(e){super(e),this.supportsMasking=!0,this.activation=lg(e.activation)}call(e,t){return Ea((()=>{this.invokeCallHook(e,t);const n=bf(e);return this.activation.apply(n)}))}getConfig(){const e={activation:ig(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}ay.className="Activation",Ca(ay);class iy extends Af{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return Ea((()=>{return e=bf(e),t=e,n=this.n,Ea((()=>{if(2!==t.shape.length)throw new Ep(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return _d(Td(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}iy.className="RepeatVector",Ca(iy);class oy extends Af{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let r=1,a=null;for(let e=0;e<s.length;++e){const t=s[e];if(this.isUnknown(t)){if(null!==a)throw new Ep("Can only specifiy one unknown dimension.");a=e}else r*=t}const i=vd(e);if(null!==a){if(0===r||i%r!=0)throw new Ep(n);s[a]=i/r}else if(i!==r)throw new Ep(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return Ea((()=>{this.invokeCallHook(e,t);const n=bf(e),s=n.shape,r=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return n.reshape(r)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}oy.className="Reshape",Ca(oy);class ly extends Af{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=Cd(1,e.dims.length+1);if(!D(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new $f({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=xf(e)).slice();return this.dims.forEach(((n,s)=>{t[s+1]=e[n]})),t}call(e,t){return Go(bf(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}ly.className="Permute",Ca(ly);class uy extends Af{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=bf(e);return Ba(oo(n,this.maskValue),-1)}call(e,t){return Ea((()=>{this.invokeCallHook(e,t);const n=bf(e),s=Ba(oo(n,this.maskValue),-1,!0);return n.mul(s.asType(n.dtype))}))}}uy.className="Masking",Ca(uy);class cy extends Af{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(Mp(e.inputLength))}this.inputDim=e.inputDim,qp(this.inputDim,"inputDim"),this.outputDim=e.outputDim,qp(this.outputDim,"outputDim"),this.embeddingsInitializer=hf(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=fg(e.embeddingsRegularizer),this.activityRegularizer=fg(e.activityRegularizer),this.embeddingsConstraint=id(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return Ea((()=>this.maskZero?(e=bf(e),oo(e,Uo(e))):null))}computeOutputShape(e){if(e=xf(e),null==this.inputLength)return[...e,this.outputDim];const t=Mp(this.inputLength);if(t.length!==e.length-1)throw new Ep(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const r=t[s],a=e[s+1];if(null!=r&&null!=a&&r!==a)throw new Ep(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==r&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return Ea((()=>{this.invokeCallHook(e,t);let n=bf(e);return"int32"!==n.dtype&&(n=Sd(n,"int32")),Ld(this.embeddings.read(),n.as1D()).reshape(xf(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:cf(this.embeddingsInitializer),embeddingsRegularizer:pg(this.embeddingsRegularizer),activityRegularizer:pg(this.activityRegularizer),embeddingsConstraint:rd(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}cy.className="Embedding",Ca(cy);class hy extends Af{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new Ap}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const r=e[e.length-t.length+s],a=t[s];if(null==r||null==a||r<0||a<0)n.push(null);else if(1===r)n.push(a);else if(1===a)n.push(r);else{if(r!==a)throw new Ep("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(r)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[xf(e)]),e.length<2)throw new Ep(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=Gp(t),t.length>1)throw new Ep(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const s=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=e.map((e=>e.length));-1===e.indexOf(null)&&1===Gp(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return Ea((()=>{if(this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const s=$d(n);for(let n of e){const e=n.rank;for(let t=0;t<s-e;++t)n=Td(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const s of e){const e=s.rank;if(null==e){const e=s.shape,r=e[0],a=e.slice(1).concat([r]);let i=s.reshape([r].concat(vd(e.slice(1))));i=Go(i,[1,0]),i=i.reshape(a),t.push(i),n=!0}else if(e>1){const r=Cd(1,e).concat([0]);t.push(Go(s,r)),n=!0}else t.push(s)}let s=this.mergeFunction(t);const r=s.rank;if(n)if(null==r){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=Go(s.reshape([-1,t]),[1,0]).reshape(n)}else if(r>1){const e=[r-1].concat(Cd(0,r-1));s=Go(s,e)}return s}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const s=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,s)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=Gp(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return Ea((()=>{if(null==t)return null;if(!Array.isArray(t))throw new Ep("`mask` should be an Array");if(!Array.isArray(e))throw new Ep("`inputs` should be an Array");if(t.length!==e.length)throw new Ep(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:Si(e,0))))[0];for(let e=1;e<t.length-1;++e)n=Ui(n,t[e]);return n}))}}class py extends hy{constructor(e){super(e)}mergeFunction(e){return Ea((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=za(t,e[n]);return t}))}}py.className="Add",Ca(py);class dy extends hy{constructor(e){super(e)}mergeFunction(e){return Ea((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Pi(t,e[n]);return t}))}}dy.className="Multiply",Ca(dy);class fy extends hy{constructor(e){super(e)}mergeFunction(e){return Ea((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=za(t,e[n]);return Pi(1/e.length,t)}))}}fy.className="Average",Ca(fy);class my extends hy{constructor(e){super(e)}mergeFunction(e){return Ea((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=ji(t,e[n]);return t}))}}my.className="Maximum",Ca(my);class gy extends hy{constructor(e){super(e)}mergeFunction(e){return Ea((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Xi(t,e[n]);return t}))}}gy.className="Minimum",Ca(gy);class yy extends hy{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new Ep("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const s=e[t].slice();s.splice(this.axis,1);let r=!1;for(const e of n)if(D(e,s)){r=!0;break}r||n.push(s)}if(n.length>1)throw new Ep("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return Ea((()=>Fd(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new Ep("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[s]||null==e[s]){n[s]=null;break}n[s]+=e[s]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new Ep("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new Ep("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new Ep(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return Ea((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const s=[];for(let n=0;n<e.length;++n)null==t[n]?s.push(ho(e[n]).asType("bool")):t[n].rank<e[n].rank?s.push(Si(t[n],-1)):s.push(t[n]);const r=ui(s,this.axis);return Pa(r,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function by(e,t){for(;e<0;)e+=t;return e}yy.className="Concatenate",Ca(yy);class xy extends hy{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){T(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new Ap("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new Ep(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new Ep(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>by(t,e[n].shape.length))):[by(this.axes,n.shape.length),by(this.axes,s.shape.length)],this.normalize&&(n=Hf(n,t[0]),s=Hf(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new Ap("batchDot is not implemented for tensors of 4D or higher rank yet");if(T(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),T(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new Ap("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,r=t.shape.length;null==n&&(n=[s-1,r-2]);const a=n;return Ea((()=>{let n,i;if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=a[0]===a[1]?e.mul(t).sum(a[0]):e.transpose([1,0]).mul(t).sum(a[1]);else{const n=a[0]!==e.shape.length-1,s=a[1]===t.shape.length-1;i=e.matMul(t,n,s)}if(n>0){let e;e=s>r?s+r-3:s-1;const t=[];for(let s=e;s<e+n;++s)t.push(s);i=i.squeeze(t)}return 1===i.shape.length&&(i=i.expandDims(1)),i}))}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[by(this.axes,e.length),by(this.axes,t.length)],n}computeOutputShape(e){T(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new Ap("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const r=t.concat(n);return 1===r.length&&r.push(1),r}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}xy.className="Dot",Ca(xy);class wy extends Af{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return Ea((()=>{this.invokeCallHook(e,t);const n=bf(e);return Vd((()=>Od(n.shape,0,this.stddev).add(n)),(()=>n),t.training||!1)}))}}wy.className="GaussianNoise",Ca(wy);class ky extends Af{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Ea((()=>{this.invokeCallHook(e,t);const n=bf(e);return this.rate>0&&this.rate<1?Vd((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return n.mul(Od(n.shape,1,e))}),(()=>n),t.training||!1):n}))}}ky.className="GaussianDropout",Ca(ky);class vy extends Af{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||bf(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Ea((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return Vd((()=>{const t=bf(e),s=-1.7580993408473766;let r=_i(xo(n),this.rate);r=Sd(r,"float32");const a=((1-this.rate)*(1+this.rate*s**2))**-.5,i=-a*s*this.rate;return t.mul(r).add(r.add(-1).mul(s)).mul(a).add(i)}),(()=>bf(e)),t.training||!1)}return e}))}}function Iy(e,t,n,s,r,a=.001){let i;if(2===e.rank)i=ai(e,t,n,s,r,a);else if(3===e.rank)i=ii(e,t,n,s,r,a);else{if(4!==e.rank)throw new Ap(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=oi(e,t,n,s,r,a)}return i}vy.className="AlphaDropout",Ca(vy);class Ny extends Af{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=hf(e.betaInitializer||"zeros"),this.gammaInitializer=hf(e.gammaInitializer||"ones"),this.movingMeanInitializer=hf(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=hf(e.movingVarianceInitializer||"ones"),this.betaConstraint=id(e.betaConstraint),this.gammaConstraint=id(e.gammaConstraint),this.betaRegularizer=fg(e.betaRegularizer),this.gammaRegularizer=fg(e.gammaRegularizer)}build(e){e=xf(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new Ep(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new $f({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return Ea((()=>{const n=null!=t.training&&t.training,s=bf(e),r=s.shape,a=r.length,i=Cd(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const l=Fp(1,a);l[o]=r[o];const u=i.slice();u.sort();const c=!D(u,Cd(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=this.movingMean.read().reshape(l),t=this.movingVariance.read().reshape(l),n=this.center?this.beta.read().reshape(l):null,r=this.scale?this.gamma.read().reshape(l):null;return Iy(s,e,t,n,r,this.epsilon)}return Iy(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,d]=function(e,t,n,s,r=.001){return D(s.slice().sort(),Cd(0,e.rank-1))?function(e,t,n,s,r=.001){return Ea((()=>{const a=ao(e,s),i=a.mean,o=a.variance;return[Iy(e,i,o,n,t,r),i,o]}))}(e,t,n,s,r):function(e,t,n,s,r=.001){return Ea((()=>{const a=ao(e,s),i=a.mean,o=a.variance,l=[];for(const t of Cd(0,e.rank))-1!==s.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=i.reshape(l),c=o.reshape(l),h=null==t?null:t.reshape(l),p=null==n?null:n.reshape(l);return[Iy(e,u,c,p,h,r),i,o]}))}(e,t,n,s,r)}(s,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(e,t,n)=>{Ea((()=>{const s=1-n,r=e.read(),a=r.sub(t).mul(s);e.write(r.sub(a))}))};return(()=>{f(this.movingMean,p,this.momentum),f(this.movingVariance,d,this.momentum)})(),h}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:cf(this.betaInitializer),gammaInitializer:cf(this.gammaInitializer),movingMeanInitializer:cf(this.movingMeanInitializer),movingVarianceInitializer:cf(this.movingVarianceInitializer),betaRegularizer:pg(this.betaRegularizer),gammaRegularizer:pg(this.gammaRegularizer),betaConstraint:rd(this.betaConstraint),gammaConstraint:rd(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Ny.className="BatchNormalization",Ca(Ny);class $y extends Af{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=hf(e.betaInitializer||"zeros"),this.gammaInitializer=hf(e.gammaInitializer||"ones"),this.betaRegularizer=fg(e.betaRegularizer),this.gammaRegularizer=fg(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=xf(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==Gp(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(e,t){const n=bf(e),s=n.shape,r=s.length;return Ea((()=>{let{mean:e,variance:t}=ao(n,this.axis,!0);const a=Fp(1,r);for(const e of this.axis)a[e]=s[e];const i=e=>null!=e&&e.shape.length!==r&&this.axis!==[r-1]?e.reshape(a):e;let o=i(this.gamma.read()),l=i(this.beta.read());const u=[],c=[];for(let e=0;e<r;++e)-1!==this.axis.indexOf(e)?(u.push(s[e]),c.push(1)):(u.push(1),c.push(s[e]));return e=e.tile(u),t=t.tile(u),o=o.tile(c),l=l.tile(c),Iy(n,e,t,l,o,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:cf(this.betaInitializer),gammaInitializer:cf(this.gammaInitializer),betaRegularizer:pg(this.betaRegularizer),gammaRegularizer:pg(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}$y.className="LayerNormalization",Ca($y);class Cy extends Af{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new Ep(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new Ep(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new Ep(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new $f({ndim:4})]}computeOutputShape(e){let t,n;return e=xf(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return Ea((()=>{return t=bf(e),n=this.padding,s=this.dataFormat,Ea((()=>{if(4!==t.rank)throw new Ep(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new Ep("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new Ep(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],po(t,e)}));var t,n,s}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function Sy(e,t,n,s,r,a){return Ea((()=>{let i;dd(r),md(a),fd(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=Ng(e,r);const o="same"===s?"same":"valid";return i="max"===a?Gi(e,t,n,o):ni(e,t,n,o),"channelsFirst"===r&&(i=Go(i,[0,3,1,2])),i}))}function Ty(e,t,n,s,r,a){return Ea((()=>{let i;dd(r),md(a),fd(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=$g(e,r);const o="same"===s?"same":"valid";return i="max"===a?Hi(e,t,n,o):si(e,t,n,o),"channelsFirst"===r&&(i=Go(i,[0,4,1,2,3])),i}))}Cy.className="ZeroPadding2D",Ca(Cy);class Ey extends Af{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new Ep(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(qp(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new Ep(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}qp(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,fd(this.padding),this.inputSpec=[new $f({ndim:3})]}computeOutputShape(e){const t=vg((e=xf(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return Ea((()=>{this.invokeCallHook(e,t),e=Td(bf(e),2);const n=this.poolingFunction(bf(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return _o(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class Ay extends Ey{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return dd(r),fd(s),Sy(e,t,n,s,r,"max")}}Ay.className="MaxPooling1D",Ca(Ay);class Ry extends Ey{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return dd(r),fd(s),Sy(e,t,n,s,r,"avg")}}Ry.className="AveragePooling1D",Ca(Ry);class Fy extends Af{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new Ep(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];qp(this.poolSize,"poolSize"),qp(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,dd(this.dataFormat),fd(this.padding),this.inputSpec=[new $f({ndim:4})]}computeOutputShape(e){e=xf(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=vg(t,this.poolSize[0],this.padding,this.strides[0]),n=vg(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return Ea((()=>(this.invokeCallHook(e,t),this.poolingFunction(bf(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Dy extends Fy{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return dd(r),fd(s),Sy(e,t,n,s,r,"max")}}Dy.className="MaxPooling2D",Ca(Dy);class _y extends Fy{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return dd(r),fd(s),Sy(e,t,n,s,r,"avg")}}_y.className="AveragePooling2D",Ca(_y);class Oy extends Af{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new Ep(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];qp(this.poolSize,"poolSize"),qp(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,dd(this.dataFormat),fd(this.padding),this.inputSpec=[new $f({ndim:5})]}computeOutputShape(e){e=xf(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=vg(t,this.poolSize[0],this.padding,this.strides[0]),n=vg(n,this.poolSize[1],this.padding,this.strides[1]),s=vg(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,t){return Ea((()=>(this.invokeCallHook(e,t),this.poolingFunction(bf(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class My extends Oy{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return dd(r),fd(s),Ty(e,t,n,s,r,"max")}}My.className="MaxPooling3D",Ca(My);class Ly extends Oy{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return dd(r),fd(s),Ty(e,t,n,s,r,"avg")}}Ly.className="AveragePooling3D",Ca(Ly);class zy extends Af{constructor(e){super(e),this.inputSpec=[new $f({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new Ap}}class Py extends zy{constructor(e){super(e||{})}call(e,t){return Ea((()=>{const t=bf(e);return Ki(t,1)}))}}Py.className="GlobalAveragePooling1D",Ca(Py);class By extends zy{constructor(e){super(e||{})}call(e,t){return Ea((()=>{const t=bf(e);return zi(t,1)}))}}By.className="GlobalMaxPooling1D",Ca(By);class Wy extends Af{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,dd(this.dataFormat),this.inputSpec=[new $f({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new Ap}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Vy extends Wy{call(e,t){return Ea((()=>{const t=bf(e);return"channelsLast"===this.dataFormat?Ki(t,[1,2]):Ki(t,[2,3])}))}}Vy.className="GlobalAveragePooling2D",Ca(Vy);class Uy extends Wy{call(e,t){return Ea((()=>{const t=bf(e);return"channelsLast"===this.dataFormat?zi(t,[1,2]):zi(t,[2,3])}))}}Uy.className="GlobalMaxPooling2D",Ca(Uy);class Gy extends Af{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=Gf(t.layer,n);delete t.layer;const r={layer:s};return Object.assign(r,t),new e(r)}}class Hy extends Gy{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=xf(e)).length<3)throw new Ep(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=xf(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),s=e[1];return[n[0],s].concat(n.slice(1))}call(e,t){return Ea((()=>Pg(((e,n)=>[bf(this.layer.call(e,t)),[]]),e=bf(e),[],!1,null,null,!1,!0)[1]))}}Hy.className="TimeDistributed",Ca(Hy);class jy extends Gy{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=Gf(n),t.goBackwards=!0!==t.goBackwards;const s={};var r;if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=Gf(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,r=this.mergeMode,jp(hd,"BidirectionalMergeMode",r),e.weights)throw new Ap("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,s,r=this.forwardLayer.computeOutputShape(e);return Array.isArray(r)&&Array.isArray(r[0])||(r=[r]),this.returnState?(s=r.slice(1),t=r[0]):t=r[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):Op(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=zg(e,n,s,this.numConstants);if(e=r.inputs,n=r.initialState,s=r.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new Ep("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const s=n.map((e=>new $f({shape:e.shape})));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),i.push(...s)}if(null!=s)throw new Ap("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof Cf;for(const e of a)if(e instanceof Cf!==o)throw new Ep("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return Ea((()=>{const n=t.initialState;let s,r,a,i;if(null==n)s=this.forwardLayer.call(e,t),r=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),r=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(s)&&(a=s.slice(1).concat(r.slice(1))),s=s[0],r=r[0]),this.returnSequences&&(r=ko(r,1)),"concat"===this.mergeMode?i=Fd([s,r]):"sum"===this.mergeMode?i=za(s,r):"ave"===this.mergeMode?i=Pi(.5,za(s,r)):"mul"===this.mergeMode?i=Pi(s,r):null==this.mergeMode&&(i=[s,r]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){yd(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),yd(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=Gf(t.layer);if(delete t.layer,null!=t.numConstants)throw new Ap("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}jy.className="Bidirectional",Ca(jy),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(Yg||(Yg={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(Jg||(Jg={}));const Ky={};function qy(e){return Ky[e]}function Xy(e,t,n,s,r){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,i=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd;if("tensor"===a.type)return Yy(t.inputNames[a.inputIndexStart],n,s,r);if("tensors"===a.type)return t.inputNames.slice(e,i).map((e=>Yy(e,n,s,r)));const o=Yy(t.inputNames.slice(e)[0],n,s,r),l=o.dataSync();return"number"===a.type?l[0]:Q(o.shape,l)}const i=t.attrParams[e];return i&&i.value}function Yy(e,t,n,s){const[r,a]=Qy(e);if(null!=s){const e=s.getHashTableHandleByName(r);if(null!=e)return e}const i=n.currentContextIds.find((e=>!!t[Zy(r,e)]));return void 0!==i?t[Zy(r,i)][a]:void 0}function Jy(e,t){const[n,s]=Qy(e);return[Zy(n,t&&t.currentContextId),s]}function Zy(e,t){return t?`${e}-${t}`:e}function Qy(e){const t=e.split(":");return 1===t.length?[e,0]:[t[0],Number(t[t.length-1])]}function eb(e,t,n){let s=Xy("pad",e,t,n);if("explicit"===s){s=Xy("explicitPaddings",e,t,n);const r=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)r[e][0]=s[2*e],r[e][1]=s[2*e+1];return r}return s}function tb(e){return e.kept?e:Yr(e)}const nb=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],sb=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],rb=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}],ab=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],ib=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],ob=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],lb=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],ub=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],cb=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}],hb=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}],pb=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],db=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],fb=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],mb=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],gb=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],yb=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],bb=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}];class xb{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[r,a,i,o,l,u,c,f,d,h,m,g,y,b,x,w,p].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,s=[],r=[],a=[],i=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?s.push(e[t.name]):"Const"===t.op?r.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let o=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const h=Object.keys(i);h.forEach((e=>{const t=i[e];t.inputNames.forEach((e=>{const[n]=Jy(e);t.inputs.push(i[n]),i[n].children.push(t)}))})),0===Object.keys(c).length?h.forEach((e=>{const t=i[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=Jy(e),n=i[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=Jy(e),n=i[t];n&&(n.signatureKey=u[e],o.push(n))})):o=s;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:i,inputs:o,outputs:l,weights:r,placeholders:s,signature:t,functions:p};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=qy(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.substr(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const s=n.type;let r;switch(n.type){case"string":r=kb(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=kb(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":r=Rb(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Rb(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":r=Ib(e.attr,n.tfName,n.defaultValue||0),void 0===r&&n.tfDeprecatedName&&(r=Ib(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":r=Ab(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Ab(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":r=vb(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=vb(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":r=Db(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Db(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":r=Eb(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Eb(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":r=Fb(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Fb(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":r=Cb(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Cb(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":r=Sb(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Sb(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":r=$b(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=$b(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:r,type:s},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let s={};null!=t&&(s=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const r=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=Jy(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Nb(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,r.push(n),s[t]=n})),Object.keys(s).forEach((e=>{const t=s[e];t.inputNames.forEach((e=>{const[n]=Jy(e);t.inputs.push(s[n]),s[n].children.push(t)}))}));const i=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=Jy(i[e.name]),r=s[t];null!=r&&(r.defaultOutput=n,a.push(r))}));const o=this.mapArgsToSignature(e);return{nodes:s,inputs:r,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function wb(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=ue().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function kb(e,t,n,s=!1){const r=e[t];return null!=r?wb(r.s,s):n}function vb(e,t,n){const s=e[t];return s?s.b:n}function Ib(e,t,n){const s=e[t]||{},r=null!=s.i?s.i:null!=s.f?s.f:n;return"number"==typeof r?r:parseInt(r,10)}function Nb(e){switch("string"==typeof e&&(e=Yg[e]),e){case Yg.DT_FLOAT:return"float32";case Yg.DT_INT32:case Yg.DT_INT64:case Yg.DT_INT8:case Yg.DT_UINT8:return"int32";case Yg.DT_BOOL:return"bool";case Yg.DT_DOUBLE:return"float32";case Yg.DT_STRING:return"string";default:return null}}function $b(e,t,n){const s=e[t];return s&&s.func?s.func.name:n}function Cb(e,t,n){const s=e[t];return s&&s.type?Nb(s.type):n}function Sb(e,t,n){const s=e[t];return s&&s.list&&s.list.type?s.list.type.map((e=>Nb(e))):n}function Tb(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function Eb(e,t,n){const s=e[t];return s&&s.shape?Tb(s.shape):n}function Ab(e,t,n){const s=e[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function Rb(e,t,n,s=!1){const r=e[t];return r&&r.list&&r.list.s?r.list.s.map((e=>wb(e,s))):n}function Fb(e,t,n){const s=e[t];return s&&s.list&&s.list.shape?s.list.shape.map((e=>Tb(e))):n}function Db(e,t,n){const s=e[t];return s&&s.list&&s.list.b?s.list.b:n}class _b{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return Yy(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return Yy(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Ib(this.node.rawAttrs,e,t);if(null!=n.s)return kb(this.node.rawAttrs,e,t);if(null!=n.b)return vb(this.node.rawAttrs,e,t);if(null!=n.shape)return Eb(this.node.rawAttrs,e,t);if(null!=n.type)return Cb(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Ab(this.node.rawAttrs,e,t);if(null!=n.list.s)return Rb(this.node.rawAttrs,e,t);if(null!=n.list.shape)return Fb(this.node.rawAttrs,e,t);if(null!=n.list.b)return Db(this.node.rawAttrs,e,t);if(null!=n.list.type)return Sb(this.node.rawAttrs,e,t)}return t}}const Ob=hr({addN_:function(e){T(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),T(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>ur(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!D(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const s=t;return tr.runKernel(be,s)}});function Mb(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){T(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let s=0;s<e.length;s++){const r=e[s],a=t[s];T(r<0||a<0||r===a,(()=>n+` Shapes ${e} and ${t} must match`))}}}function Lb(e){return"number"!=typeof e&&!e.some((e=>e<0))}function zb(e,t,n){let s=Pb(e,n);const r=!Lb(s);if(r&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(r&&t.forEach((e=>{s=Pb(e.shape,s)})),!Lb(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function Pb(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let s=0;s<e.length;++s){const r=e[s],a=t[s];if(r>=0&&a>=0&&r!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[s]=r>=0?r:a}return n}class Bb{constructor(e,t,n,s,r,a,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=s,this.identicalElementShapes=r,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=Oa(0),Ra(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),Mb(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,Ra(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return fr([],[0].concat(this.elementShape));const n=this.readMany(e);return Mb(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Oo(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return fr([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return Mb(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),ui(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,Bo(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const s=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const r=0===n?0:t.size/n,a=[];Ea((()=>{t=ti(t,[1,n,r]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:s[n-1],0],o=[1,e[n],r];a[n]=ti($o(t,i,o),this.elementShape)}return a}));const i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,a)}}class Wb{constructor(e,t,n,s=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);Mb(t,e.shape,"TensorList shape mismatch: "),Ra(e)})),this.idTensor=Oa(0),this.maxNumElements=s,Ra(this.idTensor)}get id(){return this.idTensor.id}copy(){return new Wb([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);Mb(e,this.elementShape,"TensorList shape mismatch: ");const s=zb(this.elementShape,this.tensors,e);return Ea((()=>{const e=this.tensors.map((e=>ti(e,s)));return Oo(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=zb(this.elementShape,this.tensors,e),s=this.tensors.pop();return Mb(s.shape,e,"TensorList shape mismatch: "),ti(s,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(Mb(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Ra(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);Mb(this.tensors[e].shape,t,"TensorList shape mismatch: ");const s=zb(this.elementShape,this.tensors,t);return ti(this.tensors[e],s)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);Mb(this.elementShape,t.shape,"TensorList shape mismatch: "),Ra(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);Mb(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const s=zb(this.elementShape,this.tensors,n);return 0===e.length?fr([],[0].concat(s)):Ea((()=>{const t=e.map((e=>ti(this.tensors[e],s)));return Oo(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);Mb(this.elementShape,t,"TensorList shape mismatch: ");const n=zb(this.elementShape,this.tensors,t);return 0===this.size()?fr([],[0].concat(n)):Ea((()=>{const e=this.tensors.map((e=>ti(e,n)));return ui(e,0)}))}}const Vb=hr({maxPoolWithArgmax_:function(e,t,n,s,r=!1){const a={x:ur(e,"x","maxPoolWithArgmax")},i={filterSize:t,strides:n,pad:s,includeBatchInIndex:r},o=tr.runKernel(Kt,a,i);return{result:o[0],indexes:o[1]}}});function Ub(e,t,n){const[s,r]=Xy("fusedOps",e,t,n),a="biasadd"===s,i="prelu"===r,o="fusedbatchnorm"===s,l=Xy("numArgs",e,t,n);if(a){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(o)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const u=Xy("strides",e,t,n),c=eb(e,t,n),h=Xy("dataFormat",e,t,n).toUpperCase(),p=Xy("dilations",e,t,n),[d,f]=Xy("args",e,t,n);return{stride:u,pad:c,dataFormat:h,dilations:p,biasArg:d,preluArg:f,activationFunc:r,leakyreluAlpha:Xy("leakyreluAlpha",e,t,n)}}function Gb(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:e,stop:t,num:n};return tr.runKernel(Dt,{},s)}const Hb=hr({multinomial_:function(e,t,n,s=!1){const r=ur(e,"logits","multinomial"),a=r.size,i=r.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o={logits:1===i?ti(r,[1,-1]):r},l={numSamples:t,seed:n,normalized:s},u=tr.runKernel(Qt,o,l);return 1===i?ti(u,[u.size]):u}}),jb=async function(e){const t=ur(e,"condition","whereAsync","bool"),n=await t.data(),s=Gu(t.shape,n);return e!==t&&t.dispose(),s};function Kb(e,t,n){return{boxes:Xy("boxes",e,t,n),scores:Xy("scores",e,t,n),maxOutputSize:Xy("maxOutputSize",e,t,n),iouThreshold:Xy("iouThreshold",e,t,n),scoreThreshold:Xy("scoreThreshold",e,t,n),softNmsSigma:Xy("softNmsSigma",e,t,n)}}class qb{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=Oa(0),this.tensorMap=new Map,Ra(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Oa(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),Ea((()=>{const e=Bo(t),s=n.length,r=e.length;T(s===r,(()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${r} elements.`));for(let t=0;t<s;t++){const s=n[t],r=e[t];Ra(r),this.tensorMap.set(s,r)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return Ea((()=>{const e=[];for(let s=0;s<n.length;s++){const r=n[s],a=this.findWithDefault(r,t);e.push(a)}return Oo(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}const Xb=hr({sparseToDense_:function(e,t,n,s=0){const r=ur(e,"sparseIndices","sparseToDense","int32"),a=ur(t,"sparseValues","sparseToDense"),i=ur(s,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,s){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const r=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,a,n,i);const o={sparseIndices:r,sparseValues:a,defaultValue:i},l={outputShape:n};return tr.runKernel(Gn,o,l)}}),Yb=hr({bincount_:function(e,t,n){const s=ur(e,"x","bincount"),r=ur(t,"weights","bincount");T("int32"===s.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`)),T(n>=0,(()=>`size must be non-negative, but got ${n}.`)),T(r.size===s.size||0===r.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`));const a={x:s,weights:r},i={size:n};return tr.runKernel(_e,a,i)}}),Jb=hr({denseBincount_:function(e,t,n,s=!1){const r=ur(e,"x","denseBincount"),a=ur(t,"weights","denseBincount");T("int32"===r.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`)),T(r.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`)),T(n>=0,(()=>`size must be non-negative, but got ${n}.`)),T(a.size===r.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${a.shape}.`));const i={x:r,weights:a},o={size:n,binaryOutput:s};return tr.runKernel(Je,i,o)}}),Zb=hr({scatterND_:function(e,t,n){const s=ur(e,"indices","scatterND","int32"),r=ur(t,"updates","scatterND");bu(r,s,n);const a={indices:s,updates:r},i={shape:n};return tr.runKernel(Sn,a,i)}}),Qb=hr({gatherND_:function(e,t){const n=ur(t,"indices","gatherND","int32"),s={params:ur(e,"x","gatherND"),indices:n};return tr.runKernel(kt,s)}});function ex(e,t,n,s){const r=((e,t,n)=>{switch(e.category){case"arithmetic":return Ea((()=>((e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[za(Xy("a",e,t,n),Xy("b",e,t,n))];case"AddN":return[Ob(Xy("tensors",e,t,n))];case"FloorMod":case"Mod":return[mp(Xy("a",e,t,n),Xy("b",e,t,n))];case"Mul":return[Pi(Xy("a",e,t,n),Xy("b",e,t,n))];case"RealDiv":case"Div":return[ki(Xy("a",e,t,n),Xy("b",e,t,n))];case"DivNoNan":return[sp(Xy("a",e,t,n),Xy("b",e,t,n))];case"FloorDiv":return[wi(Xy("a",e,t,n),Xy("b",e,t,n))];case"Sub":return[Bi(Xy("a",e,t,n),Xy("b",e,t,n))];case"Minimum":return[Xi(Xy("a",e,t,n),Xy("b",e,t,n))];case"Maximum":return[ji(Xy("a",e,t,n),Xy("b",e,t,n))];case"Pow":return[Ml(Xy("a",e,t,n),Xy("b",e,t,n))];case"SquaredDifference":return[Gl(Xy("a",e,t,n),Xy("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return Ea((()=>((e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[La(Xy("x",e,t,n))];case"Acos":return[jh(Xy("x",e,t,n))];case"Acosh":return[Kh(Xy("x",e,t,n))];case"Asin":return[Xh(Xy("x",e,t,n))];case"Asinh":return[Yh(Xy("x",e,t,n))];case"Atan":return[Jh(Xy("x",e,t,n))];case"Atan2":return[Zh(Xy("x",e,t,n),Xy("y",e,t,n))];case"Atanh":return[Qh(Xy("x",e,t,n))];case"Ceil":return[ep(Xy("x",e,t,n))];case"Complex":return[pr(Xy("real",e,t,n),Xy("imag",e,t,n))];case"Cos":return[Oh(Xy("x",e,t,n))];case"Cosh":return[Lh(Xy("x",e,t,n))];case"Elu":return[vi(Xy("x",e,t,n))];case"Erf":return[ap(Xy("x",e,t,n))];case"Exp":return[Li(Xy("x",e,t,n))];case"Expm1":return[ip(Xy("x",e,t,n))];case"Floor":return[Ri(Xy("x",e,t,n))];case"Log":return[Mi(Xy("x",e,t,n))];case"Log1p":return[Hl(Xy("x",e,t,n))];case"Imag":return[jo(Xy("x",e,t,n))];case"Neg":return[io(Xy("x",e,t,n))];case"Reciprocal":return[bp(Xy("x",e,t,n))];case"Real":return[Ko(Xy("x",e,t,n))];case"Relu":return[wo(Xy("x",e,t,n))];case"Round":return[xp(Xy("x",e,t,n))];case"Selu":return[vo(Xy("x",e,t,n))];case"Sigmoid":return[No(Xy("x",e,t,n))];case"Sin":return[kc(Xy("x",e,t,n))];case"Sign":return[wp(Xy("x",e,t,n))];case"Sinh":return[Ic(Xy("x",e,t,n))];case"Softplus":return[Ro(Xy("x",e,t,n))];case"Sqrt":return[Do(Xy("x",e,t,n))];case"Square":return[ro(Xy("x",e,t,n))];case"Tanh":return[Mo(Xy("x",e,t,n))];case"Tan":return[vp(Xy("x",e,t,n))];case"ClipByValue":return[li(Xy("x",e,t,n),Xy("clipValueMin",e,t,n),Xy("clipValueMax",e,t,n))];case"Relu6":return[Qo(Xy("x",e,t,n))];case"Rsqrt":return[Mc(Yy(e.inputNames[0],t,n))];case"Prod":return[yp(Xy("x",e,t,n),Xy("axes",e,t,n))];case"LeakyRelu":return[Oi(Xy("x",e,t,n),Xy("alpha",e,t,n))];case"Prelu":return[fo(Xy("x",e,t,n),Xy("alpha",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return(async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const s=Xy("thenBranch",e,t,n),r=Xy("elseBranch",e,t,n),a=Xy("cond",e,t,n),i=Xy("args",e,t,n);return(await a.data())[0]?n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const s=Xy("body",e,t,n),r=Xy("cond",e,t,n),a=Xy("args",e,t,n),i=await n.functionMap[r].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map((e=>e.id));let l=await i[0].data();i.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()}));let u=a;for(;l[0];){const e=u;u=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await a[0].data(),a.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[tb(Xy("pred",e,t,n))];case"Switch":{const s=Xy("pred",e,t,n);let r=Xy("data",e,t,n);return r.kept||(r=tb(r)),(await s.data())[0]?[void 0,r]:[r,void 0]}case"Merge":{const s=e.inputNames.find((e=>void 0!==Yy(e,t,n)));return s?[tb(Yy(s,t,n))]:void 0}case"Enter":{const s=Xy("frameName",e,t,n),r=Xy("tensor",e,t,n);return n.enterFrame(s),[tb(r)]}case"Exit":{const s=Xy("tensor",e,t,n);return n.exitFrame(),[tb(s)]}case"NextIteration":{const s=Xy("tensor",e,t,n);return n.nextIteration(),[tb(s)]}case"TensorArrayV3":{const s=Xy("size",e,t,n),r=Xy("dtype",e,t,n),a=Xy("elementShape",e,t,n),i=Xy("dynamicSize",e,t,n),o=Xy("clearAfterRead",e,t,n),l=Xy("identicalElementShapes",e,t,n),u=Xy("name",e,t,n),c=new Bb(u,r,s,a,l,i,o);return n.addTensorArray(c),[c.idTensor,Oa(1)]}case"TensorArrayWriteV3":{const s=Xy("tensorArrayId",e,t,n),r=Xy("index",e,t,n),a=Xy("tensor",e,t,n),i=n.getTensorArray(s.id);return i.write(r,a),[i.idTensor]}case"TensorArrayReadV3":{const s=Xy("tensorArrayId",e,t,n),r=Xy("index",e,t,n);return[n.getTensorArray(s.id).read(r)]}case"TensorArrayGatherV3":{const s=Xy("tensorArrayId",e,t,n),r=Xy("indices",e,t,n),a=Xy("dtype",e,t,n);return[n.getTensorArray(s.id).gather(r,a)]}case"TensorArrayScatterV3":{const s=Xy("tensorArrayId",e,t,n),r=Xy("indices",e,t,n),a=Xy("tensor",e,t,n),i=n.getTensorArray(s.id);return i.scatter(r,a),[i.idTensor]}case"TensorArrayConcatV3":{const s=Xy("tensorArrayId",e,t,n),r=n.getTensorArray(s.id),a=Xy("dtype",e,t,n);return[r.concat(a)]}case"TensorArraySplitV3":{const s=Xy("tensorArrayId",e,t,n),r=Xy("tensor",e,t,n),a=Xy("lengths",e,t,n),i=n.getTensorArray(s.id);return i.split(a,r),[i.idTensor]}case"TensorArraySizeV3":{const s=Xy("tensorArrayId",e,t,n);return[Oa(n.getTensorArray(s.id).size(),"int32")]}case"TensorArrayCloseV3":{const s=Xy("tensorArrayId",e,t,n),r=n.getTensorArray(s.id);return r.clearAndClose(),[r.idTensor]}case"TensorListSetItem":{const s=Xy("tensorListId",e,t,n),r=Xy("index",e,t,n),a=Xy("tensor",e,t,n),i=n.getTensorList(s.id);return i.setItem(r,a),[i.idTensor]}case"TensorListGetItem":{const s=Xy("tensorListId",e,t,n),r=Xy("index",e,t,n),a=Xy("elementShape",e,t,n),i=Xy("elementDType",e,t,n);return[n.getTensorList(s.id).getItem(r,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const s=Xy("indices",e,t,n),r=function(e,t,n,s){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const r=Math.max(...t);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const a=new Wb([],n,e.dtype,s),i=Bo(e,0);return t.forEach(((e,t)=>{a.setItem(e,i[t])})),a}(Xy("tensor",e,t,n),s,Xy("elementShape",e,t,n),Xy("numElements",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const s=Xy("elementShape",e,t,n),r=Xy("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=function(e,t,n){return new Wb([],e,t,n)}(s,r,Xy(a,e,t,n));return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const s=Xy("tensorListId",e,t,n),r=Xy("indices",e,t,n),a=Xy("elementShape",e,t,n),i=Xy("elementDType",e,t,n);return[n.getTensorList(s.id).gather(r,i,a)]}case"TensorListStack":{const s=Xy("tensorListId",e,t,n),r=Xy("elementShape",e,t,n),a=Xy("elementDType",e,t,n),i=Xy("numElements",e,t,n);return[n.getTensorList(s.id).stack(r,a,i)]}case"TensorListFromTensor":{const s=function(e,t,n){const s=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);Mb(e.shape.slice(1),t,"TensorList shape mismatch: ");const r=Bo(e);return new Wb(r,t,s)}(Xy("tensor",e,t,n),Xy("elementShape",e,t,n),Xy("elementDType",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListConcat":{const s=Xy("tensorListId",e,t,n),r=n.getTensorList(s.id),a=Xy("dtype",e,t,n),i=Xy("elementShape",e,t,n);return[r.concat(a,i)]}case"TensorListPushBack":{const s=Xy("tensorListId",e,t,n),r=Xy("tensor",e,t,n),a=n.getTensorList(s.id);return a.pushBack(r),[a.idTensor]}case"TensorListPopBack":{const s=Xy("tensorListId",e,t,n),r=Xy("elementShape",e,t,n),a=Xy("elementDType",e,t,n);return[n.getTensorList(s.id).popBack(r,a)]}case"TensorListSplit":{const s=Xy("tensor",e,t,n),r=Xy("elementShape",e,t,n),a=function(e,t,n){let s=0;const r=t.map((e=>(s+=e,s)));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);const a=Pb(e.shape.slice(1),n),i=0===s?0:e.size/s,o=Ea((()=>{const n=[];e=ti(e,[1,s,i]);for(let s=0;s<t.length;++s){const o=[0,0===s?0:r[s-1],0],l=[1,t[s],i];n[s]=ti($o(e,o,l),a)}return e.dispose(),n})),l=new Wb([],n,e.dtype,t.length);for(let e=0;e<o.length;e++)l.setItem(e,o[e]);return l}(s,Xy("lengths",e,t,n),r);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"convolution":return Ea((()=>((e,t,n)=>{switch(e.op){case"Conv1D":{const s=Xy("stride",e,t,n),r=Xy("pad",e,t,n),a=Xy("dataFormat",e,t,n).toUpperCase(),i=Xy("dilation",e,t,n);return[mi(Xy("x",e,t,n),Xy("filter",e,t,n),s,r,a,i)]}case"Conv2D":{const s=Xy("strides",e,t,n),r=eb(e,t,n),a=Xy("dataFormat",e,t,n).toUpperCase(),i=Xy("dilations",e,t,n);return[fi(Xy("x",e,t,n),Xy("filter",e,t,n),[s[1],s[2]],r,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:r,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=Ub(e,t,n);return[al({x:Xy("x",e,t,n),filter:Xy("filter",e,t,n),strides:[s[1],s[2]],pad:r,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:r,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=Ub(e,t,n);return[ll({x:Xy("x",e,t,n),filter:Xy("filter",e,t,n),strides:[s[1],s[2]],pad:r,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=Xy("outputShape",e,t,n),r=Xy("strides",e,t,n),a=eb(e,t,n);return[yi(Xy("x",e,t,n),Xy("filter",e,t,n),s,[r[1],r[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=Xy("strides",e,t,n),r=eb(e,t,n),a=Xy("dilations",e,t,n),i=Xy("dataFormat",e,t,n).toUpperCase();return[xi(Xy("input",e,t,n),Xy("filter",e,t,n),[s[1],s[2]],r,i,[a[1],a[2]])]}case"Conv3D":{const s=Xy("strides",e,t,n),r=Xy("pad",e,t,n),a=Xy("dataFormat",e,t,n).toUpperCase(),i=Xy("dilations",e,t,n);return[bi(Xy("x",e,t,n),Xy("filter",e,t,n),[s[1],s[2],s[3]],r,a,[i[1],i[2],i[3]])]}case"AvgPool":{const s=Xy("strides",e,t,n),r=Xy("pad",e,t,n),a=Xy("kernelSize",e,t,n);return[ni(Xy("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r)]}case"MaxPool":{const s=Xy("strides",e,t,n),r=Xy("pad",e,t,n),a=Xy("kernelSize",e,t,n);return[Gi(Xy("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r)]}case"MaxPoolWithArgmax":{const s=Xy("strides",e,t,n),r=Xy("pad",e,t,n),a=Xy("kernelSize",e,t,n),i=Xy("includeBatchInIndex",e,t,n),{result:o,indexes:l}=Vb(Xy("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r,i);return[o,l]}case"AvgPool3D":{const s=Xy("strides",e,t,n),r=Xy("pad",e,t,n),a=Xy("kernelSize",e,t,n);return[si(Xy("x",e,t,n),[a[1],a[2],a[3]],[s[1],s[2],s[3]],r)]}case"MaxPool3D":{const s=Xy("strides",e,t,n),r=Xy("pad",e,t,n),a=Xy("kernelSize",e,t,n);return[Hi(Xy("x",e,t,n),[a[1],a[2],a[3]],[s[1],s[2],s[3]],r)]}case"Dilation2D":{const s=Xy("strides",e,t,n),r=Xy("pad",e,t,n),a=Xy("dilations",e,t,n),i=s[1],o=s[2],l=a[1],u=a[2];return[np(Xy("x",e,t,n),Xy("filter",e,t,n),[i,o],r,[l,u],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return Ea((()=>((e,t,n)=>{switch(e.op){case"Fill":{const s=Xy("shape",e,t,n),r=Xy("dtype",e,t,n);return[Ai(s,Xy("value",e,t,n),r)]}case"LinSpace":return[Gb(Xy("start",e,t,n),Xy("stop",e,t,n),Xy("num",e,t,n))];case"Multinomial":{const s=Xy("logits",e,t,n),r=Xy("numSamples",e,t,n),a=Xy("seed",e,t,n);return[Hb(s,r,a)]}case"OneHot":{const s=Xy("indices",e,t,n),r=Xy("depth",e,t,n),a=Xy("onValue",e,t,n),i=Xy("offValue",e,t,n);return[lo(s,r,a,i)]}case"Ones":return[co(Xy("shape",e,t,n),Xy("dtype",e,t,n))];case"OnesLike":return[ho(Xy("x",e,t,n))];case"RandomUniform":return[xo(Xy("shape",e,t,n),Xy("minval",e,t,n),Xy("maxval",e,t,n),Xy("dtype",e,t,n))];case"Range":return[_l(Xy("start",e,t,n),Xy("stop",e,t,n),Xy("step",e,t,n),Xy("dtype",e,t,n))];case"TruncatedNormal":{const s=Xy("shape",e,t,n),r=Xy("mean",e,t,n),a=Xy("stdDev",e,t,n),i=Xy("seed",e,t,n);return[Po(s,r,a,Xy("dtype",e,t,n),i)]}case"Zeros":return[uo(Xy("shape",e,t,n),Xy("dtype",e,t,n))];case"ZerosLike":return[Uo(Xy("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=Kb(e,t,n),u=await Kl.nonMaxSuppressionWithScoreAsync(s,r,a,i,o,l);return[u.selectedIndices,u.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=Kb(e,t,n),l=Xy("padToMaxOutputSize",e,t,n),u=await Kl.nonMaxSuppressionPaddedAsync(s,r,a,i,o,l);return[u.selectedIndices,u.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=Kb(e,t,n);return[await Kl.nonMaxSuppressionAsync(s,r,a,i,o)]}case"Where":{const s=Xr(Xy("condition",e,t,n),"bool"),r=[await jb(s)];return s.dispose(),r}case"ListDiff":return async function(e,t){const n=ur(e,"x","setdiff1d"),s=ur(t,"y","setdiff1d");T(n.dtype===s.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${s.dtype}).`)),T(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),T(1===s.rank,(()=>`y should be 1D tensor, but got y (${s.shape}).`));const r=await n.data(),a=await s.data(),i=new Set(a);let o=0;for(let e=0;e<r.length;e++)i.has(r[e])||o++;const l=new Fs([o],n.dtype),u=new Fs([o],"int32");for(let e=0,t=0;e<r.length;e++)i.has(r[e])||(l.values[t]=r[e],u.values[t]=e,t++);return[l.toTensor(),u.toTensor()]}(Xy("x",e,t,n),Xy("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return Ea((()=>((e,t,n)=>{switch(e.op){case"TopKV2":{const s=Xy("x",e,t,n),r=Xy("k",e,t,n),a=Xy("sorted",e,t,n),i=Ip(s,r,a);return[i.values,i.indices]}case"Unique":{const s=Xy("x",e,t,n),r=Np(s);return[r.values,r.indices]}case"UniqueV2":{const s=Xy("x",e,t,n),r=Xy("axis",e,t,n),a=Np(s,r);return[a.values,a.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return Ea((()=>((e,t,n)=>{switch(e.op){case"ResizeBilinear":{const s=Xy("images",e,t,n),r=Xy("size",e,t,n),a=Xy("alignCorners",e,t,n),i=Xy("halfPixelCenters",e,t,n);return[Kl.resizeBilinear(s,[r[0],r[1]],a,i)]}case"ResizeNearestNeighbor":{const s=Xy("images",e,t,n),r=Xy("size",e,t,n),a=Xy("alignCorners",e,t,n),i=Xy("halfPixelCenters",e,t,n);return[Kl.resizeNearestNeighbor(s,[r[0],r[1]],a,i)]}case"CropAndResize":{const s=Xy("image",e,t,n),r=Xy("boxes",e,t,n),a=Xy("boxInd",e,t,n),i=Xy("cropSize",e,t,n),o=Xy("method",e,t,n),l=Xy("extrapolationValue",e,t,n);return[Kl.cropAndResize(s,r,a,i,o,l)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return Ea((()=>((e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=Xy("default",e,t,n);return[Yy(e.name,t,n)||s];case"Placeholder":return[Yy(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[tb(Xy("x",e,t,n))];case"IdentityN":return Xy("x",e,t,n).map((e=>tb(e)));case"Shape":return[Lo(Xy("x",e,t,n).shape,"int32")];case"ShapeN":return Xy("x",e,t,n).map((e=>Lo(e.shape)));case"Size":return[Oa(Xy("x",e,t,n).size,"int32")];case"Rank":return[Oa(Xy("x",e,t,n).rank,"int32")];case"NoOp":return[Oa(1)];case"Print":const r=Xy("x",e,t,n),a=Xy("data",e,t,n),i=Xy("message",e,t,n),o=Xy("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<a.length;e++)console.log(Array.prototype.slice.call(a[e].dataSync()).slice(0,o));return[r];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return Ea((()=>((e,t,n)=>{switch(e.op){case"Equal":return[Ci(Xy("a",e,t,n),Xy("b",e,t,n))];case"NotEqual":return[oo(Xy("a",e,t,n),Xy("b",e,t,n))];case"Greater":return[Di(Xy("a",e,t,n),Xy("b",e,t,n))];case"GreaterEqual":return[_i(Xy("a",e,t,n),Xy("b",e,t,n))];case"Less":return[th(Xy("a",e,t,n),Xy("b",e,t,n))];case"LessEqual":return[Dl(Xy("a",e,t,n),Xy("b",e,t,n))];case"LogicalAnd":return[Ui(Xy("a",e,t,n),Xy("b",e,t,n))];case"LogicalNot":return[Ah(Xy("a",e,t,n))];case"LogicalOr":return[pp(Xy("a",e,t,n),Xy("b",e,t,n))];case"Select":case"SelectV2":return[Vo(Xy("condition",e,t,n),Xy("a",e,t,n),Xy("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return Ea((()=>((e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[ul(Xy("a",e,t,n),Xy("b",e,t,n),Xy("transposeA",e,t,n),Xy("transposeB",e,t,n))];case"Transpose":return[Go(Xy("x",e,t,n),Xy("perm",e,t,n))];case"_FusedMatMul":const[s,r]=Xy("fusedOps",e,t,n),a="biasadd"===s,i="prelu"===r,o=Xy("numArgs",e,t,n),l=Xy("leakyreluAlpha",e,t,n);if(a){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[u,c]=Xy("args",e,t,n);return[cl({a:Xy("a",e,t,n),b:Xy("b",e,t,n),transposeA:Xy("transposeA",e,t,n),transposeB:Xy("transposeB",e,t,n),bias:u,activation:r,preluActivationWeights:c,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return Ea((()=>((e,t,n)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[ri(Xy("x",e,t,n),Xy("mean",e,t,n),Xy("variance",e,t,n),Xy("offset",e,t,n),Xy("scale",e,t,n),Xy("epsilon",e,t,n))];case"LRN":return[cp(Xy("x",e,t,n),Xy("radius",e,t,n),Xy("bias",e,t,n),Xy("alpha",e,t,n),Xy("beta",e,t,n))];case"Softmax":return[Ao(Xy("x",e,t,n))];case"LogSoftmax":return[Vi(Xy("x",e,t,n))];case"SparseToDense":return[Xb(Xy("sparseIndices",e,t,n),Xy("outputShape",e,t,n),Xy("sparseValues",e,t,n),Xy("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return Ea((()=>((e,t,n)=>{switch(e.op){case"Max":{const s=Xy("axis",e,t,n),r=Xy("keepDims",e,t,n);return[zi(Xy("x",e,t,n),s,r)]}case"Mean":{const s=Xy("axis",e,t,n),r=Xy("keepDims",e,t,n);return[Ki(Xy("x",e,t,n),s,r)]}case"Min":{const s=Xy("axis",e,t,n),r=Xy("keepDims",e,t,n);return[qi(Xy("x",e,t,n),s,r)]}case"Sum":{const s=Xy("axis",e,t,n),r=Xy("keepDims",e,t,n);return[Wi(Xy("x",e,t,n),s,r)]}case"All":{const s=Xy("axis",e,t,n),r=Xy("keepDims",e,t,n);return[Pa(Xy("x",e,t,n),s,r)]}case"Any":{const s=Xy("axis",e,t,n),r=Xy("keepDims",e,t,n);return[Ba(Xy("x",e,t,n),s,r)]}case"ArgMax":{const s=Xy("axis",e,t,n);return[Wa(Xy("x",e,t,n),s)]}case"ArgMin":{const s=Xy("axis",e,t,n);return[qh(Xy("x",e,t,n),s)]}case"Prod":{const s=Xy("axis",e,t,n),r=Xy("keepDims",e,t,n);return[yp(Xy("x",e,t,n),s,r)]}case"Cumsum":{const s=Xy("axis",e,t,n),r=Xy("exclusive",e,t,n),a=Xy("reverse",e,t,n);return[$c(Xy("x",e,t,n),s,r,a)]}case"Bincount":const s=Xy("x",e,t,n),r=Xy("weights",e,t,n),a=Xy("size",e,t,n);return[Yb(s,r,a)];case"DenseBincount":{const s=Xy("x",e,t,n),r=Xy("weights",e,t,n),a=Xy("size",e,t,n),i=Xy("binaryOutput",e,t,n);return[Jb(s,r,a,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return Ea((()=>((e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=Xy("n",e,t,n),r=Xy("axis",e,t,n);let a=Xy("tensors",e,t,n);return a=a.slice(0,s),[ui(a,r)]}case"Gather":{const s=Xy("x",e,t,n),r=Xy("indices",e,t,n);return[Fi(s,Xr(r,"int32"),0)]}case"GatherV2":{const s=Xy("axis",e,t,n),r=Xy("batchDims",e,t,n),a=Xy("x",e,t,n),i=Xy("indices",e,t,n);return[Fi(a,Xr(i,"int32"),s,r)]}case"Reverse":{const s=Xy("dims",e,t,n),r=[];for(let e=0;e<s.length;e++)s[e]&&r.push(e);const a=Xy("x",e,t,n);return[ko(a,r)]}case"ReverseV2":{const s=Xy("axis",e,t,n),r=Xy("x",e,t,n);return[ko(r,s)]}case"Slice":{const s=Xy("begin",e,t,n),r=Xy("size",e,t,n);return[$o(Xy("x",e,t,n),s,r)]}case"StridedSlice":{const s=Xy("begin",e,t,n),r=Xy("end",e,t,n),a=Xy("strides",e,t,n),i=Xy("beginMask",e,t,n),o=Xy("endMask",e,t,n),l=Xy("ellipsisMask",e,t,n),u=Xy("newAxisMask",e,t,n),c=Xy("shrinkAxisMask",e,t,n),h=Xy("x",e,t,n);return[kp(h,s,r,a,i,o,l,u,c)]}case"Pack":return Ea((()=>{const s=Xy("axis",e,t,n),r=Xy("tensors",e,t,n),a=r[0].shape,i=_o(r[0]).shape,o=r.map((e=>{const t=D(e.shape,a);if(!t&&!D(_o(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:ti(e,a)}));return[Oo(o,s)]}));case"Unpack":{const s=Xy("axis",e,t,n),r=Xy("tensor",e,t,n);return Bo(r,s)}case"Tile":{const s=Xy("reps",e,t,n);return[Ti(Xy("x",e,t,n),s)]}case"Split":case"SplitV":{const s=Xy("axis",e,t,n),r=Xy("numOrSizeSplits",e,t,n),a=Xy("x",e,t,n);return Fo(a,r,s)}case"ScatterNd":{const s=Xy("indices",e,t,n),r=Xy("values",e,t,n),a=Xy("shape",e,t,n);return[Zb(s,r,a)]}case"GatherNd":{const s=Xy("x",e,t,n),r=Xy("indices",e,t,n);return[Qb(s,r)]}case"SparseToDense":{const s=Xy("sparseIndices",e,t,n),r=Xy("outputShape",e,t,n),a=Xy("sparseValues",e,t,n),i=Xy("defaultValue",e,t,n);return[Xb(s,a,r,a.dtype===i.dtype?i:Xr(i,a.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return Ea((()=>((e,t,n)=>{switch(e.op){case"FFT":return[qo(Xy("x",e,t,n))];case"IFFT":return[Yo(Xy("x",e,t,n))];case"RFFT":return[Xo(Xy("x",e,t,n))];case"IRFFT":return[Jo(Xy("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return Ea((()=>((e,t,n)=>{switch(e.op){case"Cast":return[Xr(Xy("x",e,t,n),Xy("dtype",e,t,n))];case"ExpandDims":{const s=Xy("axis",e,t,n);return[Si(Xy("x",e,t,n),s)]}case"Squeeze":{const s=Xy("axis",e,t,n);return[_o(Xy("x",e,t,n),s)]}case"Reshape":return[ti(Xy("x",e,t,n),Xy("shape",e,t,n))];case"MirrorPad":return[fp(Xy("x",e,t,n),Xy("padding",e,t,n),Xy("mode",e,t,n))];case"PadV2":case"Pad":return[po(Xy("x",e,t,n),Xy("padding",e,t,n),Xy("constantValue",e,t,n))];case"SpaceToBatchND":{const s=Xy("blockShape",e,t,n),r=Xy("paddings",e,t,n);return[lc(Xy("x",e,t,n),s,r)]}case"BatchToSpaceND":{const s=Xy("blockShape",e,t,n),r=Xy("crops",e,t,n);return[Vh(Xy("x",e,t,n),s,r)]}case"DepthToSpace":{const s=Xy("blockSize",e,t,n),r=Xy("dataFormat",e,t,n).toUpperCase();return[tp(Xy("x",e,t,n),s,r)]}case"BroadcastTo":return[Wo(Xy("x",e,t,n),Xy("shape",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,s)=>{switch(e.op){case"HashTable":case"HashTableV2":{const r=Xy("keyDType",e,t,n),a=Xy("valueDType",e,t,n),i=new qb(r,a);return s.addHashTable(e.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const r=Xy("tableHandle",e,t,n,s),a=Xy("keys",e,t,n),i=Xy("values",e,t,n),o=s.getHashTableById(r.id);return[await o.import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const r=Xy("tableHandle",e,t,n,s),a=Xy("keys",e,t,n),i=Xy("defaultValue",e,t,n),o=s.getHashTableById(r.id);return[await o.find(a,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const r=Xy("tableHandle",e,t,n,s);return[s.getHashTableById(r.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,s);case"custom":const r=qy(e.op);if(r&&r.customExecutor)return r.customExecutor(new _b(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return ie(r)?r.then((e=>[].concat(e))):[].concat(r)}class tx{constructor(e={},t={},n={},s={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function nx(e,t,n,s){const r=new Set,a=[];let i=null,o=null;const l=new Set,u=Object.keys(e).map((e=>Qy(e)[0]));let c=[];null!=s&&(c=s.map((e=>Qy(e.name)[0])));const h=[...t];for(;h.length>0;){const e=h.pop();(ix(e)||ox(e)||lx(e))&&null==i&&(i=e,o=i.children.map((e=>e.name)).filter((e=>r.has(e)))),r.add(e.name),null==n[e.name]&&-1===u.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),h.push(e))})):a.push(e.name))}return{inputs:e,outputs:t,usedNodes:r,missingInputs:a,dynamicNode:i,syncInputs:o}}const sx=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],rx=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],ax=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function ix(e){return sx.indexOf(e.op)>=0}function ox(e){return rx.indexOf(e.op)>=0}function lx(e){return ax.indexOf(e.op)>=0}class ux{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new ux(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),s=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+s.join(this.SEPERATOR)}compile(e,t){const n=nx(e,t,this.weightMap,this._initNodes),{missingInputs:s,dynamicNode:r,syncInputs:a}=n;if(null!=r)throw new Error(`This execution contains the node '${r.name}', which has the dynamic op '${r.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(s.length>0){const n=t.map((e=>e.name)),r=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${r}]. Missing the following inputs: [${s}]`)}return function(e,t,n){const{usedNodes:s,inputs:r}=n,a=[],i=Object.keys(r).map((e=>Qy(e)[0])).map((t=>e.nodes[t])),o=e.initNodes;i.forEach((e=>{s.has(e.name)&&a.push(e)})),e.weights.forEach((e=>{s.has(e.name)&&a.push(e)})),null!=o&&o.forEach((e=>{s.has(e.name)&&a.push(e)}));const l=new Set,u=[];for(;a.length>0;){const e=a.pop();l.add(e.name),t[e.name]||u.push(e),e.children.forEach((e=>{!l.has(e.name)&&s.has(e.name)&&e.inputs.every((e=>l.has(e.name)))&&a.push(e)}))}return u}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const s=n.map((e=>this.graph.nodes[Qy(e)[0]])),r=t.map((e=>Qy(e)[0]));let a=r.map((e=>this.graph.nodes[e]));0===a.length&&(a=this._outputs);const i=this.getCompilationKey(s,a);let o=this.compiledMap.get(i);null==o&&(o=this.compile(e,a),this.compiledMap.set(i,o));const l={},u={};return Ea((()=>{const n=new tx(this.weightMap,l,u,this.functionExecutorMap),s=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=Qy(t),a=[];a[r]=e[t],s[n]=a}));const a=this.getFrozenTensorIds(s),i={};for(let e=0;e<o.length;e++){const t=o[e];if(!s[t.name]){const e=ex(t,s,n,this._resourceManager);if(ie(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);s[t.name]=e,this.checkTensorForDisposal(t.name,t,s,n,a,r,i)}}return null==this.parent&&n.dispose(a),t.map((e=>Yy(e,s,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,s,r,a,i){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(i[e.id]=(i[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const t=function(e,t,n){return t[Zy(e,n.currentContextId)]}(e.name,n,s);null!=t&&t.forEach((e=>{if(e&&!r.has(e.id)){const t=i[e.id];1===t?(e.dispose(),delete i[e.id]):null!=t&&i[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}async _executeAsync(e,t,n=!1,s={},r={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));const a=new tx(this.weightMap,s,r,this.functionExecutorMap),i=await this.executeWithControlFlow(e,a,t,n),o=t.map((e=>Yy(e,i,a))),l=o.map((e=>e.id)),u=Object.keys(e).map((t=>e[t].id)),c=new Set([...l,...u,...this.weightIds]);return Object.keys(i).forEach((e=>{i[e].forEach((e=>{!e||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&a.dispose(c),o}async executeFunctionAsync(e,t,n){const s=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(s,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,s){const r=Object.keys(e),a=r.map((e=>this.graph.nodes[Qy(e)[0]])),i=n.map((e=>Qy(e)[0]));let o=i.map((e=>this.graph.nodes[e]));0===o.length&&(o=this._outputs);const{usedNodes:l,missingInputs:u,dynamicNode:c,syncInputs:h}=nx(e,o,this.weightMap,this._initNodes),p=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=Qy(t),r=[];r[s]=e[t],d[n]=r}));const f={},m=this.getFrozenTensorIds(d),g={};for(;p.length>0;){const e=this.processStack(a,p,t,d,g,m,i,f,l);await Promise.all(e)}null!=c||s||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter((e=>!ix(e)&&!Yy(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${r}]. Consider providing the following inputs: [${u}]. ${e}`)}return d}processStack(e,t,n,s,r,a,i,o,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&Xy("isConstant",e.node,s,n)&&([c]=Jy(e.node.name,n)),null==s[e.node.name]){const h=ex(e.node,s,n,this._resourceManager);c||([c]=Jy(e.node.name,n));const p=n.currentContext;ie(h)?u.push(h.then((u=>(s[c]=u,n.currentContext=p,this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l),u)))):(s[c]=h,this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l))}else this.processChildNodes(e.node,t,n,s,r,l)}return u}processChildNodes(e,t,n,s,r,a){e.children.forEach((e=>{const[i]=Jy(e.name,n);!r[i]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!Yy(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!Yy(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[s]=Qy(t),r=this.graph.nodes[s];if(r.attrParams.shape&&r.attrParams.shape.value){const e=r.attrParams.shape.value;T(e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t)),(()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}r.attrParams.dtype&&r.attrParams.dtype.value&&T(n.dtype===r.attrParams.dtype.value,(()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]?t[this._signature.inputs[n].name]=e[n]:t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=Qy(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]?this._signature.outputs[e].name:e),{})}checkOutputs(e){e.forEach((e=>{const[t]=Qy(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class cx{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class hx{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new cx}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=aa(e,this.loadOptions);else{const s=(t=e,n=this.loadOptions,Ir.getLoadHandlers(t,n));if(0===s.length)s.push(aa(e,this.loadOptions));else if(s.length>1)throw new Error(`Found more than one (${s.length}) load handlers for URL '${[e]}'`);this.handler=s[0]}var t,n}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const s=function(e,t){const n={};let s,r=0;for(const a of t){const t=a.name,i=a.dtype,o=a.shape,l=F(o);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=mr[n.dtype],c=e.slice(r,r+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===s&&(s=vr()),u=s(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=Math.round(t*n.scale+n.min)}}r+=l*o}else if("string"===i){const t=F(a.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(r,r+4))[0];r+=4;const n=new Uint8Array(e.slice(r,r+t));u.push(n),r+=t}}else{const s=mr[i],a=e.slice(r,r+l*s);if("float32"===i)u=new Float32Array(a);else if("int32"===i)u=new Int32Array(a);else if("bool"===i)u=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{u=new Float32Array(a);const e=new Float32Array(u.length/2),s=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],s[t]=u[2*t+1];const r=fr(e,o,"float32"),i=fr(s,o,"float32");n[t]=pr(r,i),r.dispose(),i.dispose()}}r+=l*s}"complex64"!==i&&(n[t]=fr(u,o,i))}return n}(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new ux(xb.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=xb.Instance.transformGraph(e.modelInitializer);this.initializer=new ux(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=Nr(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof Ms||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,s)=>(t[n]=e[s],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}var px,dx,fx=n(377);function mx(e,t,n=new Map,s=new Set){if(null==e)return null;if(s.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(r.recurse){if(xx(e)){const r=Array.isArray(e)?[]:{};s.add(e);for(const a in e){const i=mx(e[a],t,n,s);r[a]=i}return s.delete(e),r}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,r.value),r.value}function gx(e,t=bx){return yx(e,t)}function yx(e,t,n=new Set){const s=e[0];if(n.has(s))throw new Error("Circular references are not supported.");const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(r.recurse){if(xx(s)){const r=Array.isArray(s)?[]:{};n.add(s);for(const a in s){const s=yx(e.map((e=>e[a])),t,n);r[a]=s}return n.delete(s),r}throw new Error(`Can't recurse into non-iterable type: ${s}`)}return r.value}function bx(e){return null===e?null:xx(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function xx(e){return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof Ms))}function wx(e){return mx(e,kx)}function kx(e){return e instanceof Ms?{value:e.clone(),recurse:!1}:xx(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class vx{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class Ix extends vx{constructor(){super(Ix.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}Ix.INITIAL_CAPACITY=32;class Nx{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new Dx(this,e)}filter(e){return new Rx(this,e)}map(e){return new Fx(this,e)}mapAsync(e){return new _x(this,e)}serialMapAsync(e){return new _x(this,e).serial()}flatmap(e){return new Mx(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new Ax(this,e,t)}columnMajorBatch(e,t=!0,n=bx){return this.rowMajorBatch(e,t).map((e=>gx(e,n)))}concatenate(e,t){return new Lx(new $x([this,e]),t)}take(e){return e<0||null==e?this:new Ex(this,e)}skip(e){return e<0||null==e?this:new Tx(this,e)}prefetch(e){return new zx(this,e)}shuffle(e,t){return new Px(this,e,t)}serial(){return new Sx(this)}}class $x extends Nx{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:wx(e),done:!1}}}class Cx extends Nx{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class Sx extends Nx{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class Tx extends Nx{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;Aa(e.value)}return this.upstream.next()}}class Ex extends Nx{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class Ax extends Nx{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class Rx extends Nx{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;Aa(e.value)}}}class Fx extends Nx{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Xs(e.value),n=this.transform(e.value),s=Xs(n);for(const e of t)qs(e,s)||e.dispose();return{value:n,done:!1}}}class Dx extends Nx{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class _x extends Nx{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Xs(e.value),n=await this.transform(e.value),s=Xs(n);for(const e of t)qs(e,s)||e.dispose();return{value:n,done:!1}}}class Ox extends Nx{constructor(){super(),this.outputQueue=new Ix,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class Mx extends Ox{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=Xs(e.value),n=this.transform(e.value),s=Xs(n);this.outputQueue.pushAll(n);for(const e of t)qs(e,s)||e.dispose();return!0}}class Lx extends Nx{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}(dx=px||(px={}))[dx.FAIL=0]="FAIL",dx[dx.SHORTEST=1]="SHORTEST",dx[dx.LONGEST=2]="LONGEST";class zx extends Nx{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new vx(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class Px extends zx{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=fx.alea(n||bs().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class Bx{constructor(){this.size=null}batch(e,t=!0){const n=this;let s;return T(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),s=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),Wx((async()=>(await n.iterator()).columnMajorBatch(e,t,Vx)),s)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,Wx((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,Wx((async()=>(await t.iterator()).filter((t=>Ea((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return Wx((async()=>(await t.iterator()).map((t=>Ea((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return Wx((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return Wx((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,Wx((async()=>{return n=(r=async()=>({value:await t.iterator(),done:!1}),new Cx(r)).take(e),new Lx(n,s);var n,s,r}),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,Wx((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const s=this,r=fx.alea(t||bs().toString());return Wx((async()=>{let t=r.int32();return n&&(t+=r.int32()),(await s.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,Wx((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function Wx(e,t=null){return new class extends Bx{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function Vx(e){if(null===e)return null;return null==(t=e[0])||null===(n=t)||"object"!=typeof n&&"function"!=typeof n||Array.isArray(t)||"object"==typeof t&&t instanceof Ms||G(t)?{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof Ms?Oo(e):fr(e)}(e),recurse:!1}:{value:null,recurse:!0};var t,n}function Ux(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&T("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}Bx.MAX_BUFFER_SIZE=1e4,Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");const Gx=Gu;class Hx extends I{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new v(this,Sa())}nextDataId(){return Hx.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,ue().get("IS_NODE")&&Tu("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&j(n[0])){const r=n.map((e=>xs(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,s,r){this.data.set(e,{values:t,dtype:s,refCount:r})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);return"complex64"===t?Au(this.readSync(n.real.dataId),this.readSync(n.imag.dataId)):this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>ws(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return qr(e.shape,e.dtype,n)}makeOutput(e,t,n){const s=this.write(e,t,n);return Sa().makeTensorFromDataId(s,t,n,this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=bs();return e(),{kernelMs:bs()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Ux([e],"where");const t=this.readSync(e.dataId);return Gx(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function jx(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if(Ux(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=F(i.shape),c=n||i.dtype,h=V(c,u);for(let e=0;e<u;++e)h[e]=t(l[e],r);return o.makeTensorInfo(i.shape,c,h)}}function Kx(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if(Ux(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=n||i.dtype,c=t(l,u,r);return o.makeTensorInfo(i.shape,u,c)}}Hx.nextDataId=0,Da("cpu",(()=>new Hx),1);const qx=jx(ot,(e=>e>=0?e:Math.exp(e)-1)),Xx={kernelName:ot,backendName:"cpu",kernelFunc:qx};function Yx(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const Jx={kernelName:Nt,backendName:"cpu",kernelFunc:Yx};function Zx(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s;Ux([r],"leakyRelu");const i=F(r.shape),o=n.data.get(r.dataId).values,l=W("float32",i);for(let e=0;e<o.length;e++)l[e]=o[e]<0?a*o[e]:o[e];return n.makeTensorInfo(r.shape,"float32",l)}const Qx={kernelName:At,backendName:"cpu",kernelFunc:Zx};function ew(e){return(t,n,s,r,a)=>{const i=$i(t,n),o=i.length,l=J(i),u=W(a,F(i)),c=t.length,h=n.length,p=J(t),d=J(n),f=Ii(t,i),m=Ii(n,i);if(f.length+m.length===0)for(let t=0;t<u.length;++t)u[t]=e(s[t%s.length],r[t%r.length]);else for(let t=0;t<u.length;++t){const n=ae(t,o,l),a=n.slice(-c);f.forEach((e=>a[e]=0));const i=re(a,c,p),g=n.slice(-h);m.forEach((e=>g[e]=0));const y=re(g,h,d);u[t]=e(s[i],r[y])}return[u,i]}}const tw=ew(((e,t)=>e<0?t*e:e));function nw(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t;Ux([s,r],"prelu");const a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,[o,l]=tw(s.shape,r.shape,a,i,s.dtype);return n.makeTensorInfo(l,s.dtype,o)}const sw={kernelName:pn,backendName:"cpu",kernelFunc:nw},rw=jx(yn,(e=>Math.max(0,e))),aw={kernelName:yn,backendName:"cpu",kernelFunc:rw},iw=jx(In,(e=>Math.min(Math.max(0,e),6))),ow={kernelName:In,backendName:"cpu",kernelFunc:iw};function lw(e,t,n,s,r){if("linear"===n)return Yx({inputs:{x:t},backend:e});if("relu"===n)return rw({inputs:{x:t},backend:e});if("elu"===n)return qx({inputs:{x:t},backend:e});if("relu6"===n)return iw({inputs:{x:t},backend:e});if("prelu"===n)return nw({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return Zx({inputs:{x:t},backend:e,attrs:{alpha:r}});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function uw(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",a),imag:n.makeTensorInfo(r.shape,"float32",i)},o}const cw={kernelName:ze,backendName:"cpu",kernelFunc:uw};function hw(e,t,n="float32"){if("complex64"===n)return uw({inputs:{real:hw(e,t,"float32"),imag:hw(e,t,"float32")},backend:e});const s=te(F(t),n);return e.makeTensorInfo(t,n,s)}function pw(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.real,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const dw={kernelName:mn,backendName:"cpu",kernelFunc:pw};function fw(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return Yx({inputs:{x:r},backend:n});const e=hw(n,r.shape,r.dtype),t=fw({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),s=uw({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===r.dtype){const e=pw({inputs:{input:r},backend:n}),t=fw({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!U(r.dtype,a)){const e=Yx({inputs:{x:r},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}if("int32"===a){const e=n.data.get(r.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(r.shape,"int32",t)}if("bool"===a){const e=n.data.get(r.dataId).values,t=ys([0],r.dtype),[s,a]=ew(((e,t)=>e!==t?1:0))(r.shape,[],e,t,"bool");return n.makeTensorInfo(a,"bool",s)}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${a}`)}const mw={kernelName:Oe,backendName:"cpu",kernelFunc:fw};function gw(e,t,n,s){return null==n?({inputs:n,backend:r})=>{const{a,b:i}=n,o=r;Ux([a,i],e);const l=o.data.get(a.dataId).values,u=o.data.get(i.dataId).values,c=s||a.dtype,[h,p]=t(a.shape,i.shape,l,u,c);return o.makeTensorInfo(p,c,h)}:({inputs:e,backend:r})=>{const{a,b:i}=e,o=r;if("complex64"===a.dtype||"complex64"===i.dtype){const e=fw({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),s=t.complexTensorInfos.real,r=t.complexTensorInfos.imag,l=o.data.get(s.dataId).values,u=o.data.get(r.dataId).values,c=fw({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=n(a.shape,i.shape,l,u,f,m),x=o.makeTensorInfo(b,"float32",g),w=o.makeTensorInfo(b,"float32",y),k=uw({inputs:{real:x,imag:w},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),k}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,r=s||a.dtype,[l,u]=t(a.shape,i.shape,e,n,r);return o.makeTensorInfo(u,r,l)}}}function yw(e){return(t,n,s,r,a,i)=>{const o=$i(t,n),l=F(o),u=o.length,c=J(o),h=W("float32",l),p=W("float32",l),d=Ii(t,o),f=Ii(n,o),m=Au(s,r),g=Au(a,i),y=t.length,b=J(t),x=n.length,w=J(n);if(d.length+f.length===0)for(let t=0;t<h.length;t++){const n=t%m.length,s=t%g.length,r=e(m[2*n],m[2*n+1],g[2*s],g[2*s+1]);h[t]=r.real,p[t]=r.imag}else for(let t=0;t<h.length;t++){const n=ae(t,u,c),s=n.slice(-y);d.forEach((e=>s[e]=0));const r=re(s,y,b),a=n.slice(-x);f.forEach((e=>a[e]=0));const i=re(a,x,w),o=e(m[2*r],m[2*r+1],g[2*i],g[2*i+1]);h[t]=o.real,p[t]=o.imag}return[h,p,o]}}const bw=ew(((e,t)=>e+t)),xw=yw(((e,t,n,s)=>({real:e+n,imag:t+s}))),ww=gw(ye,bw,xw),kw={kernelName:ye,backendName:"cpu",kernelFunc:ww};function vw(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=F(r.shape),o=z(a,i),l=F(o);T(i===l,(()=>`The new shape (${o}) has ${l} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(r.dataId);const u=n.data.get(r.dataId);if(null!=u.complexTensorInfos){const e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:r.dataId,shape:o,dtype:r.dtype}}const Iw={kernelName:bn,backendName:"cpu",kernelFunc:vw};function Nw(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;Ux([r,a],"matMul");const l=r.shape.length,u=a.shape.length,c=i?r.shape[l-2]:r.shape[l-1],h=o?a.shape[u-1]:a.shape[u-2],p=i?r.shape[l-1]:r.shape[l-2],d=o?a.shape[u-2]:a.shape[u-1],f=r.shape.slice(0,-2),m=a.shape.slice(0,-2),g=F(f),y=F(m);T(l>=2&&u>=2&&(g===y||1===g||1===y),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${f}) and (${m}).`));const b=(g>y?r.shape.slice(0,-2):a.shape.slice(0,-2)).concat([p,d]);T(c===h,(()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`));const x=o?[y,d,h]:[y,h,d],w=vw({inputs:{x:r},backend:n,attrs:{shape:i?[g,c,p]:[g,p,c]}}),k=vw({inputs:{x:a},backend:n,attrs:{shape:x}}),v=i?w.shape[1]:w.shape[2],I=i?w.shape[2]:w.shape[1],N=o?k.shape[1]:k.shape[2],$=Math.max(g,y),C=n.data.get(w.dataId).values,S=n.data.get(k.dataId).values,E=J(w.shape),A=J(k.shape),[R,D,_]=i?[E[0],1,E[1]]:[E[0],E[1],1],[O,M,L]=o?[1,A[1],A[0]]:[A[1],1,A[0]],z=I*N,P=qr([$,I,N],w.dtype),B=P.values,W=n.blockSize;for(let e=0;e<$;e++)for(let t=0;t<I;t+=W)for(let n=0;n<N;n+=W)for(let s=0;s<v;s+=W){const r=Math.min(t+W,I),a=Math.min(n+W,N),i=Math.min(s+W,v);for(let o=t;o<r;o++)for(let t=n;t<a;t++){let n=0;for(let r=s;r<i;r++){const s=Math.min(e,g-1)*R,a=Math.min(e,y-1)*L;n+=C[s+o*D+r*_]*S[r*O+t*M+a]}B[e*z+(o*N+t)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),n.makeTensorInfo(b,P.dtype,P.values)}const $w={kernelName:Fe,backendName:"cpu",kernelFunc:Nw},Cw={kernelName:as,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let p,d,f;const m=[];p=Nw({inputs:{a:r,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(d=ww({inputs:{a:p,b:i},backend:n}),m.push(p),p=d),c&&(f=lw(n,p,c,o,h),m.push(p),p=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return p}};function Sw(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const Tw={kernelName:fe,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;Ux(t,"abs");let s=new Float32Array(F(t.shape));return s=Sw(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,"float32")}},Ew=jx(me,(e=>Math.acos(e))),Aw={kernelName:me,backendName:"cpu",kernelFunc:Ew},Rw=jx(ge,(e=>Math.acosh(e))),Fw={kernelName:ge,backendName:"cpu",kernelFunc:Rw},Dw={kernelName:be,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;Ux(t,"addN");const r=s.map((e=>n.data.get(e.dataId).values)),a=qr(s[0].shape,s[0].dtype),i=a.values;for(let e=0;e<s.length;e++){const t=r[e];for(let e=0;e<i.length;e++)i[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};function _w(e,t,n,s,r){const a=t.length,i=F(t),o=J(t),l=J(r),u=W(n,F(r));for(let t=0;t<i;++t){const n=ae(t,a,o),r=new Array(n.length);for(let e=0;e<r.length;e++)r[e]=n[s[e]];u[re(r,a,l)]=e[t]}return u}function Ow(e){const{inputs:t,attrs:n,backend:s}=e,{x:r}=t,{perm:a}=n;Ux(r,"transpose");const i=r.shape.length,o=new Array(i);for(let e=0;e<o.length;e++)o[e]=r.shape[a[e]];const l=_w(s.data.get(r.dataId).values,r.shape,r.dtype,a,o);return{dataId:s.write(l,o,r.dtype),shape:o,dtype:r.dtype}}const Mw={kernelName:Jn,backendName:"cpu",kernelFunc:Ow},Lw={kernelName:xe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;Ux(r,"all");const o=P(a,r.shape);let l=o;const u=to(l,r.shape.length);let c=r;null!=u&&(c=Ow({inputs:{x:r},backend:n,attrs:{perm:u}}),l=so(l.length,r.shape.length)),eo("all",l,c.shape.length);const[h,p]=Zi(c.shape,l),d=F(p),f=te(F(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];n=n&&s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=vw({inputs:{x:g},backend:n,attrs:{shape:Qi(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},zw={kernelName:we,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;Ux(r,"any");const o=P(a,r.shape);let l=o;const u=to(l,r.shape.length);let c=r;null!=u&&(c=Ow({inputs:{x:r},backend:n,attrs:{perm:u}}),l=so(l.length,r.shape.length)),eo("any",l,c.shape.length);const[h,p]=Zi(c.shape,l),d=F(p),f=te(F(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];n=n||s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=vw({inputs:{x:g},backend:n,attrs:{shape:Qi(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},Pw={kernelName:ke,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;Ux(r,"argMax");let i=P(a,r.shape);const o=to(i,r.shape.length);let l=r;const u=[];null!=o&&(l=Ow({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=so(i.length,l.shape.length)),i=[i[0]],eo("argMax",i,l.shape.length);const[c,h]=Zi(l.shape,i),p=te(F(c),"int32"),d=F(h),f=n.data.get(l.dataId).values;for(let e=0;e<p.length;++e){const t=e*d;let n=f[t],s=0;for(let e=0;e<d;++e){const r=f[t+e];r>n&&(n=r,s=e)}p[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",p)}},Bw={kernelName:ve,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;Ux(r,"argMin");let i=P(a,r.shape);const o=to(i,r.shape.length);let l=r;const u=[];null!=o&&(l=Ow({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=so(i.length,l.shape.length)),i=[i[0]],eo("argMin",i,l.shape.length);const[c,h]=Zi(l.shape,i),p=te(F(c),"int32"),d=F(h),f=n.data.get(l.dataId).values;for(let e=0;e<p.length;++e){const t=e*d;let n=f[t],s=0;for(let e=0;e<d;++e){const r=f[t+e];r<n&&(n=r,s=e)}p[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",p)}},Ww=jx(Ie,(e=>Math.asin(e))),Vw={kernelName:Ie,backendName:"cpu",kernelFunc:Ww},Uw=jx(Ne,(e=>Math.asinh(e))),Gw={kernelName:Ne,backendName:"cpu",kernelFunc:Uw},Hw=jx($e,(e=>Math.atan(e))),jw={kernelName:$e,backendName:"cpu",kernelFunc:Hw},Kw=ew(((e,t)=>Math.atan2(e,t))),qw=gw(Se,Kw),Xw={kernelName:Se,backendName:"cpu",kernelFunc:qw},Yw=jx(Ce,(e=>Math.atanh(e))),Jw={kernelName:Ce,backendName:"cpu",kernelFunc:Yw};function Zw(e,t,n,s,r,a){const i=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,p=r.padInfo.top,d=r.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=qr(r.outShape,n),g=m.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],b=r.outShape[2]*r.outShape[3],x=r.outShape[3];for(let t=0;t<r.batchSize;++t){const n=t*y,m=t*s[0];for(let t=0;t<r.inChannels;++t)for(let y=0;y<r.outHeight;++y){const w=y*i-p,k=Math.max(0,w),v=Math.min(r.inHeight,c+w),I=n+y*b;for(let n=0;n<r.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(r.inWidth,h+i);let y=f,b=0,w=0;for(let n=k;n<v;n+=l){const r=m+n*s[1];for(let n=c;n<p;n+=u){const i=e[r+n*s[2]+t];"max"===a&&i>y?y=i:"avg"===a&&(b+=i,w++)}if(isNaN(y))break}g[I+n*x+t]="avg"===a?b/w:y}}}return m}function Qw(e,t,n,s,r=!1,a=!1){const i=qr(s.outShape,"int32"),o=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,p=s.effectiveFilterWidth,d=s.padInfo.top,f=s.padInfo.left,m=qr(t,n,e);for(let e=0;e<s.batchSize;++e)for(let t=0;t<s.inChannels;++t)for(let n=0;n<s.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=u;const b=Math.min(s.inHeight,h+g);for(let o=0;o<s.outWidth;++o){const h=o*l-f;let d=h;for(;d<0;)d+=c;const x=Math.min(s.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,k=-1;for(let n=y;n<b;n+=u){const i=n-g;for(let o=d;o<x;o+=c){const l=o-h,u=m.get(e,n,o,t);u>w&&(w=u,k=r?a?((e*s.inHeight+n)*s.inWidth+o)*s.inChannels+t:(n*s.inWidth+o)*s.inChannels+t:i*p+l)}}i.set(k,e,n,o,t)}}return i}function ek(e,t,n,s,r,a){const i=r.strideDepth,o=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,p=r.effectiveFilterDepth,d=r.effectiveFilterHeight,f=r.effectiveFilterWidth,m=r.padInfo.front,g=r.padInfo.top,y=r.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=qr(r.outShape,n),w=x.values,k=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],v=r.outShape[2]*r.outShape[3]*r.outShape[4],I=r.outShape[3]*r.outShape[4],N=r.outShape[4];for(let t=0;t<r.batchSize;++t){const n=t*k,x=t*s[0];for(let t=0;t<r.inChannels;++t)for(let k=0;k<r.outDepth;++k){const $=k*i-m;let C=$;for(;C<0;)C+=u;const S=Math.min(r.inDepth,p+$),T=n+k*v;for(let n=0;n<r.outHeight;++n){const i=n*o-g;let p=i;for(;p<0;)p+=c;const m=Math.min(r.inHeight,d+i),k=T+n*I;for(let n=0;n<r.outWidth;++n){const i=n*l-y;let o=i;for(;o<0;)o+=h;const d=Math.min(r.inWidth,f+i),g=k+n*N;let v=b,I=0,$=0;for(let n=C;n<S;n+=u){const r=x+n*s[1];for(let n=p;n<m;n+=c){const i=r+n*s[2];for(let n=o;n<d;n+=h){const r=e[i+n*s[3]+t];if("max"===a&&r>v?v=r:"avg"===a&&(I+=r,$++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}w[g+t]="avg"===a?I/$:v}}}}return x}const tk={kernelName:Te,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;Ux(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;T(Qa(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=Ua(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&D(u.inShape,u.outShape))c=Yx({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=J(r.shape),s=Zw(e,r.shape,r.dtype,t,u,"avg");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}},nk={kernelName:Ae,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;Ux(r,"avgPool3d");const c=Ga(r.shape,a,i,1,o,l,u),h=ek(n.data.get(r.dataId).values,r.shape,r.dtype,J(r.shape),c,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}},sk={kernelName:Re,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;Ux([r,a],"avgPool3DGrad");const c=Ga(a.shape,i,o,1,l,u),h=c.strideDepth,p=c.strideHeight,d=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,x=c.dilationWidth,w=c.effectiveFilterDepth,k=c.effectiveFilterHeight,v=c.effectiveFilterWidth,I=w-1-c.padInfo.front,N=v-1-c.padInfo.left,$=k-1-c.padInfo.top,C=qr(a.shape,"float32"),S=1/(f*m*g),T=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-I,i=s-$,o=r-N;let l=0;for(let n=0;n<w;n+=y){const s=(a+n)/h;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let n=0;n<k;n+=b){const r=(i+n)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<v;n+=x){const a=(o+n)/d;a<0||a>=c.outWidth||Math.floor(a)!==a||(l+=T.get(e,s,r,a,t))}}}C.set(l*S,e,n,s,r,t)}return n.makeTensorInfo(C.shape,C.dtype,C.values)}},rk={kernelName:Ee,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;Ux([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=Ua(i.shape,o,l,1,u),h=c.strideHeight,p=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,k=qr(i.shape,"float32"),v=1/(d*f),I=n.data.get(r.dataId).values,N=qr(r.shape,"float32",I);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const r=n-w,a=s-x;let i=0;for(let n=0;n<y;n+=m){const s=(r+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<b;n+=g){const r=(a+n)/p;r<0||r>=c.outWidth||Math.floor(r)!==r||(i+=N.get(e,s,r,t))}}k.set(i*v,e,n,s,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}},ak={kernelName:xt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,scale:a,offset:i,mean:o,variance:l}=t;T(o.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),T(null==i||o.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),T(null==a||o.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),Ux([r,o,l,a,i],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=n.data.get(r.dataId).values,h=n.data.get(o.dataId).values,p=n.data.get(l.dataId).values,d=a?n.data.get(a.dataId).values:new Float32Array([1]),f=i?n.data.get(i.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=d.length,b=p.length,x=h.length;let w=0,k=0,v=0,I=0;for(let e=0;e<c.length;++e)m[e]=f[w++]+(c[e]-h[k++])*d[v++]/Math.sqrt(p[I++]+u),w>=g&&(w=0),k>=x&&(k=0),v>=y&&(v=0),I>=b&&(I=0);return n.makeTensorInfo(r.shape,r.dtype,m)}};function ik(e,t,n,s,r){const a=wa(s,t,n),i=F(n),o=J(s);if(a){const n=ka(t,o);return"string"===r?e.slice(n,n+i):e.subarray(n,n+i)}const l=qr(s,r,"string"===r?Vu(e):e),u=qr(n,r);for(let e=0;e<u.size;++e){const n=u.indexToLoc(e),s=n.map(((e,n)=>e+t[n]));u.set(l.get(...s),...n)}return"string"===r?Uu(u.values):u.values}function ok(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s;Ux(r,"slice");const[o,l]=va(r,a,i);la(r,o,l);const u=ik(n.data.get(r.dataId).values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,u)}const lk={kernelName:An,backendName:"cpu",kernelFunc:ok},uk={kernelName:De,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;Ux([r],"batchToSpaceND");const o=a.reduce(((e,t)=>e*t)),l=hu(r.shape,a,o),u=pu(l.length,a.length),c=du(r.shape,a,o),h=fu(i,a.length),p=mu(c,i,a.length),d=vw({inputs:{x:r},backend:n,attrs:{shape:l}}),f=Ow({inputs:{x:d},backend:n,attrs:{perm:u}}),m=vw({inputs:{x:f},backend:n,attrs:{shape:c}}),g=ok({inputs:{x:m},backend:n,attrs:{begin:h,size:p}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function ck(e,t,n,s,r){const a=F(s),i=te(r,n);for(let n=0;n<e.length;n++){const s=e[n];if(s<0)throw new Error("Input x must be non-negative!");s>=r||(i[s]+=a>0?t[n]:1)}return i}function hk(e,t,n,s=!1){const r=e.shape[0],a=e.shape[1],i=qr([r,n],t.dtype);for(let o=0;o<r;o++)for(let r=0;r<a;r++){const a=e.get(o,r);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(s?i.set(1,o,a):t.size>0?i.set(i.get(o,a)+t.get(o,r),o,a):i.set(i.get(o,a)+1,o,a))}return i}const pk={kernelName:_e,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=ck(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}};function dk(e){return(t,n,s)=>{const r=W(n,t.length);for(let n=0;n<t.length;++n)r[n]=e(t[n],s);return r}}const fk=dk((e=>Math.ceil(e))),mk=Kx(Me,fk),gk={kernelName:Me,backendName:"cpu",kernelFunc:mk},yk=jx(Le,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),bk={kernelName:Le,backendName:"cpu",kernelFunc:yk},xk={kernelName:Pe,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(F(t.shape)),r=n.data.get(t.dataId),a=r.complexTensorInfos.real,i=r.complexTensorInfos.imag,o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values;for(let e=0;e<o.length;e++){const t=o[e],n=l[e];s[e]=Math.hypot(t,n)}return n.makeOutput(s,t.shape,"float32")}};function wk(e,t,n,s){const r=V(n,F(t));if(s&&"string"!==n){let t=0;e.forEach((e=>{const n=F(e.shape);r.set(e.vals,t),t+=n}))}else{let s=0;e.forEach((e=>{const a="string"===n?Vu(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+s;for(let t=0;t<e.shape[1];++t)r[o+t]=a[i++]}s+=e.shape[1]}))}return r}function kk(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.imag,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const vk={kernelName:Ct,backendName:"cpu",kernelFunc:kk};function Ik(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=P(r,t[0].shape)[0];let i=ou(t.map((e=>e.shape)),a);if(0===F(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>F(e.shape)>0));if(1===o.length)return Yx({inputs:{x:o[0]},backend:n});if(iu(o.map((e=>e.shape)),a),"complex64"===o[0].dtype){const e=o.map((e=>pw({inputs:{input:e},backend:n}))),t=o.map((e=>kk({inputs:{input:e},backend:n}))),s=Ik({inputs:e,backend:n,attrs:{axis:a}}),r=Ik({inputs:t,backend:n,attrs:{axis:a}}),i=uw({inputs:{real:s,imag:r},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),i}const l=o.map((e=>{const t=F(e.shape.slice(a));return vw({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),u=l.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));i=ou(l.map((e=>e.shape)),1);const c=1===l[0].shape[0],h=wk(u,i,t[0].dtype,c),p=ou(o.map((e=>e.shape)),a),d=n.makeTensorInfo(p,t[0].dtype,h);return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}const Nk={kernelName:Be,backendName:"cpu",kernelFunc:Ik};function $k(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s;Ux([r,a],"conv2d");const h=ei(l),p=Ha(r.shape,a.shape,i,u,o,c,!1,h),d=p.filterHeight,f=p.filterWidth,m=p.dilationHeight,g=p.dilationWidth,y=p.padInfo.left,b=p.padInfo.top,x="channelsLast"===p.dataFormat,w=new Fs(p.outShape,r.dtype),k=J(r.shape),v=J(a.shape),I=k[0],N=x?k[1]:k[2],$=x?k[2]:1,C=x?1:k[1],S=w.strides[0],T=x?w.strides[1]:w.strides[2],E=x?w.strides[2]:1,A=x?1:w.strides[1],R=n.data.get(r.dataId).values,F=n.data.get(a.dataId).values,D=w.values;for(let e=0;e<p.batchSize;++e){const t=e*I,n=e*S;for(let e=0;e<p.outHeight;++e){const s=n+e*T,r=e*p.strideHeight-b;for(let e=0;e<d;++e){const n=r+e*m;if(n<0||n>=p.inHeight)continue;const a=e*v[0],i=t+n*N;for(let e=0;e<p.outWidth;++e){const t=s+e*E,n=e*p.strideWidth-y;for(let e=0;e<f;++e){const s=n+e*g;if(s<0||s>=p.inWidth)continue;const r=i+s*$;let o=a+e*v[1];for(let e=0;e<p.inChannels;++e){const n=R[r+e*C];for(let e=0;e<p.outChannels;++e)D[t+e*A]+=n*F[o+e];o+=p.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,D)}const Ck={kernelName:We,backendName:"cpu",kernelFunc:$k},Sk={kernelName:Ve,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;Ux([r,a],"conv2dBackpropFilter");const h=ei(l),p=Ha(r.shape,c,i,1,o,u,!1,h),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=p,y="channelsLast"===p.dataFormat,b=new Fs(p.filterShape,"float32"),x=p.padInfo.left,w=p.padInfo.top,k=n.data.get(r.dataId).values,v=n.data.get(a.dataId).values,I=new Fs(r.shape,r.dtype,k),N=new Fs(a.shape,a.dtype,v);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/d)),n=Math.min(p.outHeight,(p.inHeight+w-e)/d);for(let s=0;s<g;++s){const r=Math.max(0,Math.ceil((x-s)/f)),a=Math.min(p.outWidth,(p.inWidth+x-s)/f);for(let i=0;i<p.inChannels;++i)for(let o=0;o<p.outChannels;++o){let l=0;for(let u=0;u<p.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*d-w;for(let e=r;e<a;++e){const n=s+e*f-x;l+=y?I.get(u,t,n,i)*N.get(u,c,e,o):I.get(u,i,t,n)*N.get(u,o,c,e)}}b.set(l,e,s,i,o)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},Tk={kernelName:Ue,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s;Ux([r,a],"conv2dBackpropInput");const h=J(a.shape),p=J(r.shape);let d=ei(u);const f=Ha(i,a.shape,o,1,l,c,!1,d),m=new Fs(f.inShape,"float32"),g=m.values,y=n.data.get(r.dataId).values,b=n.data.get(a.dataId).values,[x,w,k]=h,{batchSize:v,filterHeight:I,filterWidth:N,inChannels:$,inHeight:C,inWidth:S,outChannels:T,outHeight:E,outWidth:A,strideHeight:R,strideWidth:F}=f;d=f.dataFormat;const D=I-1-f.padInfo.top,_=N-1-f.padInfo.left,O="channelsLast"===d,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,P=O?1:m.strides[1],B=p[0],W=O?p[1]:p[2],V=O?p[2]:1,U=O?1:p[1];for(let e=0;e<v;++e)for(let t=0;t<$;++t)for(let n=0;n<C;++n){const s=n-D,r=Math.max(0,Math.ceil(s/R)),a=Math.min(E,(I+s)/R);for(let i=0;i<S;++i){const o=i-_,l=Math.max(0,Math.ceil(o/F)),u=Math.min(A,(N+o)/F);let c=0;for(let n=r;n<a;++n){const r=n*R-s;for(let s=l;s<u;++s){const a=B*e+W*n+V*s,i=x*(I-1-r)+w*(N-1-(s*F-o))+k*t;for(let e=0;e<T;++e)c+=y[a+U*e]*b[i+e]}}g[M*e+L*n+z*i+P*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},Ek={kernelName:Ge,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s;Ux([r,a],"conv3d");const u=ja(r.shape,a.shape,i,l,o),{filterDepth:c,filterHeight:h,filterWidth:p,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,w=new Fs(u.outShape,r.dtype),k=n.data.get(r.dataId).values,v=n.data.get(a.dataId).values,I=w.values,N=J(r.shape),$=J(a.shape);for(let e=0;e<u.batchSize;++e){const t=e*N[0],n=e*w.strides[0];for(let e=0;e<u.outDepth;++e){const s=n+e*w.strides[1],r=e*u.strideDepth-y;for(let e=0;e<c;++e){const n=r+e*d;if(n<0||n>=u.inDepth)continue;const a=e*$[0],i=t+n*N[1];for(let e=0;e<u.outHeight;++e){const t=s+e*w.strides[2],n=e*u.strideHeight-x;for(let e=0;e<h;++e){const s=n+e*f;if(s<0||s>=u.inHeight)continue;const r=a+e*$[1],o=i+s*N[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,s=e*u.strideWidth-b;for(let e=0;e<p;++e){const t=s+e*m;if(t<0||t>=u.inWidth)continue;const a=r+e*$[2],i=o+t*u.inChannels;let l=a;for(let e=0;e<u.inChannels;++e){const t=k[i+e];for(let e=0;e<u.outChannels;++e)I[n+e]+=t*v[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},Ak={kernelName:He,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s;Ux([r,a],"conv3dBackpropFilterV2");const u=J(r.shape),c=J(a.shape),h=ja(r.shape,l,i,1,o),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new Fs(h.filterShape,"float32"),x=b.values,[w,k,v,I]=b.strides,N=n.data.get(a.dataId).values,[$,C,S,T]=c,E=n.data.get(r.dataId).values,[A,R,F,D]=u,_=h.padInfo.front,O=h.padInfo.left,M=h.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((_-e)/p)),n=Math.min(h.outDepth,(h.inDepth+_-e)/p),s=e*w;for(let r=0;r<g;++r){const a=Math.max(0,Math.ceil((M-r)/d)),i=Math.min(h.outHeight,(h.inHeight+M-r)/d),o=r*k+s;for(let s=0;s<y;++s){const l=Math.max(0,Math.ceil((O-s)/f)),u=Math.min(h.outWidth,(h.inWidth+O-s)/f),c=s*v+o;for(let o=0;o<h.inChannels;++o){const m=o*I+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*A,y=m*$;for(let m=t;m<n;++m){const t=(e+m*p-_)*R+h,n=m*C+y;for(let e=a;e<i;++e){const a=(r+e*d-M)*F+t,i=e*S+n;for(let e=l;e<u;++e){const t=e*T+i;g+=E[(s+e*f-O)*D+a+o]*N[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},Rk={kernelName:je,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s;Ux([r],"conv3dBackpropInputV2");const u=J(r.shape),c=J(a.shape),h=ja(l,a.shape,o,1,i),p=new Fs(h.inShape,"float32"),d=p.values,[f,m,g,y]=p.strides,b=n.data.get(r.dataId).values,[x,w,k,v]=u,I=n.data.get(a.dataId).values,[N,$,C,S]=c,{batchSize:T,filterDepth:E,filterHeight:A,filterWidth:R,inChannels:F,inDepth:D,inHeight:_,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:P,strideDepth:B,strideHeight:W,strideWidth:V}=h,U=E-1-h.padInfo.front,G=A-1-h.padInfo.top,H=R-1-h.padInfo.left;for(let e=0;e<T;++e)for(let t=0;t<F;++t)for(let n=0;n<D;++n){const s=n-U,r=Math.max(0,Math.ceil(s/B)),a=Math.min(L,(E+s)/B);for(let i=0;i<_;++i){const o=i-G,l=Math.max(0,Math.ceil(o/W)),u=Math.min(z,(A+o)/W);for(let c=0;c<O;++c){const h=c-H,p=Math.max(0,Math.ceil(h/V)),T=Math.min(P,(R+h)/V);let F=0;for(let n=r;n<a;++n){const r=n*B-s;for(let s=l;s<u;++s){const a=s*W-o;for(let i=p;i<T;++i){const o=x*e+w*n+k*s+v*i,l=N*(E-1-r)+$*(A-1-a)+C*(R-1-(i*V-h))+S*t;for(let e=0;e<M;++e)F+=b[o+e]*I[l+e]}}}d[f*e+m*n+g*i+y*c+t]=F}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},Fk=jx(Ke,(e=>Math.cos(e))),Dk={kernelName:Ke,backendName:"cpu",kernelFunc:Fk},_k=jx(qe,(e=>Math.cosh(e))),Ok={kernelName:qe,backendName:"cpu",kernelFunc:_k},Mk={kernelName:Ye,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,[c,h,p,d]=r.shape,f=a.shape[0],[m,g]=o,y=qr([f,m,g,d],"float32"),b=n.data.get(a.dataId).values,x=n.data.get(i.dataId).values,w=n.data.get(r.dataId).values,k=J(r.shape),v=J(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],s=b[t+1],r=b[t+2],a=b[t+3],i=x[e];if(i>=c)continue;const o=m>1?(r-n)*(h-1)/(m-1):0,f=g>1?(a-s)*(p-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(h-1)+t*o:.5*(n+r)*(h-1);if(c<0||c>h-1)for(let n=0;n<g;n++)for(let s=0;s<d;s++){const r=s+n*v[2]+t*v[1]+e*v[0];y.values[r]=u}else if("bilinear"===l){const n=Math.floor(c),r=Math.ceil(c),o=c-n;for(let l=0;l<g;l++){const c=g>1?s*(p-1)+l*f:.5*(s+a)*(p-1);if(c<0||c>p-1){for(let n=0;n<d;n++){const s=n+l*v[2]+t*v[1]+e*v[0];y.values[s]=u}continue}const h=Math.floor(c),m=Math.ceil(c),b=c-h;for(let s=0;s<d;s++){let a=s+h*k[2]+n*k[1]+i*k[0];const u=w[a];a=s+m*k[2]+n*k[1]+i*k[0];const c=w[a];a=s+h*k[2]+r*k[1]+i*k[0];const p=w[a];a=s+m*k[2]+r*k[1]+i*k[0];const d=u+(c-u)*b,f=p+(w[a]-p)*b;a=s+l*v[2]+t*v[1]+e*v[0],y.values[a]=d+(f-d)*o}}}else for(let n=0;n<g;++n){const r=g>1?s*(p-1)+n*f:.5*(s+a)*(p-1);if(r<0||r>p-1){for(let s=0;s<d;s++){const r=s+n*v[2]+t*v[1]+e*v[0];y.values[r]=u}continue}const o=Math.round(r),l=Math.round(c);for(let s=0;s<d;s++){const r=s+o*k[2]+l*k[1]+i*k[0],a=s+n*v[2]+t*v[1]+e*v[0];y.values[a]=w[r]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},Lk={kernelName:Xe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;Ux(r,"cumsum");const l=to([a],r.shape.length);let u=r;null!=l&&(u=Ow({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=so(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Hs(u.dtype,"int32"),p=te(F(u.shape),h),d=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)p[n]=i?0:d[n];else{const s=m(e,t-1);p[n]=i?d[s]+p[s]:d[n]+p[s]}}const g=n.makeTensorInfo(u.shape,h,p);if(null!=l){const e=Ow({inputs:{x:g},backend:n,attrs:{perm:no(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}},zk={kernelName:Je,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=ck(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===r.shape.length){const e=hk(n.bufferSync(r),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},Pk={kernelName:Ze,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s;T("NHWC"===i,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`)),T(a>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${a}`));const o=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],h=l*a,p=u*a,d=c/(a*a),f=n.data.get(r.dataId).values,m=new Float32Array(o*h*p*d);let g=0;for(let e=0;e<o;++e)for(let t=0;t<h;++t){const n=Math.floor(t/a),s=t%a;for(let t=0;t<p;++t){const r=Math.floor(t/a),i=(s*a+t%a)*d;for(let t=0;t<d;++t){const s=t+i+c*(r+u*(n+l*e));m[g++]=f[s]}}}return n.makeTensorInfo([o,h,p,d],r.dtype,m)}};function Bk(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;Ux([r,a],"depthwiseConv2DNative");const c=J(r.shape),h=J(a.shape);let p=l;null==p&&(p=[1,1]),T(Qa(i,p),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`));const d=Ha(r.shape,a.shape,i,p,o,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=d,x=b.left,w=b.top,k=d.outChannels/d.inChannels,v=new Fs(d.outShape,r.dtype),I=n.data.get(r.dataId).values,N=n.data.get(a.dataId).values,$=v.values;for(let e=0;e<d.batchSize;++e){const t=e*c[0],n=e*v.strides[0];for(let e=0;e<d.outHeight;++e){const s=n+e*v.strides[1],r=e*d.strideHeight-x;for(let e=0;e<f;++e){const n=r+e*g;if(n<0||n>=d.inHeight)continue;const a=e*h[0],i=t+n*c[1];for(let e=0;e<d.outWidth;++e){const t=s+e*v.strides[2],n=e*d.strideWidth-w;for(let e=0;e<m;++e){const s=n+e*y;if(s<0||s>=d.inWidth)continue;const r=a+e*h[1],o=i+s*d.inChannels;let l=t,u=r;for(let e=0;e<d.inChannels;++e){const t=I[o+e];for(let e=0;e<k;++e)$[l+e]+=t*N[u+e];l+=k,u+=k}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}const Wk={kernelName:Qe,backendName:"cpu",kernelFunc:Bk},Vk={kernelName:et,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s;Ux([r,a],"depthwiseConv2dNativeBackpropFilter");const h=Ha(r.shape,c,i,o,l,u,!0),{strideHeight:p,strideWidth:d,filterHeight:f,filterWidth:m}=h,g=new Fs(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,x=h.outChannels/h.inChannels,w=n.data.get(r.dataId).values,k=new Fs(r.shape,r.dtype,w),v=n.data.get(a.dataId).values,I=new Fs(a.shape,a.dtype,v);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/p)),n=Math.min(h.outHeight,(h.inHeight+b-e)/p);for(let s=0;s<m;++s){const r=Math.max(0,Math.ceil((y-s)/d)),a=Math.min(h.outWidth,(h.inWidth+y-s)/d);for(let i=0;i<h.outChannels;++i){const o=Math.trunc(i/x),l=i%x;let u=0;for(let l=0;l<h.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*p-b;for(let e=r;e<a;++e){const n=s+e*d-y;u+=k.get(l,t,n,o)*I.get(l,c,e,i)}}g.set(u,e,s,o,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},Uk={kernelName:tt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s;Ux([r,a],"depthwiseConv2DNativeBackpropInput");const h=J(r.shape),p=J(a.shape),d=Ha(c,a.shape,i,o,l,u,!0),f=new Fs(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(r.dataId).values,[w,k,v]=h,I=n.data.get(a.dataId).values,[N,$,C]=p,{batchSize:S,filterHeight:T,filterWidth:E,inChannels:A,inHeight:R,inWidth:F,outChannels:D,outHeight:_,outWidth:O,strideHeight:M,strideWidth:L}=d,z=T-1-d.padInfo.top,P=E-1-d.padInfo.left,B=D/A;for(let e=0;e<S;++e)for(let t=0;t<A;++t)for(let n=0;n<R;++n){const s=n-z,r=Math.max(0,Math.ceil(s/M)),a=Math.min(_,(T+s)/M);for(let i=0;i<F;++i){const o=i-P,l=Math.max(0,Math.ceil(o/L)),u=Math.min(O,(E+o)/L);let c=0;for(let n=r;n<a;++n){const r=n*M-s;for(let s=l;s<u;++s){const a=w*e+k*n+v*s,i=N*(T-1-r)+$*(E-1-(s*L-o))+C*t;for(let e=0;e<B;++e)c+=x[a+(t*B+e)]*I[i+e]}}m[g*e+y*n+b*i+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},Gk={kernelName:nt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=F(s.shape),a=n.data.get(s.dataId).values,i=qr([r,r],s.dtype),o=i.values;for(let e=0;e<a.length;e++)o[e*r+e]=a[e];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,i.dtype,i.values)}},Hk={kernelName:st,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r}=e,{strides:a,pad:i,dilations:o}=n,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,p=r.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:k,filterHeight:v,filterWidth:I,dilationHeight:N,dilationWidth:$,outShape:C}=Va(s.shape,r.shape,a,i,"NHWC",o),S=F(C),T=C.length,E=V(s.dtype,S);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let a=0;a<b;++a){const i=a*k-x.left;for(let o=0;o<g;++o){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<v;++t){const a=n+t*N;if(a>=0&&a<f)for(let n=0;n<I;++n){const d=i+n*$;if(d>=0&&d<m){const i=re([e,a,d,o],c,J(s.shape)),f=re([t,n,o],p,J(r.shape)),m=u[i]+h[f];m>l&&(l=m)}}}E[re([e,t,a,o],T,J(C))]=l}}}return{dataId:l.write(ys(E,s.dtype),C,s.dtype),shape:C,dtype:s.dtype}}},jk={kernelName:at,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=Q(s.shape,u.data.get(s.dataId).values),h=Q(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:I,dilationWidth:N,outShape:$}=Va(s.shape,r.shape,i,o,"NHWC",l);T(a.rank===$.length,(()=>`Error in ${at}, dy must have the same rank as output ${$.length}, but got ${a.rank}`));const C=Q($,u.data.get(a.dataId).values),S=ne(r.shape,r.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let s=0;s<y;++s){const r=s*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let t=0;t<k;++t){const s=n+t*I;if(s>=0&&s<d)for(let n=0;n<v;++n){const u=r+n*N;if(u>=0&&u<f){const r=c[e][s][u][a]+h[t][n][a];r>i&&(i=r,o=t,l=n)}}}S[o][l][a]+=C[e][t][s][a]}}}return{dataId:u.write(ys(S,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},Kk={kernelName:rt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=Q(s.shape,u.data.get(s.dataId).values),h=Q(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:I,dilationWidth:N,outShape:$}=Va(s.shape,r.shape,i,o,"NHWC",l);T(a.rank===$.length,(()=>`Error in ${rt}, dy must have the same rank as output ${$.length}, but got ${a.rank}`));const C=Q($,u.data.get(a.dataId).values),S=ne(s.shape,s.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let s=0;s<y;++s){const r=s*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=r<0?0:r;for(let t=0;t<k;++t){const s=n+t*I;if(s>=0&&s<d)for(let n=0;n<v;++n){const u=r+n*N;if(u>=0&&u<f){const r=c[e][s][u][a]+h[t][n][a];r>i&&(i=r,o=s,l=u)}}}S[e][o][l][a]+=C[e][t][s][a]}}}return{dataId:u.write(ys(S,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},qk={kernelName:lt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:r}=t;Ux([s,r],"eluGrad");const a=new Float32Array(F(r.shape)),i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values;for(let e=0;e<i.length;++e){const t=i[e];a[e]=t>=1?o[e]:o[e]*(t+1)}return n.makeTensorInfo(r.shape,"float32",a)}},Xk=ew(((e,t)=>e===t?1:0)),Yk=gw(ct,Xk,null,"bool"),Jk={kernelName:ct,backendName:"cpu",kernelFunc:Yk},Zk=vu,Qk=Iu,ev=Nu,tv=$u,nv=Cu,sv=Su,rv=jx(ut,(e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+Zk*n);return t*(1-((((sv*s+nv)*s+tv)*s+ev)*s+Qk)*s*Math.exp(-n*n))})),av={kernelName:ut,backendName:"cpu",kernelFunc:rv},iv=dk((e=>Math.exp(e))),ov=Kx(ht,iv),lv={kernelName:ht,backendName:"cpu",kernelFunc:ov};function uv(e){const{inputs:t,backend:n,attrs:s}=e,{input:r}=t,{dim:a}=s,i=r.shape.length,o=r.shape.slice();let l=a;return a<0&&(T(-(i+1)<=a,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+a+1),o.splice(l,0,1),vw({inputs:{x:r},backend:n,attrs:{shape:o}})}const cv={kernelName:pt,backendName:"cpu",kernelFunc:uv},hv=dk((e=>Math.expm1(e))),pv=Kx(dt,hv),dv={kernelName:dt,backendName:"cpu",kernelFunc:pv},fv=ew(((e,t)=>e*t)),mv=yw(((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n}))),gv=gw(en,fv,mv),yv={kernelName:en,backendName:"cpu",kernelFunc:gv},bv=ew(((e,t)=>e/t)),xv=gw(it,bv),wv={kernelName:it,backendName:"cpu",kernelFunc:xv},kv=ew(((e,t)=>e-t)),vv=yw(((e,t,n,s)=>({real:e-n,imag:t-s}))),Iv=gw(Un,kv,vv),Nv={kernelName:Un,backendName:"cpu",kernelFunc:Iv};function $v(e,t,n){const s=e.shape,r=s[0],a=s[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[r,a],c=F(u),h=W("float32",c),p=W("float32",c);for(let e=0;e<r;e++){const s=ok({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,a]}}),r=ok({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,a]}}),i=uw({inputs:{real:s,imag:r},backend:n}),{real:u,imag:c}=Cv(i,t,n),d=Au(u,c);for(let t=0;t<a;t++){const n=_u(d,t);h[e*a+t]=n.real,p[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i)}const d=n.makeTensorInfo(u,"float32",h),f=n.makeTensorInfo(u,"float32",p),m=uw({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}function Cv(e,t,n){const s=F(e.shape),r=n.data.get(e.dataId),a=n.data.get(r.complexTensorInfos.real.dataId).values,i=n.data.get(r.complexTensorInfos.imag.dataId).values;if(0==((o=s)&o-1)){const r=Sv(a,i,s,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",r.real),t=n.makeTensorInfo(o,"float32",r.imag),a=n.makeTensorInfo([],"float32",gs(s,"float32")),i=Yx({inputs:{x:a},backend:n}),l=wv.kernelFunc({inputs:{a:e,b:a},backend:n}),u=wv.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return r}{const e=function(e,t,n){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let a=0,i=0;for(let s=0;s<t;s++){const o=Lu(r*s,t,n),l=_u(e,s);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=t,i/=t),Ou(s,a,i,r)}return s}(Au(a,i),s,t);return Ru(e)}var o}function Sv(e,t,n,s,r){if(1===n)return{real:e,imag:t};const a=Au(e,t),i=n/2,o=Fu(a),l=o.real,u=o.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),p=r.makeTensorInfo(c,"float32",u),d=uw({inputs:{real:h,imag:p},backend:r}),f=Du(a),m=f.real,g=f.imag,y=[m.length],b=r.makeTensorInfo(y,"float32",m),x=r.makeTensorInfo(y,"float32",g),w=uw({inputs:{real:b,imag:x},backend:r}),k=Sv(l,u,i,s,r),v=k.real,I=k.imag,N=[v.length],$=r.makeTensorInfo(N,"float32",v),C=r.makeTensorInfo(N,"float32",I),S=uw({inputs:{real:$,imag:C},backend:r}),T=Sv(m,g,i,s,r),E=T.real,A=T.imag,R=[E.length],F=r.makeTensorInfo(R,"float32",E),D=r.makeTensorInfo(R,"float32",A),_=uw({inputs:{real:F,imag:D},backend:r}),O=Mu(n,s),M=[O.real.length],L=r.makeTensorInfo(M,"float32",O.real),z=r.makeTensorInfo(M,"float32",O.imag),P=uw({inputs:{real:L,imag:z},backend:r}),B=gv({inputs:{a:P,b:_},backend:r}),W=ww({inputs:{a:S,b:B},backend:r}),V=Iv({inputs:{a:S,b:B},backend:r}),U=pw({inputs:{input:W},backend:r}),G=pw({inputs:{input:V},backend:r}),H=kk({inputs:{input:W},backend:r}),j=kk({inputs:{input:V},backend:r}),K=Ik({inputs:[U,G],backend:r,attrs:{axis:0}}),q=Ik({inputs:[H,j],backend:r,attrs:{axis:0}}),X=r.data.get(K.dataId).values,Y=r.data.get(q.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(w),r.disposeIntermediateTensorInfo($),r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo(S),r.disposeIntermediateTensorInfo(F),r.disposeIntermediateTensorInfo(D),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(z),r.disposeIntermediateTensorInfo(P),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(K),r.disposeIntermediateTensorInfo(q),{real:X,imag:Y}}const Tv={kernelName:ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=F(s.shape),a=s.shape[s.shape.length-1],i=vw({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=$v(i,!1,n),l=vw({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}};function Ev(e){const{backend:t,attrs:n}=e,{shape:s,value:r,dtype:a}=n,i=a||q(r),o=V(i,F(s));return function(e,t,n){e.fill(t)}(o,r),t.makeTensorInfo(s,i,o)}const Av={kernelName:mt,backendName:"cpu",kernelFunc:Ev},Rv={kernelName:gt,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,r=n,a=W(s.dtype,F(s.shape)),[i,o,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let e=0;e<i;e++){const t=e*l*o*u;for(let e=0;e<o;e++){const n=e*(l*u);for(let s=0;s<l;s++){const r=s*u;for(let o=0;o<u;o++){const h=[i,e,s,o][2],p=Math.round(l-h),d=t+n+r+o;let f=c[d];p>=0&&p<l&&(f=c[t+n+p*u+o]),a[d]=f}}}}return{dataId:r.write(a,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},Fv=dk((e=>Math.floor(e))),Dv=Kx(yt,Fv),_v={kernelName:yt,backendName:"cpu",kernelFunc:Dv},Ov=ew(((e,t)=>Math.floor(e/t))),Mv=gw(bt,Ov,null,"int32"),Lv={kernelName:bt,backendName:"cpu",kernelFunc:Mv},zv={kernelName:is,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=$k({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=ww({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=lw(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}},Pv={kernelName:os,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=Bk({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=ww({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=lw(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}},Bv={kernelName:kt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=F(s.shape),i=r.shape,o=i[i.length-1],[l,u,c,h]=gu(s,r);if(0===u)return n.makeTensorInfo(l,s.dtype,[]);const p=qr([u,c],s.dtype),d=n.data.get(r.dataId).values,f=n.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=[];let n=0;for(let s=0;s<o;s++){const r=d[e*o+s];n+=r*h[s],t.push(r)}if(n<0||n>=a/c)throw new Error(`Invalid indices: ${t} does not index into ${s.shape}`);for(let t=0;t<c;t++)p.values[e*c+t]=f[n*c+t]}return n.makeTensorInfo(l,p.dtype,p.values)}};function Wv(e,t,n){const s=qr(n,e.dtype);for(let n=0;n<s.size;++n){const r=s.indexToLoc(n).slice(),a=r[0],i=r[2],o=t.locToIndex([a,i]);r[2]=t.values[o];const l=e.locToIndex(r);s.values[n]=e.values[l]}return s}const Vv={kernelName:wt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s;Ux([r,a],"gatherV2");let l=o;null==o&&(l=0);const u=F(a.shape),c=Wu(r,a,P(i,r.shape)[0],l),h=vw({inputs:{x:r},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),p=vw({inputs:{x:a},backend:n,attrs:{shape:[c.batchSize,u/c.batchSize]}}),d=[c.batchSize,c.outerSize,u/c.batchSize,c.sliceSize],f=n.bufferSync(p),m=Wv(n.bufferSync(h),f,d);return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.makeTensorInfo(c.outputShape,m.dtype,m.values)}},Uv=ew(((e,t)=>e>t?1:0)),Gv=gw(vt,Uv,null,"bool"),Hv={kernelName:vt,backendName:"cpu",kernelFunc:Gv},jv=ew(((e,t)=>e>=t?1:0)),Kv=gw(It,jv,null,"bool"),qv={kernelName:It,backendName:"cpu",kernelFunc:Kv},Xv={kernelName:$t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=F(s.shape),a=s.shape[s.shape.length-1],i=vw({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=$v(i,!0,n),l=vw({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},Yv=jx(St,(e=>Number.isFinite(e)?1:0),"bool"),Jv={kernelName:St,backendName:"cpu",kernelFunc:Yv},Zv=jx(Tt,(e=>Math.abs(e)===1/0?1:0),"bool"),Qv={kernelName:Tt,backendName:"cpu",kernelFunc:Zv},eI=jx(Et,(e=>Number.isNaN(e)?1:0),"bool"),tI={kernelName:Et,backendName:"cpu",kernelFunc:eI},nI=ew(((e,t)=>e<t?1:0)),sI=gw(Rt,nI,null,"bool"),rI={kernelName:Rt,backendName:"cpu",kernelFunc:sI},aI=ew(((e,t)=>e<=t?1:0)),iI=gw(Ft,aI,null,"bool"),oI={kernelName:Ft,backendName:"cpu",kernelFunc:iI};function lI(e,t,n){const s=(t-e)/(n-1),r=te(n,"float32");r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+s;return r}const uI={kernelName:Dt,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=lI(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},cI=dk((e=>Math.log(e))),hI=Kx(_t,cI),pI={kernelName:_t,backendName:"cpu",kernelFunc:hI},dI=jx(Ot,(e=>Math.log1p(e))),fI={kernelName:Ot,backendName:"cpu",kernelFunc:dI},mI=ew(((e,t)=>e&&t)),gI=gw(Mt,mI,null,"bool"),yI={kernelName:Mt,backendName:"cpu",kernelFunc:gI},bI=jx(Lt,(e=>e?0:1),"bool"),xI={kernelName:Lt,backendName:"cpu",kernelFunc:bI},wI=ew(((e,t)=>e||t)),kI=gw(zt,wI,null,"bool"),vI={kernelName:zt,backendName:"cpu",kernelFunc:kI},II={kernelName:Pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s;Ux(r,"LRN");const u=r.shape[3],c=u-1,h=n.data.get(r.dataId).values,p=F(r.shape),d=new Float32Array(p);function f(e){const t=e%u;let n=e-t+Math.max(0,t-a);const s=e-t+Math.min(t+a,c);let r=0;for(;n<=s;n++){const e=h[n];r+=e*e}return r}for(let e=0;e<p;e++){const t=f(e),n=h[e]*Math.pow(i+o*t,-l);d[e]=n}return n.makeTensorInfo(r.shape,r.dtype,d)}},NI={kernelName:Bt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s;Ux(i,"LRNGrad");const h=F(i.shape),p=i.shape[3],d=n.data.get(i.dataId).values,f=n.data.get(r.dataId).values,m=n.data.get(a.dataId).values,g=new Float32Array(h),y=h;for(let e=0;e<y;e++){const t=e%p,n=e-t+Math.max(0,t-o),s=e-t+Math.min(p,t+o+1);let r=0;for(let e=n;e<s;e++)r+=Math.pow(f[e],2);r=u*r+l;for(let t=n;t<s;t++){let n=-2*u*c*f[t]*m[e]/r;e===t&&(n+=Math.pow(r,-c)),n*=d[e],g[t]+=n}}return n.makeTensorInfo(i.shape,r.dtype,g)}};function $I(e,t,n,s){const r=W(s,F(n));for(let n=0;n<r.length;++n){const s=n*t;let a=e[s];for(let n=0;n<t;++n){const t=e[s+n];t>a&&(a=t)}r[n]=a}return r}function CI(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=n;let l=r.shape;const u=l.length,c=P(a,l);let h=c;const p=to(h,u);let d=o.data.get(r.dataId).values;if(null!=p){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[p[t]];d=_w(d,l,r.dtype,p,e),h=so(h.length,u),l=e}Ux(r,"max"),eo("max",h,u);const[f,m]=Zi(l,h),g=$I(d,F(m),f,r.dtype),y=o.write(g,f,r.dtype);let b=f;return i&&(b=Qi(f,c)),{dataId:y,shape:b,dtype:r.dtype}}const SI={kernelName:Wt,backendName:"cpu",kernelFunc:CI},TI=ew(((e,t)=>Math.max(e,t))),EI=gw(Vt,TI),AI={kernelName:Vt,backendName:"cpu",kernelFunc:EI},RI={kernelName:Ut,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;Ux(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;T(Qa(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=Ua(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&D(u.inShape,u.outShape))c=Yx({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=J(r.shape),s=Zw(e,r.shape,r.dtype,t,u,"max");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}},FI={kernelName:Ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;Ux(r,"maxPool3d");const c=Ga(r.shape,a,i,1,o,l,u),h=ek(n.data.get(r.dataId).values,r.shape,r.dtype,J(r.shape),c,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}},DI={kernelName:jt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;Ux([r,a],"maxPool3DGrad");const c=Ga(a.shape,i,o,1,l,u),h=function(e,t){const n=qr(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*s-p;let x=b;for(;x<0;)x+=i;const w=Math.min(t.inDepth,u+b);for(let s=0;s<t.outHeight;++s){const u=s*r-d;let p=u;for(;p<0;)p+=o;const k=Math.min(t.inHeight,c+u);for(let r=0;r<t.outWidth;++r){const d=r*a-f;let v=d;for(;v<0;)v+=l;const I=Math.min(t.inWidth,h+d);let N=Number.NEGATIVE_INFINITY,$=-1;for(let t=x;t<w;t+=i){const n=t-b;for(let s=p;s<k;s+=o){const r=s-u;for(let a=v;a<I;a+=l){const i=a-d,o=e.get(m,t,s,a,g);o>=N&&(N=o,$=n*c*h+r*c+i)}}}n.set($,m,y,s,r,g)}}}return n}(n.bufferSync(a),c),p=c.strideDepth,d=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterDepth,x=c.effectiveFilterHeight,w=c.effectiveFilterWidth,k=b-1-c.padInfo.front,v=w-1-c.padInfo.left,I=x-1-c.padInfo.top,N=qr(a.shape,"float32"),$=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-k,i=s-I,o=r-v;let l=0;for(let n=0;n<b;n+=m){const s=(a+n)/p;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let r=0;r<x;r+=g){const a=(i+r)/d;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let i=0;i<w;i+=y){const u=(o+i)/f;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const p=b*x*w-1-h.get(e,s,a,u,t)===n*x*w+r*w+i?1:0;0!==p&&(l+=$.get(e,s,a,u,t)*p)}}}N.set(l,e,n,s,r,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}},_I={kernelName:Gt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;Ux([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=Ua(o.shape,l,u,1,c,h),d=n.data.get(o.dataId).values,f=qr(p.outShape,o.dtype,Qw(d,o.shape,o.dtype,p).values),m=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,w=p.effectiveFilterWidth,k=w-1-p.padInfo.left,v=x-1-p.padInfo.top,I=qr(o.shape,"float32"),N=n.data.get(r.dataId).values,$=qr(r.shape,"float32",N);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let s=0;s<p.inWidth;++s){const r=n-v,a=s-k;let i=0;for(let n=0;n<x;n+=y){const s=(r+n)/m;if(!(s<0||s>=p.outHeight||Math.floor(s)!==s))for(let r=0;r<w;r+=b){const o=(a+r)/g;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;const l=x*w-1-f.get(e,s,o,t)===n*w+r?1:0;0!==l&&(i+=$.get(e,s,o,t)*l)}}I.set(i,e,n,s,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}},OI={kernelName:Kt,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;Ux(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=Ua(s.shape,r,a,[1,1],i),[h,p]=function(e,t,n,s,r){const a=Zw(e,0,n,J(t),r,"max"),i=Qw(e,t,n,r,!0,s);return[a.values,i.values]}(u,s.shape,s.dtype,o,c),d=l.write(h,c.outShape,s.dtype),f=l.write(p,c.outShape,s.dtype);return[{dataId:d,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};function MI(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;let o;Ux(r,"sum"),o="bool"===r.dtype?fw({inputs:{x:r},backend:n,attrs:{dtype:"int32"}}):Yx({inputs:{x:r},backend:n});const l=o.shape.length,u=P(a,o.shape),c=to(u,l);let h=u,p=o;null!=c&&(p=Ow({inputs:{x:o},backend:n,attrs:{perm:c}}),h=so(h.length,l)),eo("sum",h,p.shape.length);const[d,f]=Zi(p.shape,h);let m=hw(n,d,Hs(p.dtype,"int32"));const g=F(f),y=n.data.get(m.dataId).values,b=n.data.get(p.dataId).values;for(let e=0;e<y.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=b[t+e];y[e]=n}if(i){const e=m;m=vw({inputs:{x:m},backend:n,attrs:{shape:Qi(m.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(o),null!=c&&n.disposeIntermediateTensorInfo(p),m}const LI={kernelName:Ln,backendName:"cpu",kernelFunc:MI},zI={kernelName:qt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=P(a,r.shape),l=F(Zi(r.shape,o)[1]),u=[],c=n.makeTensorInfo([],"float32",new Float32Array([l]));u.push(c);const h=fw({inputs:{x:r},backend:n,attrs:{dtype:"float32"}});u.push(h);const p=xv({inputs:{a:h,b:c},backend:n});u.push(p);const d=MI({inputs:{x:p},backend:n,attrs:{axis:a,keepDims:i}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},PI={kernelName:Xt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;Ux(r,"min");const o=P(a,r.shape);let l=o;const u=to(l,r.shape.length);let c=r;null!=u&&(c=Ow({inputs:{x:r},backend:n,attrs:{perm:u}}),l=so(l.length,r.shape.length)),eo("min",l,c.shape.length);const[h,p]=Zi(c.shape,l),d=F(p),f=te(F(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];s<n&&(n=s)}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=vw({inputs:{x:g},backend:n,attrs:{shape:Qi(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},BI=ew(((e,t)=>Math.min(e,t))),WI=gw(Yt,BI),VI={kernelName:Yt,backendName:"cpu",kernelFunc:WI},UI={kernelName:Jt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,mode:i}=s;Ux(r,"mirrorPad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=a.map(((e,t)=>e[0]+r.shape[t])),c="reflect"===i?0:1,h=n.data.get(r.dataId).values,p=r.shape.length,d=J(r.shape),f=F(o),m=o.length,g=J(o),y=W(r.dtype,f);for(let e=0;e<f;e++){let t=ae(e,m,g);for(let e=0;e<m;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map(((e,t)=>e-l[t]));const n=re(t,p,d);y[e]=h[n]}return{dataId:n.write(y,o,r.dtype),shape:o,dtype:r.dtype}}},GI=ew(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),HI=gw(Zt,GI),jI={kernelName:Zt,backendName:"cpu",kernelFunc:HI};var KI=n(948);function qI(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=r.shape.length;let o=a;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);const l=P([o],r.shape),u=CI({inputs:{x:r},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=Qi(u.shape,l),h=vw({inputs:{x:u},backend:n,attrs:{shape:c}}),p=Iv({inputs:{a:r,b:h},backend:n}),d=ov({inputs:{x:p},backend:n}),f=MI({inputs:{x:d},backend:n,attrs:{axis:l,keepDims:!1}}),m=vw({inputs:{x:f},backend:n,attrs:{shape:c}}),g=xv({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const XI={kernelName:Bn,backendName:"cpu",kernelFunc:qI},YI={kernelName:Qt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s;Ux(r,"multinomial");const l=o?r:qI({inputs:{logits:r},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=n.data.get(l.dataId).values,p=[u,a],d=te(F(p),"int32");for(let e=0;e<u;++e){const t=e*c,n=new Float32Array(c-1);n[0]=h[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+h[t+e];const s=KI.alea(i.toString()),r=e*a;for(let e=0;e<a;++e){const t=s();d[r+e]=n.length;for(let s=0;s<n.length;s++)if(t<n[s]){d[r+e]=s;break}}}return o||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(p,"int32",d)}};function JI(e,t,n){const s=gs(-1,n);return fv([],t,s,e,n)}const ZI={kernelName:tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;Ux(s,"neg");const r=n.data.get(s.dataId).values,[a,i]=JI(r,s.shape,s.dtype);return n.makeTensorInfo(i,s.dtype,a)}},QI=kl,eN={kernelName:sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s;Ux(r,"NonMaxSuppression");const u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=QI(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},tN=vl,nN={kernelName:rn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s;Ux(r,"NonMaxSuppressionPadded");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:p,validOutputs:d}=tN(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},sN=Il,rN={kernelName:an,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s;Ux(r,"NonMaxSuppressionWithScore");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=sN(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},aN=ew(((e,t)=>e!==t?1:0)),iN=gw(nn,aN,null,"bool"),oN={kernelName:nn,backendName:"cpu",kernelFunc:iN},lN={kernelName:ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{depth:a,onValue:i,offValue:o}=s;Ux(r,"oneHot");const l=F(r.shape),u=new Float32Array(l*a);u.fill(o);const c=n.data.get(r.dataId).values;for(let e=0;e<l;++e)c[e]>=0&&c[e]<a&&(u[e*a+c[e]]=i);return n.makeTensorInfo([...r.shape,a],"int32",u)}};function uN(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=pw({inputs:{input:s},backend:n}),t=uN({inputs:{x:e},backend:n}),r=kk({inputs:{input:s},backend:n}),a=uN({inputs:{x:r},backend:n}),i=uw({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return Ev({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const cN={kernelName:ts,backendName:"cpu",kernelFunc:uN},hN={kernelName:on,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){const t=pw({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=kk({inputs:{input:r},backend:s}),i=uN({inputs:{x:a},backend:s}),o=uw({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return Ev({backend:s,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function pN(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return uv({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{E(a,e.shape,"All tensors passed to stack must have matching shapes"),T(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],l=Ik({inputs:t.map((e=>{const t=uv({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}const dN={kernelName:un,backendName:"cpu",kernelFunc:pN},fN={kernelName:cn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;Ux(r,"pad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=n.data.get(r.dataId).values,c=F(r.shape),h=r.shape.length,p=J(r.shape),d=F(o),f=o.length,m=J(o),g=W(r.dtype,d);0!==i&&g.fill(i);for(let e=0;e<c;e++)g[re(ae(e,h,p).map(((e,t)=>e+l[t])),f,m)]=u[e];return{dataId:n.write(g,o,r.dtype),shape:o,dtype:r.dtype}}},mN=ew(((e,t)=>Math.pow(e,t))),gN=gw(hn,mN),yN={kernelName:hn,backendName:"cpu",kernelFunc:gN};function bN(e,t,n,s){const[r,a]=Zi(e,s),i=Hs(t,"int32"),o=te(F(r),i),l=F(a);for(let e=0;e<o.length;++e){const t=e*l;let s=1;for(let e=0;e<l;++e)s*=n[t+e];o[e]=s}return{outVals:o,outShape:r,outDtype:i}}const xN={kernelName:dn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;Ux(r,"prod");const o=r.shape.length,l=P(a,r.shape),u=to(l,o);let c=l,h=r;const p=[];null!=u&&(h=Ow({inputs:{x:r},backend:n,attrs:{perm:u}}),p.push(h),c=so(c.length,o));const d=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=bN(h.shape,h.dtype,d,c);let y=m;return i&&(y=Qi(m,l)),p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function wN(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return te(0,s);const r=te(Math.abs(Math.ceil((t-e)/n)),s);t<e&&1===n&&(n=-1),r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+n;return r}const kN={kernelName:fn,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,dtype:a,step:i}=n,o=wN(s,r,i,a);return t.makeTensorInfo([o.length],a,o)}},vN=jx(gn,(e=>1/e)),IN={kernelName:gn,backendName:"cpu",kernelFunc:vN},NN={kernelName:kn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;Ux(r,"resizeBilinear");const l=J(r.shape),[u,c]=o,[h,p,d,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(F([h,u,c,f])),y=[a&&u>1?p-1:p,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c];let x=0;const w=y[0]/b[0],k=y[1]/b[1];for(let e=0;e<h;e++)for(let t=0;t<u;t++){let n;n=i?w*(t+.5)-.5:w*t;const s=Math.max(0,Math.floor(n)),r=n-s,a=Math.min(p-1,Math.ceil(n)),o=e*l[0]+s*l[1],u=e*l[0]+a*l[1];for(let e=0;e<c;e++){let t;t=i?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),s=t-n,a=Math.min(d-1,Math.ceil(t)),c=o+n*l[2],h=u+n*l[2],p=o+a*l[2],y=u+a*l[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[h+e],a=t+(m[p+e]-t)*s,i=a+(n+(m[y+e]-n)*s-a)*r;g[x++]=i}}}return n.makeTensorInfo([h,u,c,f],"float32",g)}},$N={kernelName:vn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;Ux([a,r],"resizeBilinearGrad");const o=J(r.shape),[l,u,c,h]=r.shape,[,p,d]=a.shape,f=new Float32Array(l*u*c*h),m=[i&&p>1?u-1:u,i&&d>1?c-1:c],g=[i&&p>1?p-1:p,i&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(a.dataId).values;let w=0;for(let e=0;e<l;e++){const t=e*o[0];for(let e=0;e<p;e++){const n=e*y,s=Math.floor(n),r=Math.min(Math.ceil(n),u-1),a=t+s*o[1],i=t+r*o[1],l=n-s,p=1-l;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),s=Math.min(Math.ceil(t),c-1),r=t-n,u=1-r,d=a+n*o[2],m=a+s*o[2],g=i+n*o[2],y=i+s*o[2],k=p*u,v=p*r,I=l*u,N=l*r;for(let e=0;e<h;e++){const t=x[w++];f[d+e]+=t*k,f[m+e]+=t*v,f[g+e]+=t*I,f[y+e]+=t*N}}}}return n.makeTensorInfo([l,c,u,h],"float32",f)}},CN={kernelName:xn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;Ux(r,"resizeNearestNeighbor");const l=J(r.shape),[u,c]=o,[h,p,d,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(h*u*c*f),y=[a&&u>1?p-1:p,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c],x=y[0]/b[0],w=y[1]/b[1];let k=0;for(let e=0;e<h;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=i?x*(e+.5):x*e;let s=Math.min(p-1,a?Math.round(n):Math.floor(n));i&&(s=Math.max(0,s));const r=t+s*l[1];for(let e=0;e<c;e++){const t=i?w*(e+.5):w*e;let n=Math.min(d-1,a?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const s=r+n*l[2];for(let e=0;e<f;e++){const t=m[s+e];g[k++]=t}}}}return n.makeTensorInfo([h,u,c,f],r.dtype,g)}},SN={kernelName:wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;Ux([a,r],"resizeNearestNeighborGrad");const o=J(r.shape),l=J(a.shape),[u,c,h,p]=r.shape,[,d,f]=a.shape,m=new Float32Array(u*c*h*p),g=n.data.get(a.dataId).values,y=[i&&d>1?c-1:c,i&&f>1?h-1:h],b=[i&&d>1?d-1:d,i&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],k=1/x,v=1/w,I=2*Math.ceil(k)+2,N=2*Math.ceil(v)+2;for(let e=0;e<u;e++){const t=e*o[0];for(let e=0;e<c;e++){const n=t+e*o[1],s=Math.floor(e*k),r=Math.floor(s-I/2);for(let s=0;s<h;s++){const a=n+s*o[2],u=Math.floor(s*v),y=Math.floor(u-N/2);for(let n=0;n<p;n++){let o=0;for(let a=0;a<I;a++){const u=a+r;if(u<0||u>=d)continue;const p=t+u*l[1],m=u*x;if(e===Math.min(c-1,i?Math.round(m):Math.floor(m)))for(let e=0;e<N;e++){const t=e+y;if(t<0||t>=f)continue;const r=p+t*l[2],a=t*w;s===Math.min(h-1,i?Math.round(a):Math.floor(a))&&(o+=g[r+n])}}m[a+n]=o}}}}return n.makeTensorInfo(r.shape,r.dtype,m)}},TN={kernelName:Nn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s;Ux(r,"reverse");const i=r.shape.length,o=P(a,r.shape);if(0===i)return Yx({inputs:{x:r},backend:n});const l=new Fs(r.shape,r.dtype),u=n.bufferSync(r);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();o.forEach((e=>n[e]=r.shape[e]-1-n[e])),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},EN={kernelName:rs,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=W(s.dtype,F(s.shape)),[u,c,h,p]=s.shape,[d,f]=cu(i,c,h),m=Math.sin(r),g=Math.cos(r),y=o.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=e*h*c*p;for(let e=0;e<c;e++){const n=e*(h*p);for(let s=0;s<h;s++){const r=s*p;for(let i=0;i<p;i++){const o=[u,e,s,i],b=o[2],x=o[1];let w=(b-d)*g-(x-f)*m,k=(b-d)*m+(x-f)*g;w=Math.round(w+d),k=Math.round(k+f);let v=a;"number"!=typeof a&&(v=3===i?255:a[i]),w>=0&&w<h&&k>=0&&k<c&&(v=y[t+k*(h*p)+w*p+i]),l[t+n+r+i]=v}}}}return{dataId:o.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},AN=jx($n,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),RN={kernelName:$n,backendName:"cpu",kernelFunc:AN},FN=dk((e=>1/Math.sqrt(e))),DN=Kx(Cn,FN),_N={kernelName:Cn,backendName:"cpu",kernelFunc:DN};function ON(e,t,n,s,r,a,i,o,l,u){const c=[s/r,r],h=e.values,p=t.values;if(0===s)return qr(n,t.dtype);const d=qr(c,t.dtype);d.values.fill(l);for(let e=0;e<a;e++){const a=[];let l=0;for(let t=0;t<i;t++){const n=h[e*i+t];a.push(n),l+=n*o[t]}if(l<0||l>=s/r)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<r;n++)u?d.values[l*r+n]+=p[e*r+n]:d.values[l*r+n]=0===t.rank?p[0]:p[e*r+n]}return d}const MN={kernelName:Sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=xu(0,r,i),p=ON(n.bufferSync(r),n.bufferSync(a),i,h,u,l,o,c,0,!0);return n.makeTensorInfo(i,p.dtype,p.values)}},LN={kernelName:Tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t;Ux([s,r,a],"select");const i=s.shape.length,o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=Hs(r.dtype,a.dtype),h=te(F(r.shape),c);let p=0;const d=0===i||i>1||1===r.shape.length?1:F(r.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<d;t++)1===o[e]?h[p++]=l[e]:h[p++]=u[e];return n.makeTensorInfo(r.shape,c,h)}},zN=wu,PN=ku,BN=jx(En,(e=>e>=0?PN*e:zN*(Math.exp(e)-1))),WN={kernelName:En,backendName:"cpu",kernelFunc:BN},VN=jx(_n,(e=>1/(1+Math.exp(-e)))),UN={kernelName:_n,backendName:"cpu",kernelFunc:VN},GN=jx(Dn,(e=>e<0?-1:e>0?1:0)),HN={kernelName:Dn,backendName:"cpu",kernelFunc:GN},jN=jx(Rn,(e=>Math.sin(e))),KN={kernelName:Rn,backendName:"cpu",kernelFunc:jN},qN=jx(Fn,(e=>Math.sinh(e))),XN={kernelName:Fn,backendName:"cpu",kernelFunc:qN},YN=Math.log(1.1920928955078125e-7)+2,JN=jx(On,(e=>{const t=e>-YN,n=e<YN,s=Math.exp(e);let r;return r=n?s:t?e:Math.log(1+s),r})),ZN={kernelName:On,backendName:"cpu",kernelFunc:JN},QN={kernelName:zn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;Ux([r],"spaceToBatchND");const o=F(a),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=fN.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),c=hu(u.shape,a,o,!1),h=pu(c.length,a.length,!1),p=du(u.shape,a,o,!1),d=vw({inputs:{x:u},backend:n,attrs:{shape:c}}),f=Ow({inputs:{x:d},backend:n,attrs:{perm:h}}),m=vw({inputs:{x:f},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}},e$={kernelName:Gn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:p}=xu(0,r,o),d=ON(n.bufferSync(r),n.bufferSync(a),o,p,c,u,l,h,n.data.get(i.dataId).values[0],!1);return n.makeTensorInfo(o,d.dtype,d.values)}},t$={kernelName:Pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=P(i,r.shape)[0],l=zu(r,a,o),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map((e=>{const t=[...c];t[o]=e;const s=ok({inputs:{x:r},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,s}))}},n$=jx(Mn,(e=>Math.sqrt(e))),s$={kernelName:Mn,backendName:"cpu",kernelFunc:n$},r$={kernelName:Vn,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;Ux(n,"square");const r=s.data.get(n.dataId).values,a=new Float32Array(r.length);for(let e=0;e<r.length;++e){const t=r[e];a[e]=t*t}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},a$=ew(((e,t)=>{const n=e-t;return n*n})),i$=gw(Wn,a$),o$={kernelName:Wn,backendName:"cpu",kernelFunc:i$},l$=jx(ns,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),u$={kernelName:ns,backendName:"cpu",kernelFunc:l$};function c$(e,t,n,s){const r=qr(e,t.dtype);for(let e=0;e<r.size;e++){const a=r.indexToLoc(e),i=new Array(a.length);for(let e=0;e<i.length;e++)i[e]=a[e]*n[e]+s[e];r.set(t.get(...i),...a)}return r}const h$={kernelName:Hn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s;Ux(r,"stridedSlice");const{nonStrided:d,$begin:f,$strides:m,size:g,newShape:y,outShape:b}=Ia(r.shape,a,i,o,l,u,c,h,p),x=vw({inputs:{x:r},backend:n,attrs:{shape:y}});let w;if(d){const e=ok({inputs:{x},backend:n,attrs:{begin:f,size:g}});w=vw({inputs:{x:e},backend:n,attrs:{shape:b}}),n.disposeIntermediateTensorInfo(e)}else if(b.some((e=>0===e)))w=n.makeTensorInfo(b,r.dtype,[]);else{const e=c$(b,n.bufferSync(x),m,f);w=n.makeTensorInfo(e.shape,e.dtype,e.values)}const k=vw({inputs:{x:w},backend:n,attrs:{shape:b}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(w),k}},p$=jx(jn,(e=>Math.tan(e))),d$={kernelName:jn,backendName:"cpu",kernelFunc:p$},f$=jx(Kn,(e=>Math.tanh(e)));function m$(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const s=qr(n,e.dtype);for(let t=0;t<s.values.length;++t){const n=s.indexToLoc(t),r=new Array(e.rank);for(let t=0;t<r.length;t++)r[t]=n[t]%e.shape[t];const a=e.locToIndex(r);s.values[t]=e.values[a]}return s}function g$(e,t,n,s,r){const a=t[t.length-1],[i,o]=[e.length/a,a],l=W(n,i*s),u=W("int32",i*s);for(let t=0;t<i;t++){const n=t*o,r=e.subarray(n,n+o),a=[];for(let e=0;e<r.length;e++)a.push({value:r[e],index:e});a.sort(((e,t)=>t.value-e.value));const i=t*s,c=l.subarray(i,i+s),h=u.subarray(i,i+s);for(let e=0;e<s;e++)c[e]=a[e].value,h[e]=a[e].index}const c=t.slice();return c[c.length-1]=s,[qr(c,n,l),qr(c,"int32",u)]}const y$={kernelName:Yn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=n,[c,h,p,d]=r.shape,[f,m]=null!=u?u:[h,p],g=[c,f,m,d],y=J(r.shape),b=y[0],x=y[1],w=y[2],k=W(r.dtype,F(g));k.fill(l);const v=s.data.get(r.dataId).values,I=s.data.get(a.dataId).values;for(let e=0;e<c;++e){const t=1===a.shape[0]?I:I.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let s=0;s<m;++s)for(let r=0;r<d;++r){let a;const u=t[6]*s+t[7]*n+1;if(0===u)continue;const c=(t[0]*s+t[1]*n+t[2])/u,d=(t[3]*s+t[4]*n+t[5])/u,f=b$(c,p,o),m=b$(d,h,o);switch(i){case"nearest":a=w$(v,h,p,b,x,w,e,m,f,r,l);break;case"bilinear":a=k$(v,h,p,b,x,w,e,m,f,r,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}k[e*b+n*x+s*w+r]=a}return s.makeTensorInfo(g,r.dtype,k)}return{dataId:s.write(k,g,r.dtype),shape:r.shape,dtype:r.dtype}}};function b$(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return C(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return C(0,n,t-1)}(e,t);case"nearest":return function(e,t){return C(0,e,t-1)}(e,t);default:return function(e,t){return e}(e)}}function x$(e,t,n,s,r,a,i,o,l,u,c){return 0<=o&&o<t&&0<=l&&l<n?e[i*s+o*r+l*a+u]:c}function w$(e,t,n,s,r,a,i,o,l,u,c){return x$(e,t,n,s,r,a,i,Math.round(o),Math.round(l),u,c)}function k$(e,t,n,s,r,a,i,o,l,u,c){const h=Math.floor(o),p=Math.floor(l),d=h+1,f=p+1;return(d-o)*((f-l)*x$(e,t,n,s,r,a,i,h,p,u,c)+(l-p)*x$(e,t,n,s,r,a,i,h,f,u,c))+(o-h)*((f-l)*x$(e,t,n,s,r,a,i,d,p,u,c)+(l-p)*x$(e,t,n,s,r,a,i,d,f,u,c))}function v$(e,t,n,s){const r=P(t,n)[0],a=[1,n[0],1];for(let e=0;e<r;e++)a[0]*=n[e];a[1]=n[r];for(let e=r+1;e<n.length;e++)a[2]*=n[e];const i={},o=new Int32Array(n[r]),l=new Fs(a,s,e),u=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[r];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)e.push(l.get(n,t,s));n=e.join(",")}if(void 0!==i[n])o[t]=i[n];else{const e=Object.keys(i).length;i[n]=e,o[t]=e,u.push(t)}}const h=a.slice();h[1]=Object.keys(i).length;const p=new Fs(h,s);u.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)p.set(l.get(n,e,s),n,t,s)}));const d=n.slice();return d[r]=h[1],{outputValues:p.values,outputShape:d,indices:o}}const I$={kernelName:es,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s;Ux(r,"unsortedSegmentSum");const o=[],l=[],u=r.shape.length-a.shape.length;let c=a;for(let e=0;e<u;++e){const t=uv({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<i;++e){const t=gs(e,"int32"),s=n.makeTensorInfo([],"int32",t),a=Yk({inputs:{a:s,b:c},backend:n}),i=fw({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),u=gv({inputs:{a:i,b:r},backend:n}),h=MI({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});o.push(h),l.push(s),l.push(a),l.push(i),l.push(u),l.push(h)}const h=pN({inputs:o,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},N$=[Cw,Tw,Aw,Fw,kw,Dw,Lw,zw,Pw,Bw,Vw,Gw,jw,Xw,Jw,tk,nk,sk,rk,$w,ak,uk,pk,mw,gk,bk,cw,xk,Nk,Sk,Tk,Ck,Ak,Rk,Ek,Dk,Ok,Mk,Lk,zk,Pk,Wk,Vk,Uk,Gk,Hk,Kk,jk,wv,Xx,qk,Jk,av,lv,cv,dv,Tv,Av,Rv,_v,Lv,zv,Pv,Bv,Vv,Hv,qv,Jx,Xv,vk,Jv,Qv,tI,Qx,rI,oI,uI,pI,fI,yI,xI,vI,II,NI,AI,RI,FI,DI,_I,OI,SI,zI,PI,VI,UI,jI,YI,yv,ZI,eN,nN,rN,oN,lN,hN,dN,fN,yN,sw,xN,kN,dw,IN,aw,ow,Iw,NN,$N,CN,SN,TN,EN,RN,_N,MN,LN,WN,UN,HN,KN,XN,lk,XI,ZN,QN,e$,t$,s$,r$,o$,u$,h$,Nv,LI,d$,{kernelName:Kn,backendName:"cpu",kernelFunc:f$},{kernelName:qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;Ux(r,"tile");const i=m$(n.bufferSync(r),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:Xn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s;Ux(r,"topk");const o=n.data.get(r.dataId).values,[l,u]=g$(o,r.shape,r.dtype,a);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},Mw,y$,{kernelName:Zn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;Ux(a,"unique");const i=s.data.get(a.dataId).values,{outputValues:o,outputShape:l,indices:u}=v$(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:Qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r.shape.length,o=r.shape[a],l=new Array(i-1);let u=0;for(let e=0;e<i;e++)e!==a&&(l[u++]=r.shape[e]);const c=new Array(i).fill(0),h=r.shape.slice();h[a]=1;const p=new Array(o);for(let e=0;e<p.length;e++){c[a]=e;const t=ok({inputs:{x:r},backend:n,attrs:{begin:c,size:h}});p[e]=vw({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return p}},I$,cN];for(const e of N$)ds(e);const $$={},C$={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function S$(e){if(!(e in $$)){const t=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);return t.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete $$[e]}),!1),1===e?t.getContext("webgl",C$)||t.getContext("experimental-webgl",C$):t.getContext("webgl2",C$)}(e);if(null===t)return console.log("Could not get context for WebGL version",e),null;$$[e]=t}const t=$$[e];return t.isContextLost()?(delete $$[e],S$(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),$$[e])}var T$,E$,A$;function R$(e,t){return[t,e]}function F$(e){const t=F(e);return O(Math.ceil(t/4))}function D$(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function _$(e,t){const n=e;let s,r,a,i,o,l,u,c,h,p;return 2===ue().getNumber("WEBGL_VERSION")?(s=n.R32F,r=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,u=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT):(s=e.RGBA,r=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT),l=e.RGBA,{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function O$(e,t){const n=t();return ue().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}function M$(e){return!!(ue().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function L$(e,t){return H$(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(T$||(T$={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(E$||(E$={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(A$||(A$={}));const z$=/ERROR: [0-9]+:([0-9]+):/g;function P$(e,t){if(O$(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function B$(e,t,n,s,r,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(O$(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,s))),O$(e,(()=>e.vertexAttribPointer(o,r,e.FLOAT,!1,a,i))),O$(e,(()=>e.enableVertexAttribArray(o))),!0)}function W$(e,t,n,s){O$(e,(()=>function(e,t,n){(function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)})(e,n),O$(e,(()=>e.activeTexture(e.TEXTURE0+n))),O$(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,s))),O$(e,(()=>e.uniform1i(n,s)))}function V$(e,t,n){O$(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),O$(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function U$(e,t){O$(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),O$(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function G$(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function H$(e,t,n){const s=O$(e,(()=>t()));if(null==s)throw new Error(n);return s}function j$(e,t=2){return F(e.slice(0,e.length-t))}function K$(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function q$(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[j$(e),...K$(e)]),t}function X$(e){return e%2==0}function Y$(e,t){if(D(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],s=t.slice(-1)[0];if(n===s)return!0;if(X$(n)&&X$(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&X$(e[0])&&X$(t[0])}let J$,Z$;function Q$(e,t){return null!=e.getExtension(t)}function eC(e){try{if(null!=S$(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function tC(e){const t=_$(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),r}function nC(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&T("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const sC=ue();function rC(){let e,t,n,s,r,a,i,o,l,u;return 2===ue().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",r="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",r="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:r,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function aC(e,t,n="index"){const s=J(t);return s.map(((t,r)=>`int ${e[r]} = ${n} / ${t}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`)).join("")}function iC(e){const t=J(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}sC.registerFlag("HAS_WEBGL",(()=>sC.getNumber("WEBGL_VERSION")>0)),sC.registerFlag("WEBGL_VERSION",(()=>eC(2)?2:eC(1)?1:0)),sC.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),sC.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===sC.get("WEBGL_VERSION"))),sC.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),sC.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),sC.registerFlag("WEBGL_PACK",(()=>sC.getBool("HAS_WEBGL"))),sC.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>sC.getBool("WEBGL_PACK"))),sC.registerFlag("WEBGL_PACK_CLIP",(()=>sC.getBool("WEBGL_PACK"))),sC.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>!1)),sC.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>sC.getBool("WEBGL_PACK"))),sC.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>sC.getBool("WEBGL_PACK"))),sC.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>sC.getBool("WEBGL_PACK"))),sC.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>sC.getBool("WEBGL_PACK"))),sC.registerFlag("WEBGL_PACK_REDUCE",(()=>sC.getBool("WEBGL_PACK"))),sC.registerFlag("WEBGL_LAZILY_UNPACK",(()=>sC.getBool("WEBGL_PACK"))),sC.registerFlag("WEBGL_CONV_IM2COL",(()=>sC.getBool("WEBGL_PACK"))),sC.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==J$){const t=S$(e);J$=t.getParameter(t.MAX_TEXTURE_SIZE)}return J$}(sC.getNumber("WEBGL_VERSION")))),sC.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==Z$){const t=S$(e);Z$=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Z$)}(sC.getNumber("WEBGL_VERSION")))),sC.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=sC.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=S$(e);return t=Q$(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:Q$(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),sC.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>sC.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!sr())),sC.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=S$(e);if(1===e){if(!Q$(t,"OES_texture_float"))return!1}else if(!Q$(t,"EXT_color_buffer_float"))return!1;return tC(t)}(sC.getNumber("WEBGL_VERSION")))),sC.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!sC.getBool("WEBGL_FORCE_F16_TEXTURES")&&sC.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),sC.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>function(e){if(0===e)return!1;const t=S$(e);if(1!==e){if(Q$(t,"EXT_color_buffer_float"))return tC(t);const e="EXT_color_buffer_half_float";if(Q$(t,e)){const n=t.getExtension(e);return function(e,t){const n=_$(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(r),a}(t,n)}return!1}return!!Q$(t,"OES_texture_float")&&!!Q$(t,"WEBGL_color_buffer_float")&&tC(t)}(sC.getNumber("WEBGL_VERSION")))),sC.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=sC.getNumber("WEBGL_VERSION"))&&null!=S$(e).fenceSync;var e})),sC.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>sC.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),sC.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),sC.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>sr()&&sC.getBool("IS_CHROME")?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)}));const oC="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";class lC{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=T$.DENSE;const t=F$(e),n=rC();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${aC(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class uC{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=T$.DENSE;const t=F$(e),n=rC();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${aC(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class cC{constructor(e){this.variableNames=["A"],this.outTexUsage=E$.DOWNLOAD;const t=rC();this.outputShape=e,this.userCode=`\n      ${oC}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class hC{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=E$.DOWNLOAD;const t=rC();this.outputShape=e,this.userCode=`\n      ${oC}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class pC{constructor(e,t,n=!1){this.variableNames=["A"];const s=rC(),[r,a]=t;this.outputShape=e;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${iC(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${r}.0);\n        vec4 values = ${s.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${s.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class dC{constructor(e,t,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const s=rC(),[r,a]=t;this.outputShape=e;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let n=0;n<=1;n++){const o=2*t+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${e[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${t} < ${e[1]}) {\n              localCoords[1] += ${t};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${r}.0);\n              values = ${s.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${iC(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${s.output} = ${o};\n      }\n    `}}function fC(e,t,n,s,r,a){!function(e,t){const n=ue().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return H$(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return O$(e,(()=>e.bindTexture(o,i))),O$(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),O$(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),O$(e,(()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST))),O$(e,(()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST))),O$(e,(()=>e.texImage2D(o,0,s,t,n,0,r,a,null))),O$(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),i}function mC(e){return e.internalFormatFloat}function gC(e){return e.internalFormatHalfFloat}function yC(e){return e.downloadTextureFormat}function bC(e){return e.internalFormatPackedFloat}function xC(e){return e.internalFormatPackedHalfFloat}class wC{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=ue().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){$$[e]=t}(t,e)):this.gl=S$(t);let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(1===ue().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=L$(this.gl,e),Q$(this.gl,t))this.textureHalfFloatExtension=L$(this.gl,t);else if(ue().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),Q$(this.gl,s))this.colorBufferHalfFloatExtension=L$(this.gl,s);else if(ue().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",Q$(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!Q$(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=function(e){return function(e,t){const n=H$(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return O$(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),O$(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(e){return function(e,t){const n=H$(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return O$(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),O$(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(e){return H$(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=_$(this.gl,this.textureHalfFloatExtension)}get debug(){return ue().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;O$(e,(()=>e.finish())),O$(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),O$(e,(()=>e.deleteFramebuffer(this.framebuffer))),O$(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),O$(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),O$(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=R$(t,n);return fC(e,r,a,mC(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=R$(t,n);return fC(e,r,a,gC(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=R$(t,n);return fC(e,r,a,yC(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){O$(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?O$(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):O$(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),O$(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),function(e,t,n,s,r,a){let i,o,l;O$(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),r instanceof Uint8Array?(i=new Uint8Array(n*s*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*s*4),o=e.FLOAT,l=a.internalFormatPackedFloat),i.set(r),O$(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,o,i))),O$(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=D$(t,n);return fC(e,r,a,xC(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=D$(t,n);return fC(e,r,a,bC(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(U$(this.gl,this.framebuffer),this.outputTexture=null),O$(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,s){const[r,a]=R$(t,n),i=new Uint8Array(t*n*4);return O$(e,(()=>e.readPixels(0,0,r,a,s.downloadTextureFormat,e.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,s,r,a){return function(e,t,n,s,r,a,i,o){const l=e,u=new Float32Array(function(e,t){const[n,s]=D$(e,t);return n*s*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,e,0,0,0,r,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,r=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n,s){const r=e.createBuffer();O$(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r)));const a=16*t*n;return O$(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),O$(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),O$(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),r}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(ue().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,r=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(r,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=r}else ue().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,ue().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const s=new Float32Array(t*n*4);return O$(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s))),s}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=function(e,t){const n=H$(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(O$(e,(()=>e.shaderSource(n,t))),O$(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=z$.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],r=e.split("\n"),a=r.length.toString().length+2,i=r.map(((e,t)=>M((t+1).toString(),a)+e));let o=0;for(let e=0;e<i.length;e++)o=Math.max(i[e].length,o);const l=i.slice(0,s-1),u=i.slice(s-1,s),c=i.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${M(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(t,e),s=function(e){const t=rC();return function(e,t){const n=H$(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(O$(e,(()=>e.shaderSource(n,t))),O$(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(t),r=function(e){return H$(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return O$(t,(()=>t.attachShader(r,s))),O$(t,(()=>t.attachShader(r,n))),function(e,t){if(O$(e,(()=>e.linkProgram(t))),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,r),this.debug&&P$(t,r),this.vertexAttrsAreBound||(this.setProgram(r),this.vertexAttrsAreBound=function(e,t,n){return O$(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),B$(e,t,"clipSpacePos",n,3,20,0)&&B$(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),r}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&O$(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&P$(this.gl,this.program),O$(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return H$(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),O$(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),W$(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,r]=D$(t,n);this.setOutputMatrixTextureDriver(e,s,r)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&P$(this.gl,this.program),G$(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),O$(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),O$(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=L$(this.gl,2===ue().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===ue().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===ue().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await L((()=>this.disposed||this.isQueryAvailable(e,ue().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,ue().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||L((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),V$(this.gl,e,this.framebuffer),this.debug&&G$(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(V$(this.gl,this.outputTexture,this.framebuffer),this.debug&&G$(this.gl)):U$(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;V$(s,e,this.framebuffer),this.debug&&G$(s),this.outputTexture=e,O$(s,(()=>s.viewport(0,0,t,n))),O$(s,(()=>s.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),O$(this.gl,(()=>this.gl.scissor(e,t,n,s)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{getBroadcastDims:kC}=s;function vC(e,t,n,s){const r=[];e.forEach((e=>{const t=F(e.shapeInfo.logicalShape);e.shapeInfo.isUniform?r.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(r.push(`uniform sampler2D ${e.name};`),r.push(`uniform int offset${e.name};`))}));const a=r.join("\n"),i=e.map((e=>function(e,t,n=!1){let s="";s+=n?NC(e):IC(e);const r=e.shapeInfo.logicalShape,a=t.logicalShape;return r.length<=a.length&&(s+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=kC(e.shapeInfo.logicalShape,t.logicalShape),l=RC(i),u=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map((e=>`coords.${h[e+u]} = 0;`)).join("\n");let p="";p=i<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${h[t+u]}`)).join(", ");let d="return outputValue;";const f=1===F(e.shapeInfo.logicalShape),m=1===F(t.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=a-2,t=a-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?d="return vec4(outputValue.x);":o.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${p});\n      ${d}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=t.texShape,i=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===l&&null==e.shapeInfo.flatOffset&&D(i,a))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=RC(l),c=kC(e.shapeInfo.logicalShape,t.logicalShape),h=l-o;let p;const d=["x","y","z","w","u","v"];p=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${d[e+h]} = 0;`)).join("\n");let f="";return f=l<2&&o>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+h]}`)).join(", "),`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${p}\n      return get${s}(${f});\n    }\n  `}(e,t)),s}(e,t,s))).join("\n"),o=t.texShape,l=rC(),u=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let c,h,p=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${$C}\n    ${CC}\n    ${SC}\n  `}(l);return t.isPacked?(c=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===n[0]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,t);case 2:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(D(e,t))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const s=Math.ceil(e[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[2]/2),r=s*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t);default:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[e.length-1]/2),r=s*Math.ceil(e[e.length-2]/2);let a=r,i="",o="b, r, c";for(let t=2;t<e.length-1;t++)a*=e[e.length-t-1],i=`\n      int b${t} = index / ${a};\n      index -= b${t} * ${a};\n    `+i,o=`b${t}, `+o;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${e.length}(${o});\n    }\n  `}(e,t)}}(t.logicalShape,o),h=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(l)):(c=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return 1===(n=t)[0]?`\n      int getOutputCoords() {\n        return int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return resTexRC.x * ${n[1]} + resTexRC.y;\n    }\n  `;case 2:return function(e,t){return D(e,t)?`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=aC(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(e,t);case 4:return function(e,t){const n=aC(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t);case 5:return function(e,t){const n=aC(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=aC(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}var n}(t.logicalShape,o),h=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),s&&(p+=TC),[p,u,h,a,c,i,n].join("\n")}function IC(e){const t=e.shapeInfo.logicalShape;switch(t.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`float ${n}() {return ${t};}`;const[s,r]=e.shapeInfo.texShape;if(1===s&&1===r)return`\n      float ${n}() {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const[a,i]=e.shapeInfo.texShape;return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${EC(t)});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${AC(e)}\n      }\n    `;const s=e.shapeInfo.texShape,r=s[0],a=s[1];if(1===a&&1===r)return`\n      float ${n}(int index) {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const i=EC(t);return 1===a?`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${r}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `:1===r?`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${t}, uv);\n      }\n    `:`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${r}, ${a}, index + ${i});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape;if(null!=r&&D(t,r)){const e=r[0];return`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${r[1]}.0, ${e}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:a,keptDims:i}=B(t),o=a;if(o.length<t.length){const t=["row","col"];return`\n      ${IC(FC(e,o))}\n      float ${s}(int row, int col) {\n        return ${s}(${DC(t,i)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));\n        ${AC(e)}\n      }\n    `;const l=r[0],u=r[1],c=EC(n);return 1===u?`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `:1===l?`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${t[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${l}, ${u}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[1]*t[2],a=t[2],{newShape:i,keptDims:o}=B(t),l=i;if(l.length<t.length){const t=["row","col","depth"];return`\n        ${IC(FC(e,l))}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${DC(t,o)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${r}, ${a}, 1)));\n        ${AC(e)}\n      }\n    `;const u=e.shapeInfo.texShape,c=u[0],h=u[1],p=e.shapeInfo.flatOffset;if(h===r&&null==p)return`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===a&&null==p)return`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r} + col * ${a} + depth + ${EC(n)};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(e);case 4:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[3],a=t[2]*r,i=t[1]*a,{newShape:o,keptDims:l}=B(t);if(o.length<t.length){const t=["row","col","depth","depth2"];return`\n      ${IC(FC(e,o))}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${DC(t,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${r}, 1)));\n        ${AC(e)}\n      }\n    `;const u=e.shapeInfo.flatOffset,c=e.shapeInfo.texShape,h=c[0],p=c[1];if(p===i&&null==u)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===r&&null==u)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${t[1]*t[2]}, ${t[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${r} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${p}, index + ${EC(n)});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[4],a=t[3]*r,i=t[2]*a,o=t[1]*i,{newShape:l,keptDims:u}=B(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${IC(FC(e,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${DC(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${r})) +\n          depth3;\n        ${AC(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${r} + depth3 + ${EC(n)};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:a}=B(t);if(r.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${IC(FC(e,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${DC(t,a)});\n      }\n    `}const i=t[5],o=t[4]*i,l=t[3]*o,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${AC(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${EC(n)};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${t.length}-D input sampling is not yet supported`)}}function NC(e){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${rC().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),s=e.shapeInfo.texShape,r=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],a=rC();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${r[0]}, ${r[1]}, index);\n      return ${a.texture2D}(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=r[0],i=r[1],o=rC();if(null!=r&&D(t,r))return`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${o.texture2D}(${n}, uv);\n      }\n    `;const l=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(t[1]/2)}, ${l[0]}, ${l[1]}, row, col);\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];if(1===t[0]){const n=[1,2],r=["b","row","col"];return`\n        ${NC(FC(e,t.slice(1)))}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${DC(r,n)});\n        }\n      `}const i=a[0],o=a[1],l=Math.ceil(t[2]/2);return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${l*Math.ceil(t[1]/2)}, ${l}, b, row, col);\n      return ${rC().texture2D}(${n}, uv);\n    }\n  `}(e);default:return function(e){const t=e.shapeInfo.logicalShape,n=t.length,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],l=i[1],u=Math.ceil(t[n-1]/2);let c=u*Math.ceil(t[n-2]/2),h="int b, int row, int col",p=`b * ${c} + (row / 2) * ${u} + (col / 2)`;for(let e=2;e<n-1;e++)h=`int b${e}, `+h,c*=t[n-e-1],p=`b${e} * ${c} + `+p;return`\n    vec4 ${r}(${h}) {\n      int index = ${p};\n      int texR = index / ${l};\n      int texC = index - texR * ${l};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${o});\n      return ${rC().texture2D}(${s}, uv);\n    }\n  `}(e)}}const $C="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",CC="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",SC="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",TC="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function EC(e){return`offset${e}`}function AC(e){const t=e.name,n=F(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function RC(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function FC(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function DC(e,t){return t.map((t=>e[t])).join(", ")}function _C(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const s=e.logicalShape,r=t[n],a=r.shape;if(!D(s,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${a} must match`);if(e.isUniform&&r.isUniform)return;const i=e.texShape,o=r.isUniform?null:r.texData.texShape;if(!D(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)}))}const{addImpl:OC,bincountImpl:MC,bincountReduceImpl:LC,ceilImpl:zC,concatImpl:PC,expImpl:BC,expm1Impl:WC,floorImpl:VC,gatherV2Impl:UC,greaterImpl:GC,lessImpl:HC,linSpaceImpl:jC,logImpl:KC,maxImpl:qC,maximumImpl:XC,minimumImpl:YC,multiplyImpl:JC,negImpl:ZC,prodImpl:QC,rangeImpl:eS,rsqrtImpl:tS,simpleAbsImpl:nS,sliceImpl:sS,stridedSliceImpl:rS,subImpl:aS,tileImpl:iS,topKImpl:oS,transposeImpl:lS,uniqueImpl:uS}=k;function cS(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function hS(e,t){return 1===t?[e]:cS(e,t)}class pS{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=hS("rc",t),s=RC(t),r=function(e,t,n){if(1===e)return`rc > ${t[0]}`;let s="";for(let r=e-2;r<e;r++)s+=`${n[r]} >= ${t[r]}`,r<e-1&&(s+="||");return s}(t,e,n),a=function(e,t,n,s){if(1===e)return"";const r=s.slice(-2);return`\n    int r = ${r[0]};\n    int c = ${r[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),i=function(e,t){const n=e.length,s=function(e,t){const n=[];for(let s=0;s<=1;s++)for(let r=0;r<=1;r++){let a=`${0===s?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let n=2;n<e;n++)a=`${t[t.length-1-n]},`+a;n.push(a)}return n}(n,t);return 1===n?`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`:`getA(${s[0]}),\n          cEdge ? 0. : getA(${s[1]}),\n          rEdge ? 0. : getA(${s[2]}),\n          rEdge || cEdge ? 0. : getA(${s[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${s} rc = getOutputCoords();\n\n          if(${r}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class dS{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var s;this.userCode=`\n      ${s=t,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${aC(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${iC(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${e[1]};\n        int cols = ${e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class fS{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const s=gS(t,n),r=yS(e,s,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const a=mS(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[r].shift();return this.usedTextures[r].push(e),e}let i;return s===A$.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===A$.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===A$.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===A$.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===A$.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const r=gS(n,s),a=yS(t,r,s);a in this.freeTextures||(this.freeTextures[a]=[]);const i=mS(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s),o=ue().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[a],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function mS(e,t,n,s,r){const a=function(e,t){switch(e){case A$.PACKED_2X2_FLOAT32:return bC(t);case A$.PACKED_2X2_FLOAT16:return xC(t);case A$.UNPACKED_FLOAT32:return mC(t);case A$.UNPACKED_FLOAT16:return gC(t);case A$.PACKED_4X1_UNSIGNED_BYTE:return yC(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let i;if(r){const[t,n]=D$(e[0],e[1]);i=t*n}else{const[t,n]=R$(e[0],e[1]);i=t*n}const o=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;throw new Error(`Unknown internal format ${t}`)}(n,a);return i*o}function gS(e,t){if(e===E$.UPLOAD)return A$.PACKED_2X2_FLOAT32;if(e===E$.RENDER||null==e)return function(e){return ue().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?A$.PACKED_2X2_FLOAT32:A$.UNPACKED_FLOAT32:e?A$.PACKED_2X2_FLOAT16:A$.UNPACKED_FLOAT16}(t);if(e===E$.DOWNLOAD||e===E$.PIXELS)return A$.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function yS(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class bS{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const xS="if (isnan(x)) return x;",wS="return x;",kS="return abs(x);",vS="return (x >= 0.0) ? x : (exp(x) - 1.0);",IS=xS+"\n  return (x < 0.0) ? 0.0 : x;\n",NS=xS+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",$S="return x;",CS="return x;",SS="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",TS="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",ES="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n";class AS{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class RS{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=hS("rc",t),s=RC(t),r=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const FS=Gu,DS={};class _S extends I{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!ue().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){const e=S$(ue().getNumber("WEBGL_VERSION"));this.binaryCache=((t=ue().getNumber("WEBGL_VERSION"))in DS||(DS[t]={}),DS[t]),this.gpgpu=new wC(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=e,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=e.gl.canvas;var t;this.textureManager=new fS(this.gpgpu),this.numMBBeforeWarning=null==ue().global.screen?1024:ue().global.screen.height*ue().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new v(this,Sa())}nextDataId(){return _S.nextDataId++}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(e,t,n){if((ue().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||ue().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:E$.UPLOAD,refCount:1}),s}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,t,n,s,r){if(ue().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:E$.UPLOAD,refCount:r})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:r,slice:a,shape:i,isPacked:o}=t;if(null!=a){let t;t=o?new AS(i,$S):new bS(i,$S);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;return l&&(u=bs()),c="complex64"===s?Au(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):this.getValuesFromTexture(e),l&&(this.downloadWaitMs+=bs()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:s,slice:r,dtype:a,complexTensorInfos:i,isPacked:o}=t;if(null!=r){let t;t=o?new AS(s,$S):new bS(s,$S);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:a}],a),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if(!ue().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===ue().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==a&&ue().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture,...F$(s))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]);u=Au(e[0],e[1])}else if(null==c)u=this.getValuesFromTexture(e);else{const e=F(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}null!=l&&this.disposeIntermediateTensorInfo(l);const h=this.convertAndCacheOnCPU(e,u),p=this.pendingRead.get(e);return this.pendingRead.delete(e),p.forEach((e=>e(h))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&Sa().removeDataId(e,this),this.pendingDeletes--),h}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>ws(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return qr(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!M$(n)){if(ue().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),r=F(t);if(ue().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(s.texture,...F$(t)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),a}const a=ue().getBool("WEBGL_PACK")&&!0===s,i=a?q$(t):t,o=a?new hC(i):new cC(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture,u.texShape[0],u.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return ue().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}async time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const r=R(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=R(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,s&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(ue().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(r);i.kernelMs=function(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return ue().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:bs(),endMs:null}}endTimer(e){return ue().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=bs(),e)}async getQueryTime(e){if(ue().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:r,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,r,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}getCPUBackend(){return ue().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Sa().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(e,t=128){const n=this.getCPUBackend();return ue().getBool("IS_TEST")||this.warnedAboutCPUBackend||null!=n||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&e.every((e=>null==this.texData.get(e.dataId).texture&&F(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){Tu("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return FS(e.shape,t)}packedUnaryOp(e,t,n){const s=new AS(e.shape,t),r=this.compileAndRun(s,[e],n);return Sa().makeTensorFromDataId(r.dataId,r.shape,r.dtype)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=nS(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(ue().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,kS,e.dtype);const t=new bS(e.shape,kS),n=this.compileAndRun(t,[e]);return Sa().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&j(n[0])){const r=n.map((e=>xs(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:s}=this.makeTensorInfo(e,t,n);return Sa().makeTensorFromDataId(s,e,t,this)}unpackTensor(e){const t=new RS(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new pS(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[j$(e.shape),...K$(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},r=[j$(t),...K$(t)],a=new dS(r,n),i=this.runWebGLProgram(a,[s],e.dtype,null,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:s,dtype:r}=t,a=q$(s);let i;return i=n?new uC(a):new lC(a),{dtype:r,shape:s,dataId:this.runWebGLProgram(i,[{shape:a,dtype:r,dataId:e}],r,null,!0).dataId}}runWebGLProgram(e,t,n,s,r=!1){const a=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(a.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===T$.DENSE){const t=F$(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===F(a.shape))return i.values=W(a.dtype,0),a;const o=[],l=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&F(t.shape)<=ue().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}else if(!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),o.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!Y$(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),o.push(t),n=this.texData.get(t.dataId),e.shape=s}return this.uploadToGPU(t.dataId),{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(a.dataId);const u={shape:a.shape,texData:i,isUniform:!1},c=function(e,t,n){let s="";t.concat(n).forEach((e=>{const t=null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0,n=e.isUniform?"uniform":e.texData.texShape;s+=`${e.shape}_${n}_${t}`}));const r=e.userCode;let a=e.constructor.name;return a+="_"+s+"_"+r,a}(e,l,u),h=this.getAndSaveBinary(c,(()=>function(e,t,n,s){const r=t.userCode,a=n.map(((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}})),i=a.map((e=>e.shapeInfo)),o={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},l=vC(a,o,r,t.packedInputs),u=e.createProgram(l);let c=null;const h=e.getUniformLocation(u,"NAN",!1);1===ue().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(u,"INFINITY",!1));const p={};for(let n=0;n<t.variableNames.length;n++){const s=t.variableNames[n],r=!1;p[s]=e.getUniformLocation(u,s,r),p[`offset${s}`]=e.getUniformLocation(u,`offset${s}`,r)}return{program:t,source:l,webGLProgram:u,uniformLocations:p,inShapeInfos:i,outShapeInfo:o,infLoc:c,nanLoc:h}}(this.gpgpu,e,l,u))),p=null!=this.activeTimers;let d;p&&(d=this.startTimer()),function(e,t,n,s,r){_C(t.inShapeInfos,n),_C([t.outShapeInfo],[s]);const a=s.texData.texture,i=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(a,i[0],i[1]):e.setOutputMatrixTexture(a,i[0],i[1]),e.setProgram(t.webGLProgram),1===ue().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,s)=>{const r=t.program.variableNames[s],a=t.uniformLocations[r],i=t.uniformLocations[`offset${r}`];if(null!=a)if(n.isUniform)if(F(n.shape)<2)e.gl.uniform1f(a,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture,a,s)})),null!=r&&r(e,t.webGLProgram),e.executeProgram()}(this.gpgpu,h,l,u,s),o.forEach((e=>this.disposeIntermediateTensorInfo(e))),p&&(d=this.endTimer(d),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(d)}));const f=ue().get("WEBGL_FLUSH_THRESHOLD");if(f>0){const e=bs();e-this.lastGlFlushTime>f&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!ue().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===r){const e=this.unpackTensor(a);return this.disposeIntermediateTensorInfo(a),e}return a}compileAndRun(e,t,n,s,r=!1){return n=n||t[0].dtype,this.runWebGLProgram(e,t,n,s,r)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(ue().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Ea((()=>{if(!ue().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=ue().getBool("DEBUG");ue().set("DEBUG",!1);const t=this.abs(Oa(1e-8)).dataSync()[0];if(ue().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:r,texture:a,usage:i,isPacked:o}=t;if(null!=a)return;const l=null!=this.activeTimers;let u;l&&(u=bs());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=ue().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,n)=>n>=e.length-2?S(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=B(e);e=t.newShape}let s=F(e);if(e.length<=1&&s<=n)return[1,s];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=j$(e);let n=2,r=2;return e.length&&([n,r]=K$(e)),s=t*(n/2)*(r/2),O(s).map((e=>2*e))}return O(s)}(n,o),t.texShape=c),null!=r){const e=q$(n);let a,i=c[1],h=c[0];const p=r instanceof Uint8Array;o?([i,h]=D$(c[0],c[1]),a=new dC(e,[h,i],p)):a=new pC(e,[h,i],p);const d=this.makeTensorInfo([h,i],s);this.texData.get(d.dataId).usage=p?E$.PIXELS:E$.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(d.dataId),i,h,r);const f=!0,m=this.runWebGLProgram(a,[d],s,null,f),g=this.texData.get(m.dataId);t.texture=g.texture,t.texShape=g.texShape,t.isPacked=g.isPacked,t.usage=g.usage,this.disposeIntermediateTensorInfo(d),this.texData.delete(m.dataId),t.values=null,l&&(this.uploadWaitMs+=bs()-u)}else{const e=this.acquireTexture(c,i,s,o);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*H(t)}}_S.nextDataId=0,rr()&&Da("webgl",(()=>new _S),2);const OS="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class MS{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=$i(t,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const LS="\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n";class zS{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=$i(t,n);const r=this.outputShape.length;let a="";if(s)if(0===r||1===F(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(a=`\n          ${RC(r)} coords = getOutputCoords();\n        `,1===r)a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=hS("coords",r);a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function PS(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const BS={kernelName:Nt,backendName:"webgl",kernelFunc:PS};function WS(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(a.dataId),o=PS({inputs:{x:s},backend:n}),l=PS({inputs:{x:r},backend:n});return i.complexTensorInfos={real:o,imag:l},a}const VS={kernelName:ze,backendName:"webgl",kernelFunc:WS},US="return (a < 0.) ? b * a : a;",GS="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",HS={kernelName:At,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s,i=n.makeTensorInfo([],"float32",gs(a,"float32")),o=ue().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new zS(GS,r.shape,i.shape):new MS(US,r.shape,i.shape),l=n.runWebGLProgram(o,[r,i],r.dtype);return n.disposeIntermediateTensorInfo(i),l}},jS="return (a < 0.) ? b * a : a;",KS="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",qS={kernelName:pn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t,a=ue().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new zS(KS,s.shape,r.shape):new MS(jS,s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}},XS="if (isnan(x)) return x;";function YS({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:r,backend:a})=>{const{x:i}=r,o=a,l=s||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,l);return o.makeTensorInfo(i.shape,l,t)}let u;return u=ue().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new AS(i.shape,t):new bS(i.shape,e),o.runWebGLProgram(u,[i],l)}}function JS({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:a}){return({inputs:i,backend:o})=>{const{a:l,b:u}=i,c=o;if(s&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,r]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,s]=t,r={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:s.dataId,dtype:s.dtype,shape:u.shape},i=new MS(e,l.shape,u.shape);return c.runWebGLProgram(i,[r,a],Hs(n.dtype,s.dtype))})),a=WS({inputs:{real:s,imag:r},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(r),a}const h=a||Hs(l.dtype,u.dtype);if(c.shouldExecuteOnCPU([l,u])&&null!=r){const e=c.texData.get(l.dataId),t=c.texData.get(u.dataId),[n,s]=r(l.shape,u.shape,e.values,t.values,h),a=c.makeTensorInfo(s,h);return c.texData.get(a.dataId).values=n,a}let p;return p=ue().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new zS(t,l.shape,u.shape,n):new MS(e,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function ZS(e,t=!1){if("linear"===e)return t?CS:wS;if("relu"===e)return t?TS:IS;if("elu"===e)return t?SS:vS;if("relu6"===e)return t?ES:NS;if("prelu"===e)return t?KS:jS;if("leakyrelu"===e)return t?GS:US;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class QS{constructor(e,t,n,s=!1,r=!1,a=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const u=s?e[1]:e[2],c=Math.ceil(u/2),h=s?"i * 2, rc.y":"rc.y, i * 2",p=r?"rc.z, i * 2":"i * 2, rc.z",d=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const eT={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class tT{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=$i(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const nT="return a * b;";function sT(e){const{inputs:t,backend:n}=e,{a:s,b:r}=t,a=Hs(s.dtype,r.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),a=new tT(eT.REAL,s.shape,r.shape),i=new tT(eT.IMAG,s.shape,r.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape}],l=n.runWebGLProgram(a,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=WS({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,r])){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),[i,o]=JC(s.shape,r.shape,e.values,t.values,a),l=n.makeTensorInfo(o,a);return n.texData.get(l.dataId).values=i,l}let i;return i=ue().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new zS(nT,s.shape,r.shape):new MS(nT,s.shape,r.shape),n.runWebGLProgram(i,[s,r],a)}const rT={kernelName:en,backendName:"webgl",kernelFunc:sT};function aT(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=n,o=F(r.shape),l=z(a,o),u=F(l);T(o===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`));const c=i.texData.get(r.dataId);return!c.isPacked||Y$(r.shape,l)||null!==c.texture&&Y$(c.shape,l)?(i.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function(e,t,n){const s=[j$(e.shape),...K$(e.shape)],r={dtype:e.dtype,shape:s,dataId:e.dataId},a=[j$(t),...K$(t)],i=new dS(a,s),o=n.runWebGLProgram(i,[r],e.dtype,null,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}(r,l,i)}const iT={kernelName:bn,backendName:"webgl",kernelFunc:aT};class oT{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];const i=4*Math.floor(n/4),o=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${_(e)?e.toPrecision(2):e}, ones);`}let u="";r%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class lT{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";r%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function uT(e,t,n,s){const r=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=uu(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let a=e;for(let i=0;i<r.length;i++){const{inSize:o,windowSize:l,outSize:u}=r[i];let c,h;c="mean"===n?0===i?new oT({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new oT({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new lT({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),h=a,a=s.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return a}class cT{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const s=RC(this.rank),r=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let t=0;t<e.length;t++)s[e[t]]=n[t];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class hT{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=RC(this.rank),r=cS("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=r[e];const i=`vec2(${a.slice(-2).join()})`,o=`++${r[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function pT(e,t,n){const s=ue().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new hT(e.shape,t):new cT(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function dT(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;return function(e,t,n,s){const r=t,a=e.shape.length,i=P(r,e.shape);let o=i;const l=to(o,a),u=null!=l;let c=e;u&&(c=pT(e,l,s),o=so(o.length,a)),eo("sum",o,a);const[h,p]=Zi(c.shape,o);let d=h;n&&(d=Qi(h,i));const f=F(p),m=aT({inputs:{x:c},attrs:{shape:[F(e.shape)/f,f]},backend:s}),g=uT(m,js(e.dtype),"sum",s),y=aT({inputs:{x:g},attrs:{shape:d},backend:s});return s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(g),u&&s.disposeIntermediateTensorInfo(c),y}(r,a,i,n)}const fT={kernelName:Ln,backendName:"webgl",kernelFunc:dT};function mT(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{perm:a}=s,i=n,o=r.shape.length,l=new Array(o);for(let e=0;e<l.length;e++)l[e]=r.shape[a[e]];let u;if(i.shouldExecuteOnCPU([r])){const e=i.texData.get(r.dataId).values,t=lS(e,r.shape,r.dtype,a,l);u=i.makeTensorInfo(l,r.dtype),i.texData.get(u.dataId).values=t}else u=pT(r,a,i);return u}const gT={kernelName:Jn,backendName:"webgl",kernelFunc:mT},yT=1e3;function bT({a:e,b:t,transposeA:n,transposeB:s,backend:r,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){const u=e.shape.length,c=t.shape.length,h=n?e.shape[u-2]:e.shape[u-1],p=s?t.shape[c-1]:t.shape[c-2],d=n?e.shape[u-1]:e.shape[u-2],f=s?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),y=F(m),b=F(g);T(u>=2&&c>=2&&(y===b||1===y||1===b),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${m}) and (${g}).`));const x=(y>b?e.shape.slice(0,-2):t.shape.slice(0,-2)).concat([d,f]);T(h===p,(()=>`Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`));const w=n?[y,h,d]:[y,d,h],k=s?[b,f,p]:[b,p,f],v=aT({inputs:{x:e},backend:r,attrs:{shape:w}}),I=aT({inputs:{x:t},backend:r,attrs:{shape:k}}),N=[v,I],$=Math.max(y,b),C=n?v.shape[1]:v.shape[2],S=null!=a,E=null!=i,A="leakyrelu"===l,R=null!=l?ZS(l,!0):null;let D;if((1===d||1===f)&&C>yT&&!1===(S||E||A||null!=R)){let e=v,t=I;n&&(e=mT({inputs:{x:v},backend:r,attrs:{perm:[0,2,1]}}),N.push(e)),s&&(t=mT({inputs:{x:I},backend:r,attrs:{perm:[0,2,1]}}),N.push(t));const a=1===f;let i=e;1!==f&&(i=aT({inputs:{x:e},backend:r,attrs:{shape:[$,C,1]}}),N.push(i));const o=1===f?2:1;let l=t;a&&(l=aT({inputs:{x:t},backend:r,attrs:{shape:[$,1,C]}}),N.push(l));const u=sT({inputs:{a:i,b:l},backend:r});D=dT({inputs:{x:u},backend:r,attrs:{axis:o,keepDims:!0}}),N.push(u)}else{const l=Hs(e.dtype,t.dtype),u=new QS(w,k,[$,d,f],n,s,S,R,E,A),c=[v,I];if(null!=a&&c.push(a),E&&c.push(i),A){const e=r.makeTensorInfo([],"float32",gs(o,"float32"));c.push(e),N.push(e)}D=r.runWebGLProgram(u,c,l)}const _=aT({inputs:{x:D},backend:r,attrs:{shape:x}});N.push(D);for(const e of N)r.disposeIntermediateTensorInfo(e);return _}const xT={kernelName:as,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return bT({a:r,b:a,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},wT="return abs(x);",kT={kernelName:fe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=nS(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let r;return r=ue().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new AS(s.shape,wT):new bS(s.shape,wT),n.runWebGLProgram(r,[s],s.dtype)}},vT=YS({opSnippet:xS+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),IT={kernelName:me,backendName:"webgl",kernelFunc:vT},NT=YS({opSnippet:xS+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),$T={kernelName:ge,backendName:"webgl",kernelFunc:NT},CT="return a + b;",ST=JS({opSnippet:CT,packedOpSnippet:CT,supportsComplex:!0,cpuKernelImpl:OC}),TT={kernelName:ye,backendName:"webgl",kernelFunc:ST};class ET{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class AT{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const RT={kernelName:be,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,r=n;if(1===r.length)return PS({inputs:{x:r[0]},backend:s});if(r.length>ue().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(r.length/2),n=e({inputs:r.slice(0,t),backend:s}),a=e({inputs:r.slice(t),backend:s});return e({inputs:[n,a],backend:s})}const a=r.map((e=>e.dtype)).reduce(((e,t)=>Hs(e,t))),i=r.map((e=>e.shape)),o=ue().getBool("WEBGL_PACK")?new AT(r[0].shape,i):new ET(r[0].shape,i);return s.runWebGLProgram(o,r,a)}},FT={kernelName:xe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=P(a,r.shape);let u=l;const c=to(u,o);let h=r;null!=c&&(h=mT({inputs:{x:r},backend:n,attrs:{perm:c}}),u=so(u.length,o)),eo("all",u,o);const[p,d]=Zi(h.shape,u),f=aT({inputs:{x:h},backend:n,attrs:{shape:[-1,F(d)]}}),m=uT(f,f.dtype,"all",n);let g;return g=aT(i?{inputs:{x:m},backend:n,attrs:{shape:Qi(p,l)}}:{inputs:{x:m},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},DT={kernelName:we,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=P(a,r.shape);let u=l;const c=to(u,o);let h=r;null!=c&&(h=mT({inputs:{x:r},backend:n,attrs:{perm:c}}),u=so(u.length,o)),eo("any",u,o);const[p,d]=Zi(h.shape,u),f=aT({inputs:{x:h},backend:n,attrs:{shape:[-1,F(d)]}}),m=uT(f,f.dtype,"any",n);let g;return g=aT(i?{inputs:{x:m},backend:n,attrs:{shape:Qi(p,l)}}:{inputs:{x:m},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};class _T{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:r,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,a];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class OT{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,T(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const r=e[e.length-1],a=Math.ceil(r/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),s||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=RC(o),u=hS("coords",o);let c,h;if(1===a){h=o+1;const e=RC(h);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[o-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[o-2]};`}else h=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),d="."+p[h-1],f=p.map((e=>"int "+e)),m=hS("sourceLocR",h-1).concat("inIdx.r"),g=hS("sourceLocG",h-1).concat("inIdx.g"),y=hS("sourceLocB",h-1).concat("inIdx.b"),b=hS("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,v=s?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${v}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function MT(e,t,n,s=null){let r=t.shape[0],a=t.shape[1];null!=s&&(r=s.shape[0],a=s.shape[1]);const i=uu(a),o={windowSize:i,inSize:a,batchSize:r,outSize:Math.ceil(a/i)},l=new _T(o,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=MT(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function LT(e,t,n,s=null){const r=null!=s?s.shape:t.shape,a=uu(r[r.length-1]),i=new OT(r,a,n,null==s),o=null==s?[t]:[t,s],l=e.runWebGLProgram(i,o,"int32");if(l.shape.length===t.shape.length){const s=LT(e,t,n,l);return e.disposeIntermediateTensorInfo(l),s}return l}function zT(e,t,n,s){const r=[n];if(eo("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!ue().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],[a,i]=Zi(t.shape,r),o=F(i),l=aT({inputs:{x:t},backend:e,attrs:{shape:[-1,o]}});n.push(l);const u=MT(e,l,s);n.push(u);const c=aT({inputs:{x:u},backend:e,attrs:{shape:a}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),c}return LT(e,t,s)}const PT={kernelName:ke,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=P(a,r.shape);const o=to(i,r.shape.length);let l=r;const u=[];null!=o&&(l=mT({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=so(i.length,l.shape.length)),eo("argMax",[i[0]],l.shape.length);const c=zT(n,l,i[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},BT={kernelName:ve,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=P(a,r.shape);const o=to(i,r.shape.length);let l=r;const u=[];null!=o&&(l=mT({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=so(i.length,l.shape.length)),eo("argMin",[i[0]],l.shape.length);const c=zT(n,l,i[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},WT=YS({opSnippet:xS+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),VT={kernelName:Ie,backendName:"webgl",kernelFunc:WT},UT=YS({opSnippet:xS+"return log(x + sqrt(x * x + 1.0));"}),GT={kernelName:Ne,backendName:"webgl",kernelFunc:UT},HT=YS({opSnippet:xS+"\n  return atan(x);\n"}),jT={kernelName:$e,backendName:"webgl",kernelFunc:HT},KT=JS({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),qT={kernelName:Se,backendName:"webgl",kernelFunc:KT},XT=YS({opSnippet:xS+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),YT={kernelName:Ce,backendName:"webgl",kernelFunc:XT};class JT{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?r?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,k=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class ZT{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const k=4*Math.floor(a/4),v=a%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const QT={kernelName:Te,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;nC(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;T(Qa(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=Ua(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&D(u.inShape,u.outShape))return PS({inputs:{x:r},backend:n});const c=new JT(u,"avg",!1);return n.runWebGLProgram(c,[r],"float32")}},eE={kernelName:Ae,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s,c=Ga(r.shape,a,i,[1,1,1],o,l,u),h=new ZT(c,"avg",!1);return n.runWebGLProgram(h,[r],"float32")}};class tE{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class nE{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const sE={kernelName:Re,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=Ga(i.shape,o,l,[1,1,1],u,c),p=new nE(h);return n.runWebGLProgram(p,[r],i.dtype)}},rE={kernelName:Ee,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;nC([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=Ua(i.shape,o,l,1,u),h=new tE(c);return n.runWebGLProgram(h,[r],i.dtype)}},aE={kernelName:Fe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;return bT({a:r,b:a,transposeA:i,transposeB:o,backend:n})}};class iE{constructor(e,t,n,s,r,a){this.outputShape=[],this.variableNames=["x","mean","variance"],$i(e,t),$i(e,n);let i="0.0";null!=s&&($i(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=r&&($i(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class oE{constructor(e,t,n,s,r,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],$i(e,t),$i(e,n);let i="vec4(0.0)";null!=s&&($i(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=r&&($i(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const lE={kernelName:xt,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:r,variance:a,offset:i,scale:o}=e;T(r.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),T(null==i||r.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),T(null==o||r.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[s,r,a];let c=null;null!=i&&(c=i.shape,u.push(i));let h=null;null!=o&&(h=o.shape,u.push(o));const p=ue().getBool("WEBGL_PACK_NORMALIZATION")?new oE(s.shape,r.shape,a.shape,c,h,l):new iE(s.shape,r.shape,a.shape,c,h,l);return t.runWebGLProgram(p,u,u[0].dtype)}};class uE{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=RC(this.rank),n=`uniform int start[${this.rank}];`,s=function(e){if(1===e)return"sourceLoc";if(e<=6)return cE.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${cE[t]} = start[${t}] + coords.${cE[t]};`)).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${r}\n        setOutput(getSource(${s}));\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}const cE=["x","y","z","w","u","v"];class hE{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length;const t=RC(this.rank),n=hS("coords",this.rank),s=hS("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,a=`getChannel(getSource(${s.join()}), ${r})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${a};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}function pE(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s,[o,l]=va(r,a,i);if(la(r,o,l),0===F(l))return n.makeTensorInfo(l,r.dtype,[]);if(n.shouldExecuteOnCPU([r])||"string"===r.dtype){const e=n.texData.get(r.dataId),t=sS(e.values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,t)}const{isPacked:u}=n.texData.get(r.dataId),c=wa(r.shape,o,l);if(u||!c){const e=ue().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new hE(l):new uE(l),t=e.getCustomSetupFunc(o);return n.runWebGLProgram(e,[r],r.dtype,t)}return n.uploadToGPU(r.dataId),function(e,t,n,s){const r=s.texData.get(e.dataId),a=s.makeTensorInfo(n,e.dtype),i=s.texData.get(a.dataId);Object.assign(i,r),i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=ka(t,J(e.shape));r.slice&&(o+=r.slice.flatOffset),i.slice={flatOffset:o,origDataId:r.slice&&r.slice.origDataId||e.dataId};const l=s.dataRefCount.get(i.slice.origDataId)||1;return s.dataRefCount.set(i.slice.origDataId,l+1),a}(r,o,l,n)}const dE={kernelName:An,backendName:"webgl",kernelFunc:pE},fE={kernelName:De,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;T(r.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),l=hu(r.shape,a,o),u=pu(l.length,a.length),c=du(r.shape,a,o),h=fu(i,a.length),p=mu(c,i,a.length),d=[],f=aT({inputs:{x:r},backend:n,attrs:{shape:l}}),m=mT({inputs:{x:f},backend:n,attrs:{perm:u}}),g=aT({inputs:{x:m},backend:n,attrs:{shape:c}}),y=pE({inputs:{x:g},backend:n,attrs:{begin:h,size:p}});return d.push(f),d.push(m),d.push(g),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}},mE={kernelName:_e,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=n.readSync(r.dataId),l=n.readSync(a.dataId),u=MC(o,l,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,u)}},gE=JS({opSnippet:"return float(a != b);",dtype:"bool"}),yE={kernelName:nn,backendName:"webgl",kernelFunc:gE};function bE(e){const{inputs:t,backend:n}=e,{input:s}=t;return PS({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const xE={kernelName:mn,backendName:"webgl",kernelFunc:bE},wE={kernelName:Oe,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:r}=t,{x:a}=n,{dtype:i}=r;if("complex64"===i){if("complex64"===a.dtype)return PS({inputs:{x:a},backend:s});const t=uo(a.shape),n=e({inputs:{x:a},backend:s,attrs:{dtype:"float32"}}),r=WS({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),r}if("complex64"===a.dtype){const t=bE({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:i}});return s.disposeIntermediateTensorInfo(t),n}if(!U(a.dtype,i)){const e=PS({inputs:{x:a},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:i}}if("int32"===i)return function(e,t){const n=new bS(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(a,s);if("bool"===i){const e=s.makeTensorInfo([],"bool",W("bool",1)),t=gE({inputs:{a,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}},kE="return ceil(x);",vE=YS({opSnippet:kE,packedOpSnippet:kE,cpuKernelImpl:zC}),IE={kernelName:Me,backendName:"webgl",kernelFunc:vE};class NE{constructor(e){this.variableNames=["A"],this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(e,t){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}class $E{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(e,t){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}const CE={kernelName:Le,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{clipValueMin:a,clipValueMax:i}=s;let o;o=ue().getBool("WEBGL_PACK_CLIP")?new $E(r.shape):new NE(r.shape);const l=o.getCustomSetupFunc(a,i);return n.runWebGLProgram(o,[r],r.dtype,l)}};class SE{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function TE(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const EE={kernelName:Pe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=n.texData.get(s.dataId),a=new SE(s.shape),i=[TE(s,r.complexTensorInfos.real),TE(s,r.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class AE{constructor(e){this.outputShape=[],this.outputShape=ou(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const s=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${s}));`)}const s=t.length,r=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class RE{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=ou(e,t);const n=this.outputShape,s=n.length,r=RC(s),a=hS("coords",s),i=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map(((e,t)=>`T${t}`));const o=new Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];const l=i[t],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<o.length;e++){const t=o[e-1];h+=`\n        if (${l} < ${o[e]}  && ${l} >= ${o[e-1]}) {\n          return getChannel(\n            getT${e}(${FE(i,l,t)}),\n            vec2(${FE(u,l,t)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${FE(i,l,d)}),\n          vec2(${FE(u,l,d)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[s-1]} = ${a[s-1]} + 1;\n        if (${a[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[s-2]} = ${a[s-2]} + 1;\n        if (${a[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[s-1]} = ${a[s-1]} - 1;\n        if (${a[s-2]} < ${n[s-2]} &&\n            ${a[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function FE(e,t,n){const s=e.indexOf(t);return e.map(((e,t)=>t===s?`${e} - ${n}`:e)).join()}function DE(e){const{inputs:t,backend:n}=e,{input:s}=t;return PS({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const _E={kernelName:Ct,backendName:"webgl",kernelFunc:DE};function OE(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map((e=>bE({inputs:{input:e},backend:n}))),r=e.map((e=>DE({inputs:{input:e},backend:n}))),a=OE(s,t,n),i=OE(r,t,n),o=WS({inputs:{real:a,imag:i},backend:n});return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),r.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}if("string"===s){const{tensors2D:r,outShape:a}=ME(e,t,n),i=r.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),o=1===r[0].shape[0],l=PC(i,a,s,o),u=ou(e.map((e=>e.shape)),t),c=n.makeTensorInfo(u,s,l);return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}if(e.length>ue().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const s=Math.floor(e.length/2),r=OE(e.slice(0,s),t,n),a=OE(e.slice(s),t,n),i=OE([r,a],t,n);return n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}if(ue().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const r=new RE(e.map((e=>e.shape)),t);return n.runWebGLProgram(r,e,s)}const{tensors2D:r,outShape:a}=ME(e,t,n),i=new AE(r.map((e=>e.shape))),o=n.runWebGLProgram(i,r,s);r.forEach((e=>n.disposeIntermediateTensorInfo(e)));const l=aT({inputs:{x:o},attrs:{shape:a},backend:n});return n.disposeIntermediateTensorInfo(o),l}function ME(e,t,n){const s=ou(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>aT({inputs:{x:e},attrs:{shape:[-1,F(e.shape.slice(t))]},backend:n}))),outShape:s}}function LE(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=P(r,t[0].shape)[0],i=ou(t.map((e=>e.shape)),a);if(0===F(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>F(e.shape)>0));return 1===o.length?PS({inputs:{x:o[0]},backend:n}):(iu(o.map((e=>e.shape)),a),OE(o,a,n))}const zE={kernelName:Be,backendName:"webgl",kernelFunc:LE};class PE{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${w}\n        setOutput(result);\n      }\n    `}}class BE{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class WE{constructor(e,t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:s,inChannels:r,strideWidth:a,strideHeight:i,padInfo:o,outWidth:l,dilationWidth:u,dilationHeight:c,dataFormat:h}=n,{left:p,top:d}=o,f=r*s,m=rC(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let n=0;n<=1;n++)for(let s=0;s<=1;s++)x+=`\n          blockIndex = rc.y + ${s};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\n            offsetY = int(blockIndex / (${l})) * ${i} - ${d};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${t[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${l}.) * ${a}. - ${p}.);\n              d1 = offsetX + ${u} * (int(mod(float(pos), ${f}.) / ${r}.));\n\n              if(d1 < ${t[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${r}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+s}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+s}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}function VE({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const l=e.shape,u=s.texData.get(e.dataId),c=n.inChannels,h=l[0]*l[1]*l[2],p=n.outChannels,d="channelsLast"===n.dataFormat;let f;const m=[],g=(1===h||1===p)&&c>yT,y=l[2]%2!=0&&!!u.isPacked;if(!g&&ue().getBool("WEBGL_LAZILY_UNPACK")&&ue().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&y){const c=d?l[0]*l[1]*(l[2]+1):l[0]*l[2]*(l[3]+1),h={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},p=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,T(Y$(u.shape,h.shape),(()=>`packed reshape ${u.shape} to ${h.shape} isn't free`));const g=aT({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(g);const y=bT({a:h,b:g,backend:s,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i}),b=s.texData.get(y.dataId);T(b.isPacked,(()=>"batchMatMul result is expected to be packed")),u.shape=p,b.shape=n.outShape,f=PS({inputs:{x:y},backend:s}),f.shape=n.outShape,m.push(y)}else{const u=aT({inputs:{x:e},backend:s,attrs:{shape:[1,d?l[0]*l[1]*l[2]:l[0]*l[2]*l[3],n.inChannels]}}),c=aT({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=bT({a:u,b:c,transposeA:!1,transposeB:!1,backend:s,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i});f=aT({inputs:{x:h},backend:s,attrs:{shape:n.outShape}}),m.push(u),m.push(c),m.push(h)}for(const e of m)s.disposeIntermediateTensorInfo(e);return f}function UE({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:p,dataFormat:d}=n,f="channelsLast"===d,m=l*u*c,g=p*h,y=[m,g],b=[],x=aT({inputs:{x:e},backend:s,attrs:{shape:e.shape.slice(1)}}),w=aT({inputs:{x:t},backend:s,attrs:{shape:[1,m,F(t.shape)/m]}});b.push(x),b.push(w);const k=new WE(y,x.shape,n),v=s.runWebGLProgram(k,[x],"float32"),I=aT({inputs:{x:v},backend:s,attrs:{shape:[1,y[0],y[1]]}});b.push(v),b.push(I);const N=null!=r,$=null!=a,C="leakyrelu"===o,S=o?ZS(o,!0):null,T=new QS(I.shape,w.shape,[1,g,n.outChannels],!0,!1,N,S,$,C),E=[I,w];if(r&&E.push(r),$&&E.push(a),C){const e=s.makeTensorInfo([],"float32",gs(i,"float32"));E.push(e),b.push(e)}const A=s.runWebGLProgram(T,E,"float32"),R=aT({inputs:{x:A},backend:s,attrs:{shape:f?[1,p,h,n.outChannels]:[1,n.outChannels,p,h]}});b.push(A);for(const e of b)s.disposeIntermediateTensorInfo(e);return R}const GE={kernelName:We,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=ei(l),p=Ha(r.shape,a.shape,i,u,o,c,!1,h);let d;if(1!==p.filterHeight||1!==p.filterWidth||1!==p.dilationHeight||1!==p.dilationWidth||1!==p.strideHeight||1!==p.strideWidth||"SAME"!==p.padInfo.type&&"VALID"!==p.padInfo.type)if(ue().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])d=UE({x:r,filter:a,convInfo:p,backend:n});else{const e=new PE(p);d=n.runWebGLProgram(e,[r,a],"float32")}else d=VE({x:r,filter:a,convInfo:p,backend:n});const f=aT({inputs:{x:d},backend:n,attrs:{shape:p.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class HE{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class jE{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class KE{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.padInfo.front,a=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${r};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class qE{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const XE={kernelName:Ve,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=ei(l),p=Ha(r.shape,c,i,1,o,u,!1,h),d=new HE(p);return n.runWebGLProgram(d,[r,a],"float32")}},YE={kernelName:Ue,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=ei(u),p=Ha(i,a.shape,o,1,l,c,!1,h),d=new jE(p);return n.runWebGLProgram(d,[r,a],"float32")}},JE={kernelName:Ge,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=ja(r.shape,a.shape,i,l,o),c=new BE(u);return n.runWebGLProgram(c,[r,a],"float32")}},ZE={kernelName:He,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s,u=ja(r.shape,l,i,1,o),c=new KE(u);return n.runWebGLProgram(c,[r,a],"float32")}},QE={kernelName:je,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s,u=ja(l,a.shape,o,1,i),c=new qE(u);return n.runWebGLProgram(c,[r,a],"float32")}},eA=YS({opSnippet:XS+"\n  return cos(x);\n"}),tA={kernelName:Ke,backendName:"webgl",kernelFunc:eA},nA=YS({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),sA={kernelName:qe,backendName:"webgl",kernelFunc:nA};class rA{constructor(e,t,n,s,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===s?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const aA={kernelName:Ye,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,c=new rA(r.shape,a.shape,o,l,u);return n.runWebGLProgram(c,[r,a,i],"float32")}};class iA{constructor(e,t,n){this.variableNames=["x"],this.outputShape=e;const s=e.length,r=t?"0.0":`getX(${oA(s,"coords")})`,a=e[e.length-1];let i="",o="";t?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?`end + pow2 < ${a}`:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${RC(s)} coords = getOutputCoords();\n        int end = ${lA(s,"coords")};\n        float val = ${r};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${lA(s,"coords")} = idx;\n          val += getX(${oA(s,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.index&&(this.index=t.getUniformLocation(n,"index")),t.gl.uniform1f(this.index,e)}}}function oA(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function lA(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const uA={kernelName:Xe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s,l=r.shape.length,u=to([a],l);let c=r;null!=u&&(c=mT({inputs:{x:r},backend:n,attrs:{perm:u}}));const h=so(1,l)[0];if(h!==l-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${r.shape.length-1} but got axis=${a}`);const p=c.shape[h];let d=PS({inputs:{x:c},backend:n});for(let e=0;e<=Math.ceil(Math.log2(p))-1;e++){const t=new iA(c.shape,!1,o),s=t.getCustomSetupFunc(e),r=d;d=n.runWebGLProgram(t,[d],d.dtype,s),n.disposeIntermediateTensorInfo(r)}if(i){const e=new iA(c.shape,i,o),t=d;d=n.runWebGLProgram(e,[d],d.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=u){const e=mT({inputs:{x:d},backend:n,attrs:{perm:no(u)}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(c),e}return d}},cA={kernelName:Je,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=n.readSync(r.dataId),t=n.readSync(a.dataId),s=MC(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,s)}if(2===r.shape.length){const e=n.bufferSync(r),t=n.bufferSync(a),s=LC(e,t,i,o);return n.makeTensorInfo(s.shape,a.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class hA{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const pA={kernelName:Ze,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s;T(a>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${a}`));const o=r.shape[0],l="NHWC"===i?r.shape[1]:r.shape[2],u="NHWC"===i?r.shape[2]:r.shape[3],c="NHWC"===i?r.shape[3]:r.shape[1],h=l*a,p=u*a,d=c/(a*a),f=new hA("NHWC"===i?[o,h,p,d]:[o,d,h,p],a,i);return n.runWebGLProgram(f,[r],r.dtype)}};class dA{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.inHeight,i=e.inWidth,o=e.padInfo.top,l=e.padInfo.left,u=e.strideHeight,c=e.strideWidth,h=e.dilationHeight,p=e.dilationWidth,d=e.filterHeight,f=e.filterWidth,m=e.outChannels/e.inChannels;let g="",y="";n&&(g=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,y="result = activation(result);");const b=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${u}, ${c});\n      const ivec2 pads = ivec2(${o}, ${l});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${m};\n        int q = d2 - d1 * ${m};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${h};\n\n          if (xR < 0 || xR >= ${a}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${f}; wC++) {\n            int xC = xCCorner + wC * ${p};\n\n            if (xC < 0 || xC >= ${i}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${b}\n        ${y}\n        setOutput(result);\n      }\n    `}}class fA{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.outShape;const a=e.inHeight,i=e.inWidth,o=e.padInfo.top,l=e.padInfo.left,u=e.strideHeight,c=e.strideWidth,h=e.dilationHeight,p=e.dilationWidth,d=e.filterHeight,f=e.filterWidth,m=f;let g="int xR; int xC; int xCOffset;";for(let e=0;e<d;e++)for(let t=0;t<f;t++)g+=`\n          vec4 xTexelR${e}C${2*t} = vec4(0.);\n          vec4 wR${e}C${t} = vec4(0.);\n          vec4 xR${e}C${t} = vec4(0.);`;for(let e=0;e<d;e++)for(let t=0;t<m;t++){const n=2*t;if(g+=`\n          xR = xRCorner + ${e*h};\n          xC = xCCorner + ${n*p};\n        `,1===c){if(n<f&&(g+=l%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${a} && xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${i}) {\n                    xTexelR${e}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${a} && xCOffset >= 0 && xCOffset < ${i}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${i}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${e}C${n} = vec4(previous.zw, xTexelR${e}C${n}.xy);\n                } else {\n                  xR${e}C${n} = vec4(0, 0, xTexelR${e}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${a} && xC >= 0 && xC < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xR${e}C${n} = xTexelR${e}C${n};\n              `,n+1<f)){const t=l%2==0?S(p):p;p%2==0&&l%2==1||p%2!=0&&l%2!=1?(g+=`\n                  xCOffset = xC + ${l%2} + ${t};\n\n                  if(xR >= 0 && xR < ${a} &&\n                    xCOffset >= 0 && xCOffset < ${i}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,p>1&&(g+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${a} &&\n                      xCOffset >= 0 && xCOffset < ${i}) {\n                      xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${e}C${n} = vec4(0.);\n                    }\n                  `),g+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.xy);\n                `):g+=`\n                  xCOffset = xC + ${t};\n\n                  if(xR >= 0 && xR < ${a} &&\n                    xCOffset >= 0 && xCOffset < ${i}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${e}C${n+1} = xTexelR${e}C${n+2};\n                `}}else n<f&&(g+=`\n              if(xR >= 0 && xR < ${a}) {\n            `,l%2==1?(g+=`\n                xCOffset = xC + 1 - ${c};\n                if(xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${i}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n              `,n+1<f&&(g+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${c};\n                  if(xCOffset >= 0 && xCOffset < ${i}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${e}C${n+1} = vec4(xTexelR${e}C${n+2}.xy, final.xy);\n                `)):(g+=`\n                if(xC >= 0 && xC < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${c};\n                if(xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.xy, xTexelR${e}C${n+2}.xy);\n              `,n+1<f&&(g+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n                `)),g+="}");n<f&&(g+=`\n            vec4 wTexelR${e}C${n} = getW(${e}, ${n}, d1, q);\n            wR${e}C${n} = vec4(wTexelR${e}C${n}.xz, wTexelR${e}C${n}.xz);\n          `,n+1<f&&(g+=`\n              vec4 wTexelR${e}C${n+1} = getW(${e}, ${n+1}, d1, q);\n              wR${e}C${n+1} =\n                vec4(wTexelR${e}C${n+1}.xz, wTexelR${e}C${n+1}.xz);`))}for(let e=0;e<d;e++)for(let t=0;t<f;t++)g+=`dotProd += xR${e}C${t} * wR${e}C${t};`;let y="",b="";n&&(y=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,b="result = activation(result);");const x=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${y}\n\n      const ivec2 strides = ivec2(${u}, ${c});\n      const ivec2 pads = ivec2(${o}, ${l});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${g}\n\n        vec4 result = dotProd;\n        ${x}\n        ${b}\n        setOutput(result);\n      }\n    `}}const mA={kernelName:Qe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),T(Qa(i,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`));const h=Ha(r.shape,a.shape,i,c,o,u,!0);let p;return p=ue().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new fA(h):new dA(h),n.runWebGLProgram(p,[r,a],"float32")}};class gA{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class yA{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const bA={kernelName:et,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s,h=Ha(r.shape,c,i,o,l,u,!0),p=new gA(h);return n.runWebGLProgram(p,[r,a],"float32")}},xA={kernelName:tt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s,h=Ha(c,a.shape,i,o,l,u,!0),p=new yA(h);return n.runWebGLProgram(p,[r,a],"float32")}};class wA{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const kA={kernelName:nt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=[...s.shape,...s.shape],a=F(s.shape),i=aT({inputs:{x:s},backend:n,attrs:{shape:[a]}}),o=new wA(a),l=n.runWebGLProgram(o,[i],i.dtype),u=aT({inputs:{x:l},backend:n,attrs:{shape:r}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),u}};class vA{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:r,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const IA={kernelName:st,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=Va(r.shape,a.shape,i,o,"NHWC",l);let c;const h=new vA(u);c=n.runWebGLProgram(h,[r,a],"float32");const p=aT({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),p}},NA=YS({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),$A={kernelName:ot,backendName:"webgl",kernelFunc:NA},CA={kernelName:lt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:r}=t,a=ue().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new zS("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new MS("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}},SA=JS({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool"}),TA={kernelName:ct,backendName:"webgl",kernelFunc:SA},EA=YS({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${vu};\n  float a1 = ${Iu};\n  float a2 = ${Nu};\n  float a3 = ${$u};\n  float a4 = ${Cu};\n  float a5 = ${Su};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),AA={kernelName:ut,backendName:"webgl",kernelFunc:EA},RA="return exp(x);",FA=YS({opSnippet:RA,packedOpSnippet:RA,cpuKernelImpl:BC}),DA={kernelName:ht,backendName:"webgl",kernelFunc:FA};function _A(e){const{inputs:t,attrs:n,backend:s}=e,{dim:r}=n,{input:a}=t,i=a.shape.length,o=a.shape.slice();let l=r;return r<0&&(T(-(i+1)<=r,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+r+1),o.splice(l,0,1),aT({inputs:{x:a},backend:s,attrs:{shape:o}})}const OA={kernelName:pt,backendName:"webgl",kernelFunc:_A},MA="return exp(x) - 1.0;",LA=YS({opSnippet:MA,packedOpSnippet:MA,cpuKernelImpl:WC}),zA={kernelName:dt,backendName:"webgl",kernelFunc:LA};class PA{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const r=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${s}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function BA(e,t,n){const s=n.texData.get(e.dataId),r=F(e.shape),a=e.shape[e.shape.length-1],i=aT({inputs:{x:e},backend:n,attrs:{shape:[r/a,a]}}),o=i.shape,l=new PA("real",o,t),u=new PA("imag",o,t),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:o},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:o}],h=n.runWebGLProgram(l,c,"float32"),p=n.runWebGLProgram(u,c,"float32"),d=WS({inputs:{real:h,imag:p},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p);const f=aT({inputs:{x:d},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(d),f}const WA={kernelName:ft,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return BA(s,!1,n)}};class VA{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}function UA(e){const{backend:t,attrs:n}=e,{shape:s,value:r}=n;let{dtype:a}=n;if(a=a||q(r),"string"===a){const e=V(a,F(s));return e.fill(r),t.makeTensorInfo(s,a,e)}{const e=new VA(s,r),n=e.getCustomSetupFunc(r);return t.runWebGLProgram(e,[],a,n)}}const GA={kernelName:mt,backendName:"webgl",kernelFunc:UA};class HA{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const jA={kernelName:gt,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,r=new HA(n.shape);return s.runWebGLProgram(r,[n],n.dtype)}},KA="return floor(x);",qA=YS({opSnippet:KA,packedOpSnippet:KA,cpuKernelImpl:VC}),XA={kernelName:yt,backendName:"webgl",kernelFunc:qA},YA=JS({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),JA={kernelName:bt,backendName:"webgl",kernelFunc:YA};class ZA{constructor(e){this.variableNames=["A"];const t=rC(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class QA{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=rC(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const eR={kernelName:ss,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:r}=t;const{numChannels:a}=s,i="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,[l,u]=i?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],h=[u,l,a];(o||i)&&(null==tR&&(tR=document.createElement("canvas").getContext("2d")),tR.canvas.width=l,tR.canvas.height=u,tR.drawImage(r,0,0,l,u),r=tR.canvas);const p=n.makeTensorInfo(c,"int32");n.texData.get(p.dataId).usage=E$.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),r);const d=ue().getBool("WEBGL_PACK")?new QA(h):new ZA(h),f=n.runWebGLProgram(d,[p],"int32");return n.disposeData(p.dataId),f}};let tR;const nR={kernelName:is,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s,m=ei(c),g=Ha(r.shape,a.shape,l,h,u,p,!1,m);let y;const b=[];if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(ue().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])y=UE({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});else{const e=null!=i,t=null!=o,s="leakyrelu"===d,l=d?ZS(d,!1):null,u=new PE(g,e,l,t,s),c=[r,a];if(i&&c.push(i),o&&c.push(o),s){const e=n.makeTensorInfo([],"float32",gs(f,"float32"));c.push(e),b.push(e)}y=n.runWebGLProgram(u,c,"float32")}else y=VE({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});const x=aT({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}},sR={kernelName:os,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:h,activation:p,leakyreluAlpha:d}=s,f=[];let m=c;null==m&&(m=[1,1]),T(Qa(l,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`));const g=Ha(r.shape,a.shape,l,m,u,h,!0),y=ue().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,b=p?ZS(p,y):null,x=[r,a],w=null!=i,k=null!=o,v="leakyrelu"===p;if(w&&x.push(i),k&&x.push(o),v){const e=n.makeTensorInfo([],"float32",gs(d,"float32"));x.push(e),f.push(e)}let I;I=y?new fA(g,w,b,k,v):new dA(g,w,b,k,v);const N=n.runWebGLProgram(I,x,"float32");return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),N}};class rR{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const s=RC(t.length),r=RC(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${s} strides = ${s}(${this.strides});\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const aR={kernelName:kt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=r.shape,i=a[a.length-1],[o,l,u,c]=gu(s,r),h=aT({inputs:{x:r},backend:n,attrs:{shape:[l,i]}}),p=aT({inputs:{x:s},backend:n,attrs:{shape:[F(s.shape)/u,u]}}),d=new rR(i,c,[l,u]),f=n.runWebGLProgram(d,[p,h],p.dtype),m=aT({inputs:{x:f},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),m}};class iR{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=RC(this.rank),s=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let t=0;t<e.length;t++)2===t?s.push("int(getIndices(resRC.x, resRC.z))"):s.push(`${n[t]}`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}const oR={kernelName:wt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s,l=Wu(r,a,P(i,r.shape)[0],o),u=F(a.shape),c=[],h=aT({inputs:{x:r},backend:n,attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]}}),p=aT({inputs:{x:a},backend:n,attrs:{shape:[l.batchSize,u/l.batchSize]}});c.push(h),c.push(p);const d=[l.batchSize,l.outerSize,u/l.batchSize,l.sliceSize];if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const e=n.bufferSync(p),t=n.bufferSync(h),s=UC(t,e,d);return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(l.outputShape,s.dtype,s.values)}const f=new iR(h.shape,d),m=n.runWebGLProgram(f,[h,p],h.dtype);c.push(m);const g=aT({inputs:{x:m},backend:n,attrs:{shape:l.outputShape}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}},lR=JS({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:GC,dtype:"bool"}),uR={kernelName:vt,backendName:"webgl",kernelFunc:lR},cR=JS({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool"}),hR={kernelName:It,backendName:"webgl",kernelFunc:cR},pR={kernelName:$t,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return BA(s,!0,n)}},dR=YS({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),fR={kernelName:St,backendName:"webgl",kernelFunc:dR},mR=YS({opSnippet:"return float(isinf(x));",dtype:"bool"}),gR={kernelName:Tt,backendName:"webgl",kernelFunc:mR},yR=YS({opSnippet:"return float(isnan(x));",dtype:"bool"}),bR={kernelName:Et,backendName:"webgl",kernelFunc:yR},xR=JS({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:HC,dtype:"bool"}),wR={kernelName:Rt,backendName:"webgl",kernelFunc:xR},kR=JS({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",dtype:"bool"}),vR={kernelName:Ft,backendName:"webgl",kernelFunc:kR},IR={kernelName:Dt,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=jC(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},NR=YS({opSnippet:"if (x < 0.0) return NAN;\n  return log(x);",packedOpSnippet:"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:KC}),$R={kernelName:_t,backendName:"webgl",kernelFunc:NR},CR=YS({opSnippet:"return log(1.0 + x);"}),SR={kernelName:Ot,backendName:"webgl",kernelFunc:CR},TR=JS({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),ER={kernelName:Mt,backendName:"webgl",kernelFunc:TR},AR=YS({opSnippet:"return float(!(x >= 1.0));"}),RR={kernelName:Lt,backendName:"webgl",kernelFunc:AR},FR=JS({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),DR={kernelName:zt,backendName:"webgl",kernelFunc:FR};class _R{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class OR{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const MR={kernelName:Pt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s,u=ue().getBool("WEBGL_PACK_NORMALIZATION")?new OR(r.shape,a,i,o,l):new _R(r.shape,a,i,o,l);return n.runWebGLProgram(u,[r],r.dtype)}};class LR{constructor(e,t,n,s,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${r})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const zR={kernelName:Bt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s,h=new LR(r.shape,o,l,u,c);return n.runWebGLProgram(h,[r,a,i],r.dtype)}};function PR(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=r.shape.length,l=P(a,r.shape);let u=l;const c=to(u,o),h=null!=c,p=n.shouldExecuteOnCPU([r]);let d=r;if(h){if(p){const e=n.texData.get(d.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const s=lS(e,r.shape,r.dtype,c,t);d=n.makeTensorInfo(t,r.dtype),n.texData.get(d.dataId).values=s}else d=pT(r,c,n);u=so(u.length,o)}eo("max",u,o);const[f,m]=Zi(d.shape,u);let g,y=f;if(i&&(y=Qi(f,l)),p){const e=n.texData.get(d.dataId).values,t=qC(e,F(m),y,r.dtype);g=n.makeTensorInfo(y,r.dtype),n.texData.get(g.dataId).values=t}else g=function(e,t,n,s){const r=F(t),a=aT({inputs:{x:e},attrs:{shape:[F(e.shape)/r,r]},backend:s}),i=uT(a,e.dtype,"max",s),o=aT({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(d,m,y,n);return h&&n.disposeIntermediateTensorInfo(d),g}const BR={kernelName:Wt,backendName:"webgl",kernelFunc:PR},WR=JS({opSnippet:OS+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  "+LS+"\n  return result;\n",cpuKernelImpl:XC}),VR={kernelName:Vt,backendName:"webgl",kernelFunc:WR},UR={kernelName:Ut,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;nC(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;T(Qa(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=Ua(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&D(u.inShape,u.outShape))return PS({inputs:{x:r},backend:n});const c=new JT(u,"max",!1);return n.runWebGLProgram(c,[r],r.dtype)}},GR={kernelName:Ht,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dataFormat:l,dimRoundingMode:u}=s,c=Ga(r.shape,a,i,[1,1,1],o,u,l),h=new ZT(c,"max",!1);return n.runWebGLProgram(h,[r],r.dtype)}};class HR{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,r=e.effectiveFilterHeight,a=e.effectiveFilterWidth,i=r-1-e.padInfo.top,o=a-1-e.padInfo.left,l=r*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class jR{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.dilationDepth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=l-1-e.padInfo.top,p=u-1-e.padInfo.left,d=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const KR={kernelName:jt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=Ga(i.shape,o,l,[1,1,1],u,c),p=new ZT(h,"max",!0),d=n.runWebGLProgram(p,[i],i.dtype),f=new jR(h),m=n.runWebGLProgram(f,[r,d],i.dtype);return n.disposeIntermediateTensorInfo(d),m}},qR={kernelName:Gt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;nC([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=Ua(o.shape,l,u,1,c,h),d=new JT(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new HR(p),g=n.runWebGLProgram(m,[r,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}},XR={kernelName:Kt,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;T(4===s.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`));const u=[1,1];T(Qa(a,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`));const c=Ua(s.shape,r,a,u,i),[h,p]=function(e,t,n,s){let r=new JT(n,"max",!1);const a=s.runWebGLProgram(r,[e],"float32");return r=new JT(n,"max",!0,!0,t),[a,s.runWebGLProgram(r,[e],"float32")]}(s,o,c,l);return[h,p]}},YR={kernelName:qt,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:r,axis:a}=t,i=n,o=s.shape.length,l=P(a,s.shape);let u=l;const c=to(u,o),h=null!=c,p=i.shouldExecuteOnCPU([s]),d=[];let f=s;if(h){if(p){const e=i.texData.get(f.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const n=lS(e,s.shape,s.dtype,c,t);f=i.makeTensorInfo(t,s.dtype),i.texData.get(f.dataId).values=n}else f=pT(s,c,i);d.push(f),u=so(u.length,o)}eo("sum",u,o);const[m,g]=Zi(f.shape,u);let y=m;r&&(y=Qi(m,l));const b=function(e,t,n,s){const r=F(t),a=aT({inputs:{x:e},attrs:{shape:[F(e.shape)/r,r]},backend:s}),i=uT(a,"float32","mean",s),o=aT({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(f,g,y,i);for(const e of d)i.disposeIntermediateTensorInfo(e);return b}},JR={kernelName:Xt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=P(a,r.shape);let u=l;const c=to(u,o);let h=r;null!=c&&(h=mT({inputs:{x:r},backend:n,attrs:{perm:c}}),u=so(u.length,r.shape.length)),eo("min",u,o);const[p,d]=Zi(h.shape,u),f=aT({inputs:{x:h},backend:n,attrs:{shape:[-1,F(d)]}}),m=uT(f,f.dtype,"min",n);let g;return g=aT(i?{inputs:{x:m},backend:n,attrs:{shape:Qi(p,l)}}:{inputs:{x:m},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},ZR=JS({opSnippet:OS+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  "+LS+"\n  return result;\n",cpuKernelImpl:YC}),QR={kernelName:Yt,backendName:"webgl",kernelFunc:ZR};class eF{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=RC(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class tF{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=RC(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=hS("rc",s),l=hS("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===s){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const nF={kernelName:Jt,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:r,mode:a}=n,i=ue().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new tF(s.shape,r,a):new eF(s.shape,r,a);return t.runWebGLProgram(i,[s],s.dtype)}},sF=JS({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  "+LS+"\n  return result;\n"}),rF={kernelName:Zt,backendName:"webgl",kernelFunc:sF};class aF{constructor(e,t,n){this.variableNames=["probs"],this.outputShape=[e,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.seedLoc&&(this.seedLoc=t.getUniformLocation(n,"seed")),t.gl.uniform1f(this.seedLoc,e)}}}const iF=JS({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),oF={kernelName:it,backendName:"webgl",kernelFunc:iF},lF="return a - b;",uF=JS({opSnippet:lF,packedOpSnippet:lF,supportsComplex:!0,cpuKernelImpl:aS}),cF={kernelName:Un,backendName:"webgl",kernelFunc:uF};function hF(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=P([a],r.shape),o=PR({inputs:{x:r},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=Qi(o.shape,i),u=aT({inputs:{x:o},backend:n,attrs:{shape:l}}),c=uF({inputs:{a:r,b:u},backend:n}),h=FA({inputs:{x:c},backend:n}),p=dT({inputs:{x:h},backend:n,attrs:{axis:i,keepDims:!1}}),d=aT({inputs:{x:p},backend:n,attrs:{shape:l}}),f=iF({inputs:{a:h,b:d},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),f}const pF={kernelName:Bn,backendName:"webgl",kernelFunc:hF},dF={kernelName:Qt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s,l=o?r:hF({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new aF(u,c,a),p=h.getCustomSetupFunc(i),d=n.runWebGLProgram(h,[l],"int32",p);return o||n.disposeIntermediateTensorInfo(l),d}},fF="return -x;",mF={kernelName:tn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,r]=ZC(e.values,s.shape,s.dtype);return n.makeTensorInfo(r,s.dtype,t)}let r;return r=ue().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new AS(s.shape,fF):new bS(s.shape,fF),n.runWebGLProgram(r,[s],s.dtype)}},gF=kl,yF={kernelName:sn,backendName:"webgl",kernelFunc:function(e){Tu("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=gF(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},bF=vl,xF={kernelName:rn,backendName:"webgl",kernelFunc:function(e){Tu("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),{selectedIndices:p,validOutputs:d}=bF(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},wF=Il,kF={kernelName:an,backendName:"webgl",kernelFunc:function(e){Tu("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=wF(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class vF{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const IF={kernelName:ln,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{depth:a,onValue:i,offValue:o}=s,l=F(r.shape),u=new vF(l,a,i,o),c=aT({inputs:{x:r},backend:n,attrs:{shape:[l]}}),h=n.runWebGLProgram(u,[c],r.dtype);n.disposeIntermediateTensorInfo(c);const p=aT({inputs:{x:h},backend:n,attrs:{shape:[...r.shape,a]}});return n.disposeIntermediateTensorInfo(h),p}};function NF(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=bE({inputs:{input:s},backend:n}),t=NF({inputs:{x:e},backend:n}),r=DE({inputs:{input:s},backend:n}),a=NF({inputs:{x:r},backend:n}),i=WS({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return UA({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const $F={kernelName:ts,backendName:"webgl",kernelFunc:NF},CF={kernelName:on,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const t=bE({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=DE({inputs:{input:r},backend:s}),i=NF({inputs:{x:a},backend:s}),o=WS({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return UA({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:s})}},SF={kernelName:un,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return _A({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{E(a,e.shape,"All tensors passed to stack must have matching shapes"),T(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],l=LE({inputs:t.map((e=>{const t=_A({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}};class TF{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=RC(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n      uniform float value;\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n        uniform float value;\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}class EF{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=RC(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=hS("rc",s),l=hS("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${r} rc = outputLoc;`,`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],p=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===s?2:4;e<t;e++)d+=`\n        ${h[e]}\n        if (${p}) {\n          result[${e}] = float(value);\n        } else {\n          ${r} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===s?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n      uniform float value;\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}const AF=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s,o=ue().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new EF(r.shape,a,i):new TF(r.shape,a,i),l=o.getCustomSetupFunc(i);return n.runWebGLProgram(o,[r],r.dtype,l)},RF={kernelName:cn,backendName:"webgl",kernelFunc:AF},FF=JS({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  "+LS+"\n  return result;\n"}),DF={kernelName:hn,backendName:"webgl",kernelFunc:FF},_F={kernelName:dn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=[],u=P(a,r.shape);let c=u;const h=to(c,o);let p,d=r;if(null!=h&&(d=mT({inputs:{x:r},backend:n,attrs:{perm:h}}),c=so(c.length,o),l.push(d)),eo("prod",c,o),n.shouldExecuteOnCPU([d])){const e=n.texData.get(d.dataId).values,{outVals:t,outShape:s,outDtype:r}=QC(d.shape,d.dtype,e,c);p=n.makeTensorInfo(s,r,t)}else{const[e,t]=Zi(d.shape,c),s=F(t),a=aT({inputs:{x:d},backend:n,attrs:{shape:[-1,s]}}),i=uT(a,js(r.dtype),"prod",n);p=aT({inputs:{x:i},backend:n,attrs:{shape:e}}),l.push(a),l.push(i)}if(i){l.push(p);const e=Qi(p.shape,u);p=aT({inputs:{x:p},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},OF=e=>{const{backend:t,attrs:n}=e,{start:s,stop:r,step:a,dtype:i}=n,o=eS(s,r,a,i);return t.makeTensorInfo([o.length],i,o)},MF={kernelName:fn,backendName:"webgl",kernelFunc:OF},LF=YS({opSnippet:"return 1.0 / x;"}),zF={kernelName:gn,backendName:"webgl",kernelFunc:LF},PF=YS({opSnippet:xS+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),BF={kernelName:yn,backendName:"webgl",kernelFunc:PF},WF=YS({opSnippet:xS+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),VF={kernelName:In,backendName:"webgl",kernelFunc:WF};class UF{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class GF{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const HF={kernelName:kn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=ue().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new GF(r.shape,l,u,a,i):new UF(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],"float32")}};class jF{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const KF={kernelName:vn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new jF(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class qF{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}const XF={kernelName:xn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=new qF(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],r.dtype)}};class YF{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const JF={kernelName:wn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new YF(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class ZF{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map(((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s))).join(","),r=RC(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class QF{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=hS("rc",n),r=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=RC(n);function o(n){const s=e.map(((s,r)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(r,n)));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(s.slice())};\n          if(${r}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(s.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const eD={kernelName:Nn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s,i=r.shape.length,o=P(a,r.shape);if(0===i)return PS({inputs:{x:r},backend:n});const l=ue().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new QF(r.shape,o):new ZF(r.shape,o);return n.runWebGLProgram(l,[r],r.dtype)}};class tD{constructor(e,t){this.variableNames=["Image"],this.outputShape=[];const n=e[1],s=e[2];this.outputShape=e;let r="";r="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        uniform vec4 params;\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${r}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}getCustomSetupFunc(e,t,n,s){return(r,a)=>{null==this.paramsLoc&&(this.paramsLoc=r.getUniformLocationNoThrow(a,"params")),r.gl.uniform4f(this.paramsLoc,e,t,n,s)}}}const nD={kernelName:rs,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=new tD(s.shape,a),[u,c]=cu(i,s.shape[1],s.shape[2]),h=l.getCustomSetupFunc(u,c,Math.sin(r),Math.cos(r));return o.runWebGLProgram(l,[s],s.dtype,h)}},sD=YS({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),rD={kernelName:$n,backendName:"webgl",kernelFunc:sD},aD=YS({opSnippet:"return inversesqrt(x);",cpuKernelImpl:tS}),iD={kernelName:Cn,backendName:"webgl",kernelFunc:aD};class oD{constructor(e,t,n,s,r,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=RC(r.length),l=RC(a.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${r});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const lD={kernelName:Sn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=xu(0,r,i),p=[h/u,u];if(0===h)return n.makeTensorInfo(i,r.dtype);const d=aT({inputs:{x:r},backend:n,attrs:{shape:[l,o]}}),f=aT({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new oD(l,o,d.shape.length,f.shape.length,c,p),y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=aT({inputs:{x:y},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class uD{constructor(e,t,n){let s,r;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let s=0;s<t.length;s++)i.push(`${n[s]}`),s<e&&a.push(`${n[s]}`);s=a.join(),r=i.join()}const a=RC(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const cD={kernelName:Tn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t,i=new uD(s.shape.length,r.shape,r.shape.length);return n.runWebGLProgram(i,[s,r,a],Hs(r.dtype,a.dtype))}},hD=YS({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${wu};\n  float scale = ${ku};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),pD={kernelName:En,backendName:"webgl",kernelFunc:hD},dD=YS({opSnippet:"return 1.0 / (1.0 + exp(-1.0 * x));"}),fD={kernelName:_n,backendName:"webgl",kernelFunc:dD},mD=YS({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),gD={kernelName:Dn,backendName:"webgl",kernelFunc:mD},yD=YS({opSnippet:XS+"\n  return sin(x);\n"}),bD={kernelName:Rn,backendName:"webgl",kernelFunc:yD},xD=YS({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),wD={kernelName:Fn,backendName:"webgl",kernelFunc:xD},kD=YS({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),vD={kernelName:On,backendName:"webgl",kernelFunc:kD},ID={kernelName:zn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;T(r.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=[],c=AF({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),h=hu(c.shape,a,o,!1),p=pu(h.length,a.length,!1),d=du(c.shape,a,o,!1),f=aT({inputs:{x:c},backend:n,attrs:{shape:h}}),m=mT({inputs:{x:f},backend:n,attrs:{perm:p}}),g=aT({inputs:{x:m},backend:n,attrs:{shape:d}});return u.push(c),u.push(f),u.push(m),u.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}},ND={kernelName:Gn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,strides:c,outputSize:h}=xu(0,r,o),p=new oD(u,l,r.shape.length,a.shape.length,c,[h,1],!1),d=n.runWebGLProgram(p,[a,r,i],a.dtype),f=aT({inputs:{x:d},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(d),f}},$D={kernelName:Pn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=P(i,r.shape)[0],l=zu(r,a,o),u=r.shape.length,c=new Array(u).fill(0),h=r.shape.slice();return l.map((e=>{const t=[...h];t[o]=e;const s=pE({inputs:{x:r},backend:n,attrs:{begin:c,size:t}});return c[o]+=e,s}))}},CD=YS({opSnippet:"return sqrt(x);"}),SD={kernelName:Mn,backendName:"webgl",kernelFunc:CD},TD={kernelName:Vn,backendName:"webgl",kernelFunc:YS({opSnippet:"return x * x;"})},ED="return (a - b) * (a - b);",AD=JS({opSnippet:ED,packedOpSnippet:ED}),RD={kernelName:Wn,backendName:"webgl",kernelFunc:AD},FD={kernelName:ns,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,r=xS+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new bS(s.shape,r);return n.runWebGLProgram(a,[s],s.dtype)}};class DD{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,r=RC(n.length),a=RC(n.length);let i="";if(1===s)i="coords * strides + begin";else{let e=0;i=n.map(((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`))).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const _D={kernelName:Hn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s,{nonStrided:d,$begin:f,$strides:m,size:g,newShape:y,outShape:b}=Ia(r.shape,a,i,o,l,u,c,h,p),x=aT({inputs:{x:r},backend:n,attrs:{shape:y}});let w;if(d){const e=pE({inputs:{x},backend:n,attrs:{begin:f,size:g}});w=aT({inputs:{x:e},backend:n,attrs:{shape:b}}),n.disposeIntermediateTensorInfo(e)}else if(b.some((e=>0===e)))w=n.makeTensorInfo(b,r.dtype,[]);else if(n.shouldExecuteOnCPU([x])){const e=n.texData.get(x.dataId).values,t=qr(x.shape,x.dtype,e),s=rS(b,t,m,f);w=n.makeTensorInfo(b,x.dtype,s.values)}else{const e=new DD(f,m,b);w=n.runWebGLProgram(e,[x],x.dtype)}const k=aT({inputs:{x:w},backend:n,attrs:{shape:b}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(w),k}},OD=YS({opSnippet:"return tan(x);"}),MD={kernelName:jn,backendName:"webgl",kernelFunc:OD},LD=YS({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),zD={kernelName:Kn,backendName:"webgl",kernelFunc:LD};class PD{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const s=RC(this.rank),r=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${n[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function BD(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;if("string"===r.dtype){const e=n.readSync(r.dataId).map((e=>ws(e))),t=qr(r.shape,r.dtype,e),s=iS(t,a);return n.makeTensorInfo(s.shape,s.dtype,s.values)}const i=new PD(r.shape,a);return n.runWebGLProgram(i,[r],r.dtype)}const WD={kernelName:qn,backendName:"webgl",kernelFunc:BD},VD={kernelName:Xn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s,o=n.readSync(r.dataId),[l,u]=oS(o,r.shape,r.dtype,a,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}};class UD{constructor(e,t,n,s,r,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const i="nearest"===n?1:2;let o;switch(s){case"constant":default:o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${r});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${r});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const GD={kernelName:Yn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=s,[c,h,p,d]=r.shape,[f,m]=null!=u?u:[h,p],g=new UD(h,p,i,o,l,[c,f,m,d]);return n.runWebGLProgram(g,[r,a],"float32")}},HD={kernelName:Zn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;nC(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(a.dataId),{outputValues:o,outputShape:l,indices:u}=uS(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},jD={kernelName:Qn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r,o=i.shape.length,l=r.shape[a],u=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==a&&(u[c++]=i.shape[e]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[a]=1;const f=new Array(l);for(let e=0;e<f.length;e++){p[a]=e;const t=pE({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),s=aT({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=s,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class KD{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,r=e.inSize,a=e.numSegments,i=a*Math.ceil(r/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const qD=[MR,zR,xT,kT,IT,$T,TT,RT,FT,DT,PT,BT,VT,GT,qT,jT,YT,eE,QT,sE,rE,aE,lE,fE,mE,wE,IE,CE,EE,VS,zE,XE,YE,GE,ZE,QE,JE,tA,sA,aA,uA,cA,pA,bA,xA,mA,kA,IA,$A,CA,TA,AA,DA,OA,zA,WA,GA,jA,XA,JA,eR,nR,sR,aR,oR,uR,hR,BS,pR,_E,fR,gR,bR,HS,wR,vR,IR,SR,$R,ER,RR,DR,BR,GR,UR,KR,qR,XR,VR,YR,JR,QR,nF,rF,dF,rT,mF,yF,xF,kF,yE,IF,CF,SF,RF,DF,qS,_F,MF,xE,oF,zF,VF,BF,iT,HF,KF,XF,JF,eD,nD,rD,iD,lD,cD,pD,fD,gD,bD,wD,dE,pF,vD,ID,ND,$D,SD,TD,RD,FD,_D,cF,fT,MD,zD,WD,VD,GD,gT,HD,jD,{kernelName:es,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s,o=r.shape.length,l=[];let u=0;const c=to([u],o);let h=r;null!=c&&(h=mT({inputs:{x:r},backend:n,attrs:{perm:c}}),l.push(h),u=so(1,o)[0]);const p=Bu(h.shape,u,i),d=F([h.shape[u]]),f=aT({inputs:{x:h},backend:n,attrs:{shape:[-1,d]}});l.push(f);const m=js(r.dtype),g=(e,t,s,r,a)=>{const i=e.shape[0],o=e.shape[1],u=Pu(o,a),c=new KD({windowSize:u,inSize:o,batchSize:i,numSegments:a},t),h=n.compileAndRun(c,[e,s],r);if(l.push(h),h.shape[1]===a)return h;const p=OF({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),d=BD({inputs:{x:p},backend:n,attrs:{reps:[o/u]}});return l.push(p),l.push(d),g(h,t,d,r,a)},y=aT({inputs:{x:g(f,"unsortedSegmentSum",a,m,i)},backend:n,attrs:{shape:p}});let b=y;if(null!=c){l.push(y);const e=no(c);b=mT({inputs:{x:b},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},$F];for(const e of qD)ds(e);const XD={flipHorizontal:!1,outputStride:16,imageScaleFactor:1,maxNumBoxes:20,iouThreshold:.2,scoreThreshold:.6,modelType:"ssd320fpnlite",modelSize:"small",bboxLineWidth:"2",fontSize:17,basePath:"https://cdn.jsdelivr.net/npm/handtrackjs@latest/models/webmodel/",labelMap:{1:"open",2:"closed",3:"pinch",4:"point",5:"face",6:"pointtip",7:"pinchtip"},renderThresholds:null},YD={large:"base",medium:"fp16",small:"int8"},JD={open:"#374151",closed:"#B91C1C",pinch:"#F59E0B",point:"#10B981",face:"#3B82F6",pointtip:"#6366F1",pinchtip:"#EC4899"},ZD={ssd320fpnlite:["StatefulPartitionedCall/Postprocessor/Slice","StatefulPartitionedCall/Postprocessor/ExpandDims_1"],ssd640fpnlite:["StatefulPartitionedCall/Postprocessor/Slice","StatefulPartitionedCall/Postprocessor/ExpandDims_1"],centernet512fpn:["Identity_4:0","Identity:0","Identity_2:0"]};class QD{constructor(e){this.modelPath=e.basePath+e.modelType+"/"+(YD[e.modelSize]||"base")+"/model.json ",this.modelParams=e}async load(){this.fps=0,this.model=await async function(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e=`${e}model.json?tfjs-format=file`);const n=new hx(e,t);return await n.load(),n}(this.modelPath);const e=uo([1,300,300,3],"int32"),t=await this.model.executeAsync(e,ZD[this.modelParams.modelType]);t.map((async e=>await e.data())),t.map((async e=>e.dispose())),Aa(e)}async detect(e){let t=Date.now();const[n,s]=function(e){return e instanceof Ms?[e.shape[0],e.shape[1]]:[e.height,e.width]}(e),r=e_(this.modelParams.imageScaleFactor,n,this.modelParams.outputStride),a=e_(this.modelParams.imageScaleFactor,s,this.modelParams.outputStride),i=Ea((()=>{const t=oa(e);return this.modelParams.flipHorizontal?t.reverse(1).resizeBilinear([r,a]).expandDims(0).toInt():t.resizeBilinear([r,a]).expandDims(0).toInt()})),o=this;return this.model.executeAsync(i,ZD[this.modelParams.modelType]).then((function(e){i.dispose();let r=[];if("centernet512fpn"===o.modelParams.modelType){const t=e[0].dataSync(),a=e[1].arraySync(),i=e[2].dataSync();Aa(e),r=o.buildDetectObjectsCenternet(s,n,a[0],t,i),console.log(r)}else{const t=e[0].dataSync(),a=e[1].dataSync();Aa(e);const[i,l]=function(e,t,n){const s=[],r=[];for(let a=0;a<t;a++){let t=Number.MIN_VALUE,i=-1;for(let s=0;s<n;s++)e[a*n+s]>t&&(t=e[a*n+s],i=s);s[a]=t,r[a]=i}return[s,r]}(t,e[0].shape[1],e[0].shape[2]),u=tr.backendName;Fa("cpu");const c=Ea((()=>{const t=zo(a,[e[1].shape[1],e[1].shape[3]]);return Kl.nonMaxSuppression(t,i,o.modelParams.maxNumBoxes,o.modelParams.iouThreshold,o.modelParams.scoreThreshold)})),h=c.dataSync();c.dispose(),Fa(u),r=o.buildDetectedObjects(s,n,a,i,h,l)}let a=Date.now();return o.fps=Math.round(1e3/(a-t)),r}))}buildDetectedObjects(e,t,n,s,r,a){const i=r.length,o=[];for(let l=0;l<i;l++){const i=[];for(let e=0;e<4;e++)i[e]=n[4*r[l]+e];const u=i[0]*t,c=i[1]*e,h=i[2]*t,p=i[3]*e;i[0]=c,i[1]=u,i[2]=p-c,i[3]=h-u;const d=Math.round(a[r[l]])+1;o.push({bbox:i,class:d,label:this.modelParams.labelMap[d],score:s[r[l]].toFixed(2)})}return o}buildDetectObjectsCenternet(e,t,n,s,r){const a=[];for(let i=0;i<s.length;i++){const o=n[i],l=o[0]*t,u=o[1]*e,c=o[2]*t,h=o[3]*e;o[0]=u,o[1]=l,o[2]=h-u,o[3]=c-l;const p=Math.round(r[i])+1;a.push({bbox:o,class:p,label:this.modelParams.labelMap[p],score:s[i].toFixed(2)})}return a.slice(0,10)}getFPS(){return this.fps}setModelParameters(e){this.modelParams=Object.assign({},this.modelParams,e)}getModelParameters(){return this.modelParams}roundRect(e,t,n,s,r,a,i,o){if(void 0===o&&(o=!0),void 0===a&&(a=5),"number"==typeof a)a={tl:a,tr:a,br:a,bl:a};else{var l={tl:0,tr:0,br:0,bl:0};for(var u in l)a[u]=a[u]||l[u]}e.beginPath(),e.moveTo(t+a.tl,n),e.lineTo(t+s-a.tr,n),e.quadraticCurveTo(t+s,n,t+s,n+a.tr),e.lineTo(t+s,n+r-a.br),e.quadraticCurveTo(t+s,n+r,t+s-a.br,n+r),e.lineTo(t+a.bl,n+r),e.quadraticCurveTo(t,n+r,t,n+r-a.bl),e.lineTo(t,n+a.tl),e.quadraticCurveTo(t,n,t+a.tl,n),e.closePath(),i&&e.fill(),o&&e.stroke()}renderPredictions(e,t,n,s){n.clearRect(0,0,t.width,t.height),t.width=s.width,t.height=s.height,t.style.height=parseInt(t.style.width)*(s.height/s.width).toFixed(2)+"px",n.save(),this.modelParams.flipHorizontal&&(n.scale(-1,1),n.translate(-s.width,0)),n.drawImage(s,0,0,s.width,s.height),n.restore(),n.font="bold "+this.modelParams.fontSize+"px Arial";const r=this.modelParams.renderThresholds;for(let t=0;t<e.length;t++){const s=e[t];(!r||s.score>r[s.label])&&(n.beginPath(),n.fillStyle="rgba(255, 255, 255, 0.6)",n.fillRect(s.bbox[0]+1,s.bbox[1]+1,s.bbox[2]-1,1.5*this.modelParams.fontSize),n.lineWidth=this.modelParams.bboxLineWidth,this.roundRect(n,s.bbox[0],s.bbox[1],s.bbox[2],s.bbox[3],5,!1,!0),n.strokeStyle=JD[s.label],n.fillStyle=JD[s.label],n.stroke(),n.beginPath(),n.arc(s.bbox[0]+s.bbox[2]/2,s.bbox[1]+s.bbox[3]/2,2,0,2*Math.PI),n.fill(),n.stroke(),n.fillText(s.score+" | "+s.label,s.bbox[0]+5,s.bbox[1]+1.1*this.modelParams.fontSize))}n.fillStyle="rgba(255, 255, 255, 0.6)",this.roundRect(n,10,10,4.6*this.modelParams.fontSize,this.modelParams.fontSize+8,5,!0,!1),n.strokeStyle="#374151",n.fillStyle="#374151",n.font="bold "+this.modelParams.fontSize+"px Arial",n.fillText("FPS: "+this.fps,18,this.modelParams.fontSize+12)}dispose(){this.model&&this.model.dispose()}}function e_(e,t,n){const s=t*e-1;return s-s%n+1}var t_=document.getElementById("video"),n_=document.getElementById("canvas"),s_=n_.getContext("2d"),r_=document.getElementById("toggleButton"),a_=!1,i_=null;function o_(){a_?(async function(){if(!window.localStream)return!1;window.localStream.getTracks().forEach((e=>(e.stop(),!0)))}(),a_=!1):function(e){return new Promise((function(t,n){e||t({status:!1,msg:"please provide a valid video element"}),e.width=e.width||640,e.height=e.width*(e.videoHeight/e.videoWidth),e.style.height="20px",navigator.mediaDevices.getUserMedia({audio:!1,video:{facingMode:"user"}}).then((n=>{window.localStream=n,e.srcObject=n,e.onloadedmetadata=()=>{e.height=e.width*(e.videoHeight/e.videoWidth),e.style.height=parseInt(e.style.width)*(e.videoHeight/e.videoWidth).toFixed(2)+"px",e.play(),t({status:!0,msg:"webcam successfully initiated."})}})).catch((function(e){t({status:!1,msg:e})}))}))}(t_).then((function(e){console.log("video started",e),e&&(a_=!0,l_())}))}function l_(){i_.detect(t_).then((function(e){console.log("Predictions: ",e),i_.renderPredictions(e,n_,s_,t_),a_&&requestAnimationFrame(l_)}))}t_.hidden=!0,r_.addEventListener("click",(function(){o_()})),async function(e){let t=Object.assign({},XD,{flipHorizontal:!0,maxNumBoxes:20,iouThreshold:.5,scoreThreshold:.6});const n=new QD(t);return await n.load(),n}().then((function(e){i_=e,console.log(i_),r_.disabled=!1}))})()})();